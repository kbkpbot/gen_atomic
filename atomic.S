/* ---------------------------------------------- */
/* This file is extracted from `gcc` v15.1.0 `libatomic.a`. */
/* This file is generated by https://github.com/kbkpbot/gen_atomic.git */
/* This file is generated at 2025-06-24 20:47. */
/* This file implements for i386/x86_64/arm/aarch64/riscv:
 * __atomic_load_[1,2,4,8]
 * __atomic_store_[1,2,4,8]
 * __atomic_compare_exchange_[1,2,4,8]
 * __atomic_exchange_[1,2,4,8]
 * __atomic_fetch_add_[1,2,4,8]
 * __atomic_add_fetch_[1,2,4,8]
 * __atomic_fetch_sub_[1,2,4,8]
 * __atomic_sub_fetch_[1,2,4,8]
 * __atomic_fetch_and_[1,2,4,8]
 * __atomic_and_fetch_[1,2,4,8]
 * __atomic_fetch_or_[1,2,4,8]
 * __atomic_or_fetch_[1,2,4,8]
 * __atomic_fetch_nand_[1,2,4,8]
 * __atomic_nand_fetch_[1,2,4,8]
 * __atomic_fetch_xor_[1,2,4,8]
 * __atomic_xor_fetch_[1,2,4,8]
 * __atomic_test_and_set_[1,2,4,8]
 * atomic_thread_fence
 * atomic_signal_fence
 * atomic_flag_test_and_set
 * atomic_flag_test_and_set_explicit
 * atomic_flag_clear
 * atomic_flag_clear_explicit
 */
#ifdef __leading_underscore
# define _(s) _##s
#else
# define _(s) s
#endif


/* ---------------------------------------------- */
#if defined __i386__
        .text
        .align  2

        .global _(__atomic_load_1)
        .type   _(__atomic_load_1), %function
_(__atomic_load_1):
        endbr32
        mov    0x4(%esp),%eax
        movzbl (%eax),%eax
        ret
	.size   _(__atomic_load_1), .-_(__atomic_load_1)

        .global _(__atomic_load_2)
        .type   _(__atomic_load_2), %function
_(__atomic_load_2):
        endbr32
        mov    0x4(%esp),%eax
        movzwl (%eax),%eax
        ret
	.size   _(__atomic_load_2), .-_(__atomic_load_2)

        .global _(__atomic_load_4)
        .type   _(__atomic_load_4), %function
_(__atomic_load_4):
        endbr32
        mov    0x4(%esp),%eax
        mov    (%eax),%eax
        ret
	.size   _(__atomic_load_4), .-_(__atomic_load_4)

        .global _(__atomic_load_8)
        .type   _(__atomic_load_8), %function
_(__atomic_load_8):
        endbr32
        sub    $0xc,%esp
        mov    0x10(%esp),%eax
        fildll (%eax)
        fistpll (%esp)
        mov    (%esp),%eax
        mov    0x4(%esp),%edx
        add    $0xc,%esp
        ret
	.size   _(__atomic_load_8), .-_(__atomic_load_8)

        .global _(__atomic_store_1)
        .type   _(__atomic_store_1), %function
_(__atomic_store_1):
        endbr32
        mov    0x4(%esp),%edx
        mov    0x8(%esp),%eax
        xchg   %al,(%edx)
        ret
	.size   _(__atomic_store_1), .-_(__atomic_store_1)

        .global _(__atomic_store_2)
        .type   _(__atomic_store_2), %function
_(__atomic_store_2):
        endbr32
        mov    0x4(%esp),%edx
        mov    0x8(%esp),%eax
        xchg   %ax,(%edx)
        ret
	.size   _(__atomic_store_2), .-_(__atomic_store_2)

        .global _(__atomic_store_4)
        .type   _(__atomic_store_4), %function
_(__atomic_store_4):
        endbr32
        mov    0x4(%esp),%edx
        mov    0x8(%esp),%eax
        xchg   %eax,(%edx)
        ret
	.size   _(__atomic_store_4), .-_(__atomic_store_4)

        .global _(__atomic_store_8)
        .type   _(__atomic_store_8), %function
_(__atomic_store_8):
        endbr32
        push   %ebx
        sub    $0x8,%esp
        mov    0x18(%esp),%ebx
        mov    0x14(%esp),%ecx
        mov    %ecx,(%esp)
        mov    %ebx,0x4(%esp)
        fildll (%esp)
        mov    0x10(%esp),%eax
        fistpll (%eax)
        lock orl $0x0,(%esp)
        add    $0x8,%esp
        pop    %ebx
        ret
	.size   _(__atomic_store_8), .-_(__atomic_store_8)

        .global _(__atomic_compare_exchange_1)
        .type   _(__atomic_compare_exchange_1), %function
_(__atomic_compare_exchange_1):
        endbr32
        push   %ebx
        mov    0xc(%esp),%ecx
        mov    0x8(%esp),%edx
        movzbl 0x10(%esp),%ebx
        movzbl (%ecx),%eax
        lock cmpxchg %bl,(%edx)
        sete   %dl
        je      .L___atomic_compare_exchange_1_020
        mov    %al,(%ecx)
.L___atomic_compare_exchange_1_020:
        mov    %edx,%eax
        pop    %ebx
        ret
	.size   _(__atomic_compare_exchange_1), .-_(__atomic_compare_exchange_1)

        .global _(__atomic_compare_exchange_2)
        .type   _(__atomic_compare_exchange_2), %function
_(__atomic_compare_exchange_2):
        endbr32
        push   %ebx
        mov    0xc(%esp),%ecx
        mov    0x8(%esp),%edx
        movzwl 0x10(%esp),%ebx
        movzwl (%ecx),%eax
        lock cmpxchg %bx,(%edx)
        sete   %dl
        je      .L___atomic_compare_exchange_2_022
        mov    %ax,(%ecx)
.L___atomic_compare_exchange_2_022:
        mov    %edx,%eax
        pop    %ebx
        ret
	.size   _(__atomic_compare_exchange_2), .-_(__atomic_compare_exchange_2)

        .global _(__atomic_compare_exchange_4)
        .type   _(__atomic_compare_exchange_4), %function
_(__atomic_compare_exchange_4):
        endbr32
        push   %ebx
        mov    0xc(%esp),%ecx
        mov    0x8(%esp),%edx
        mov    0x10(%esp),%ebx
        mov    (%ecx),%eax
        lock cmpxchg %ebx,(%edx)
        sete   %dl
        je      .L___atomic_compare_exchange_4_01e
        mov    %eax,(%ecx)
.L___atomic_compare_exchange_4_01e:
        mov    %edx,%eax
        pop    %ebx
        ret
	.size   _(__atomic_compare_exchange_4), .-_(__atomic_compare_exchange_4)

        .global _(__atomic_compare_exchange_8)
        .type   _(__atomic_compare_exchange_8), %function
_(__atomic_compare_exchange_8):
        endbr32
        push   %edi
        push   %esi
        push   %ebx
        mov    0x14(%esp),%esi
        mov    0x1c(%esp),%ecx
        mov    0x10(%esp),%edi
        mov    (%esi),%eax
        mov    0x4(%esi),%edx
        mov    0x18(%esp),%ebx
        lock cmpxchg8b (%edi)
        sete   %cl
        je      .L___atomic_compare_exchange_8_02a
        mov    %eax,(%esi)
        mov    %edx,0x4(%esi)
.L___atomic_compare_exchange_8_02a:
        pop    %ebx
        mov    %ecx,%eax
        pop    %esi
        pop    %edi
        ret
	.size   _(__atomic_compare_exchange_8), .-_(__atomic_compare_exchange_8)

        .global _(__atomic_exchange_1)
        .type   _(__atomic_exchange_1), %function
_(__atomic_exchange_1):
        endbr32
        mov    0x4(%esp),%edx
        mov    0x8(%esp),%eax
        xchg   %al,(%edx)
        ret
	.size   _(__atomic_exchange_1), .-_(__atomic_exchange_1)

        .global _(__atomic_exchange_2)
        .type   _(__atomic_exchange_2), %function
_(__atomic_exchange_2):
        endbr32
        mov    0x4(%esp),%edx
        mov    0x8(%esp),%eax
        xchg   %ax,(%edx)
        ret
	.size   _(__atomic_exchange_2), .-_(__atomic_exchange_2)

        .global _(__atomic_exchange_4)
        .type   _(__atomic_exchange_4), %function
_(__atomic_exchange_4):
        endbr32
        mov    0x4(%esp),%edx
        mov    0x8(%esp),%eax
        xchg   %eax,(%edx)
        ret
	.size   _(__atomic_exchange_4), .-_(__atomic_exchange_4)

        .global _(__atomic_exchange_8)
        .type   _(__atomic_exchange_8), %function
_(__atomic_exchange_8):
        endbr32
        push   %ebp
        push   %edi
        push   %esi
        push   %ebx
        mov    0x14(%esp),%ebp
        mov    0x18(%esp),%ebx
        mov    0x1c(%esp),%ecx
        mov    0x0(%ebp),%eax
        mov    0x4(%ebp),%edx
.L___atomic_exchange_8_01a:
        mov    %eax,%esi
        mov    %edx,%edi
        lock cmpxchg8b 0x0(%ebp)
        jne     .L___atomic_exchange_8_01a
        pop    %ebx
        mov    %esi,%eax
        mov    %edi,%edx
        pop    %esi
        pop    %edi
        pop    %ebp
        ret
	.size   _(__atomic_exchange_8), .-_(__atomic_exchange_8)

        .global _(__atomic_fetch_add_1)
        .type   _(__atomic_fetch_add_1), %function
_(__atomic_fetch_add_1):
        endbr32
        mov    0x4(%esp),%edx
        movzbl 0x8(%esp),%eax
        lock xadd %al,(%edx)
        ret
	.size   _(__atomic_fetch_add_1), .-_(__atomic_fetch_add_1)

        .global _(__atomic_fetch_add_2)
        .type   _(__atomic_fetch_add_2), %function
_(__atomic_fetch_add_2):
        endbr32
        mov    0x4(%esp),%edx
        movzwl 0x8(%esp),%eax
        lock xadd %ax,(%edx)
        ret
	.size   _(__atomic_fetch_add_2), .-_(__atomic_fetch_add_2)

        .global _(__atomic_fetch_add_4)
        .type   _(__atomic_fetch_add_4), %function
_(__atomic_fetch_add_4):
        endbr32
        mov    0x4(%esp),%edx
        mov    0x8(%esp),%eax
        lock xadd %eax,(%edx)
        ret
	.size   _(__atomic_fetch_add_4), .-_(__atomic_fetch_add_4)

        .global _(__atomic_fetch_add_8)
        .type   _(__atomic_fetch_add_8), %function
_(__atomic_fetch_add_8):
        endbr32
        push   %ebp
        push   %edi
        push   %esi
        push   %ebx
        sub    $0x14,%esp
        mov    0x28(%esp),%ebp
        mov    0x2c(%esp),%esi
        mov    0x30(%esp),%edi
        mov    0x0(%ebp),%eax
        mov    0x4(%ebp),%edx
.L___atomic_fetch_add_8_01d:
        mov    %eax,%ecx
        mov    %edx,%ebx
        mov    %eax,0x8(%esp)
        add    %esi,%ecx
        mov    %edx,0xc(%esp)
        adc    %edi,%ebx
        mov    %ecx,(%esp)
        mov    %ebx,0x4(%esp)
        mov    (%esp),%ebx
        mov    0x4(%esp),%ecx
        lock cmpxchg8b 0x0(%ebp)
        jne     .L___atomic_fetch_add_8_01d
        mov    0x8(%esp),%eax
        mov    0xc(%esp),%edx
        add    $0x14,%esp
        pop    %ebx
        pop    %esi
        pop    %edi
        pop    %ebp
        ret
	.size   _(__atomic_fetch_add_8), .-_(__atomic_fetch_add_8)

        .global _(__atomic_add_fetch_1)
        .type   _(__atomic_add_fetch_1), %function
_(__atomic_add_fetch_1):
        endbr32
        mov    0x8(%esp),%ecx
        mov    0x4(%esp),%edx
        mov    %ecx,%eax
        lock xadd %al,(%edx)
        add    %ecx,%eax
        ret
	.size   _(__atomic_add_fetch_1), .-_(__atomic_add_fetch_1)

        .global _(__atomic_add_fetch_2)
        .type   _(__atomic_add_fetch_2), %function
_(__atomic_add_fetch_2):
        endbr32
        mov    0x8(%esp),%ecx
        mov    0x4(%esp),%edx
        mov    %ecx,%eax
        lock xadd %ax,(%edx)
        add    %ecx,%eax
        ret
	.size   _(__atomic_add_fetch_2), .-_(__atomic_add_fetch_2)

        .global _(__atomic_add_fetch_4)
        .type   _(__atomic_add_fetch_4), %function
_(__atomic_add_fetch_4):
        endbr32
        mov    0x8(%esp),%ecx
        mov    0x4(%esp),%edx
        mov    %ecx,%eax
        lock xadd %eax,(%edx)
        add    %ecx,%eax
        ret
	.size   _(__atomic_add_fetch_4), .-_(__atomic_add_fetch_4)

        .global _(__atomic_add_fetch_8)
        .type   _(__atomic_add_fetch_8), %function
_(__atomic_add_fetch_8):
        endbr32
        push   %ebp
        push   %edi
        push   %esi
        push   %ebx
        sub    $0xc,%esp
        mov    0x20(%esp),%ebp
        mov    0x24(%esp),%esi
        mov    0x28(%esp),%edi
        mov    0x0(%ebp),%eax
        mov    0x4(%ebp),%edx
.L___atomic_add_fetch_8_07d:
        mov    %eax,%ecx
        mov    %edx,%ebx
        add    %esi,%ecx
        adc    %edi,%ebx
        mov    %ecx,(%esp)
        mov    %ebx,0x4(%esp)
        mov    (%esp),%ebx
        mov    0x4(%esp),%ecx
        lock cmpxchg8b 0x0(%ebp)
        jne     .L___atomic_add_fetch_8_07d
        mov    (%esp),%eax
        mov    0x4(%esp),%edx
        add    $0xc,%esp
        pop    %ebx
        pop    %esi
        pop    %edi
        pop    %ebp
        ret
	.size   _(__atomic_add_fetch_8), .-_(__atomic_add_fetch_8)

        .global _(__atomic_fetch_sub_1)
        .type   _(__atomic_fetch_sub_1), %function
_(__atomic_fetch_sub_1):
        endbr32
        movzbl 0x8(%esp),%eax
        mov    0x4(%esp),%edx
        neg    %eax
        lock xadd %al,(%edx)
        ret
	.size   _(__atomic_fetch_sub_1), .-_(__atomic_fetch_sub_1)

        .global _(__atomic_fetch_sub_2)
        .type   _(__atomic_fetch_sub_2), %function
_(__atomic_fetch_sub_2):
        endbr32
        movzwl 0x8(%esp),%eax
        mov    0x4(%esp),%edx
        neg    %eax
        lock xadd %ax,(%edx)
        ret
	.size   _(__atomic_fetch_sub_2), .-_(__atomic_fetch_sub_2)

        .global _(__atomic_fetch_sub_4)
        .type   _(__atomic_fetch_sub_4), %function
_(__atomic_fetch_sub_4):
        endbr32
        mov    0x8(%esp),%eax
        mov    0x4(%esp),%edx
        neg    %eax
        lock xadd %eax,(%edx)
        ret
	.size   _(__atomic_fetch_sub_4), .-_(__atomic_fetch_sub_4)

        .global _(__atomic_fetch_sub_8)
        .type   _(__atomic_fetch_sub_8), %function
_(__atomic_fetch_sub_8):
        endbr32
        push   %ebp
        push   %edi
        push   %esi
        push   %ebx
        sub    $0x14,%esp
        mov    0x28(%esp),%ebp
        mov    0x2c(%esp),%esi
        mov    0x30(%esp),%edi
        mov    0x0(%ebp),%eax
        mov    0x4(%ebp),%edx
.L___atomic_fetch_sub_8_01d:
        mov    %eax,%ecx
        mov    %edx,%ebx
        mov    %eax,0x8(%esp)
        sub    %esi,%ecx
        mov    %edx,0xc(%esp)
        sbb    %edi,%ebx
        mov    %ecx,(%esp)
        mov    %ebx,0x4(%esp)
        mov    (%esp),%ebx
        mov    0x4(%esp),%ecx
        lock cmpxchg8b 0x0(%ebp)
        jne     .L___atomic_fetch_sub_8_01d
        mov    0x8(%esp),%eax
        mov    0xc(%esp),%edx
        add    $0x14,%esp
        pop    %ebx
        pop    %esi
        pop    %edi
        pop    %ebp
        ret
	.size   _(__atomic_fetch_sub_8), .-_(__atomic_fetch_sub_8)

        .global _(__atomic_sub_fetch_1)
        .type   _(__atomic_sub_fetch_1), %function
_(__atomic_sub_fetch_1):
        endbr32
        movzbl 0x8(%esp),%eax
        mov    0x4(%esp),%ecx
        neg    %eax
        mov    %eax,%edx
        lock xadd %dl,(%ecx)
        add    %eax,%edx
        mov    %edx,%eax
        ret
	.size   _(__atomic_sub_fetch_1), .-_(__atomic_sub_fetch_1)

        .global _(__atomic_sub_fetch_2)
        .type   _(__atomic_sub_fetch_2), %function
_(__atomic_sub_fetch_2):
        endbr32
        movzwl 0x8(%esp),%eax
        mov    0x4(%esp),%ecx
        neg    %eax
        mov    %eax,%edx
        lock xadd %dx,(%ecx)
        add    %eax,%edx
        mov    %edx,%eax
        ret
	.size   _(__atomic_sub_fetch_2), .-_(__atomic_sub_fetch_2)

        .global _(__atomic_sub_fetch_4)
        .type   _(__atomic_sub_fetch_4), %function
_(__atomic_sub_fetch_4):
        endbr32
        mov    0x8(%esp),%eax
        mov    0x4(%esp),%ecx
        neg    %eax
        mov    %eax,%edx
        lock xadd %edx,(%ecx)
        add    %eax,%edx
        mov    %edx,%eax
        ret
	.size   _(__atomic_sub_fetch_4), .-_(__atomic_sub_fetch_4)

        .global _(__atomic_sub_fetch_8)
        .type   _(__atomic_sub_fetch_8), %function
_(__atomic_sub_fetch_8):
        endbr32
        push   %ebp
        push   %edi
        push   %esi
        push   %ebx
        sub    $0xc,%esp
        mov    0x20(%esp),%ebp
        mov    0x24(%esp),%esi
        mov    0x28(%esp),%edi
        mov    0x0(%ebp),%eax
        mov    0x4(%ebp),%edx
.L___atomic_sub_fetch_8_07d:
        mov    %eax,%ecx
        mov    %edx,%ebx
        sub    %esi,%ecx
        sbb    %edi,%ebx
        mov    %ecx,(%esp)
        mov    %ebx,0x4(%esp)
        mov    (%esp),%ebx
        mov    0x4(%esp),%ecx
        lock cmpxchg8b 0x0(%ebp)
        jne     .L___atomic_sub_fetch_8_07d
        mov    (%esp),%eax
        mov    0x4(%esp),%edx
        add    $0xc,%esp
        pop    %ebx
        pop    %esi
        pop    %edi
        pop    %ebp
        ret
	.size   _(__atomic_sub_fetch_8), .-_(__atomic_sub_fetch_8)

        .global _(__atomic_fetch_and_1)
        .type   _(__atomic_fetch_and_1), %function
_(__atomic_fetch_and_1):
        endbr32
        push   %edi
        push   %esi
        push   %ebx
        mov    0x10(%esp),%edx
        movzbl 0x14(%esp),%ebx
        movzbl (%edx),%eax
.L___atomic_fetch_and_1_013:
        mov    %eax,%esi
        mov    %eax,%edi
        and    %ebx,%esi
        mov    %esi,%ecx
        lock cmpxchg %cl,(%edx)
        jne     .L___atomic_fetch_and_1_013
        mov    %edi,%eax
        pop    %ebx
        pop    %esi
        pop    %edi
        ret
	.size   _(__atomic_fetch_and_1), .-_(__atomic_fetch_and_1)

        .global _(__atomic_fetch_and_2)
        .type   _(__atomic_fetch_and_2), %function
_(__atomic_fetch_and_2):
        endbr32
        push   %esi
        push   %ebx
        mov    0xc(%esp),%edx
        movzwl 0x10(%esp),%ebx
        movzwl (%edx),%eax
.L___atomic_fetch_and_2_012:
        mov    %eax,%esi
        mov    %eax,%ecx
        and    %ebx,%esi
        lock cmpxchg %si,(%edx)
        jne     .L___atomic_fetch_and_2_012
        mov    %ecx,%eax
        pop    %ebx
        pop    %esi
        ret
	.size   _(__atomic_fetch_and_2), .-_(__atomic_fetch_and_2)

        .global _(__atomic_fetch_and_4)
        .type   _(__atomic_fetch_and_4), %function
_(__atomic_fetch_and_4):
        endbr32
        push   %ebx
        mov    0x8(%esp),%edx
        mov    (%edx),%eax
.L___atomic_fetch_and_4_00b:
        mov    0xc(%esp),%ebx
        mov    %eax,%ecx
        and    %eax,%ebx
        lock cmpxchg %ebx,(%edx)
        jne     .L___atomic_fetch_and_4_00b
        mov    %ecx,%eax
        pop    %ebx
        ret
	.size   _(__atomic_fetch_and_4), .-_(__atomic_fetch_and_4)

        .global _(__atomic_fetch_and_8)
        .type   _(__atomic_fetch_and_8), %function
_(__atomic_fetch_and_8):
        endbr32
        push   %ebp
        push   %edi
        push   %esi
        push   %ebx
        sub    $0x14,%esp
        mov    0x28(%esp),%ebp
        mov    0x2c(%esp),%esi
        mov    0x30(%esp),%edi
        mov    0x0(%ebp),%eax
        mov    0x4(%ebp),%edx
.L___atomic_fetch_and_8_01d:
        mov    %eax,%ecx
        mov    %edx,%ebx
        mov    %eax,0x8(%esp)
        and    %esi,%ecx
        and    %edi,%ebx
        mov    %edx,0xc(%esp)
        mov    %ecx,(%esp)
        mov    %ebx,0x4(%esp)
        mov    (%esp),%ebx
        mov    0x4(%esp),%ecx
        lock cmpxchg8b 0x0(%ebp)
        jne     .L___atomic_fetch_and_8_01d
        mov    0x8(%esp),%eax
        mov    0xc(%esp),%edx
        add    $0x14,%esp
        pop    %ebx
        pop    %esi
        pop    %edi
        pop    %ebp
        ret
	.size   _(__atomic_fetch_and_8), .-_(__atomic_fetch_and_8)

        .global _(__atomic_and_fetch_1)
        .type   _(__atomic_and_fetch_1), %function
_(__atomic_and_fetch_1):
        endbr32
        push   %ebx
        mov    0x8(%esp),%edx
        movzbl 0xc(%esp),%ebx
        movzbl (%edx),%eax
.L___atomic_and_fetch_1_041:
        mov    %eax,%ecx
        and    %ebx,%ecx
        lock cmpxchg %cl,(%edx)
        jne     .L___atomic_and_fetch_1_041
        mov    %ecx,%eax
        pop    %ebx
        ret
	.size   _(__atomic_and_fetch_1), .-_(__atomic_and_fetch_1)

        .global _(__atomic_and_fetch_2)
        .type   _(__atomic_and_fetch_2), %function
_(__atomic_and_fetch_2):
        endbr32
        push   %ebx
        mov    0x8(%esp),%edx
        movzwl 0xc(%esp),%ebx
        movzwl (%edx),%eax
.L___atomic_and_fetch_2_041:
        mov    %eax,%ecx
        and    %ebx,%ecx
        lock cmpxchg %cx,(%edx)
        jne     .L___atomic_and_fetch_2_041
        mov    %ecx,%eax
        pop    %ebx
        ret
	.size   _(__atomic_and_fetch_2), .-_(__atomic_and_fetch_2)

        .global _(__atomic_and_fetch_4)
        .type   _(__atomic_and_fetch_4), %function
_(__atomic_and_fetch_4):
        endbr32
        mov    0x4(%esp),%edx
        mov    (%edx),%eax
.L___atomic_and_fetch_4_02a:
        mov    0x8(%esp),%ecx
        and    %eax,%ecx
        lock cmpxchg %ecx,(%edx)
        jne     .L___atomic_and_fetch_4_02a
        mov    %ecx,%eax
        ret
	.size   _(__atomic_and_fetch_4), .-_(__atomic_and_fetch_4)

        .global _(__atomic_and_fetch_8)
        .type   _(__atomic_and_fetch_8), %function
_(__atomic_and_fetch_8):
        endbr32
        push   %ebp
        push   %edi
        push   %esi
        push   %ebx
        sub    $0xc,%esp
        mov    0x20(%esp),%ebp
        mov    0x24(%esp),%esi
        mov    0x28(%esp),%edi
        mov    0x0(%ebp),%eax
        mov    0x4(%ebp),%edx
.L___atomic_and_fetch_8_07d:
        mov    %eax,%ecx
        mov    %edx,%ebx
        and    %esi,%ecx
        and    %edi,%ebx
        mov    %ecx,(%esp)
        mov    %ebx,0x4(%esp)
        mov    (%esp),%ebx
        mov    0x4(%esp),%ecx
        lock cmpxchg8b 0x0(%ebp)
        jne     .L___atomic_and_fetch_8_07d
        mov    (%esp),%eax
        mov    0x4(%esp),%edx
        add    $0xc,%esp
        pop    %ebx
        pop    %esi
        pop    %edi
        pop    %ebp
        ret
	.size   _(__atomic_and_fetch_8), .-_(__atomic_and_fetch_8)

        .global _(__atomic_fetch_or_1)
        .type   _(__atomic_fetch_or_1), %function
_(__atomic_fetch_or_1):
        endbr32
        push   %edi
        push   %esi
        push   %ebx
        mov    0x10(%esp),%edx
        movzbl 0x14(%esp),%ebx
        movzbl (%edx),%eax
.L___atomic_fetch_or_1_013:
        mov    %eax,%esi
        mov    %eax,%edi
        or     %ebx,%esi
        mov    %esi,%ecx
        lock cmpxchg %cl,(%edx)
        jne     .L___atomic_fetch_or_1_013
        mov    %edi,%eax
        pop    %ebx
        pop    %esi
        pop    %edi
        ret
	.size   _(__atomic_fetch_or_1), .-_(__atomic_fetch_or_1)

        .global _(__atomic_fetch_or_2)
        .type   _(__atomic_fetch_or_2), %function
_(__atomic_fetch_or_2):
        endbr32
        push   %esi
        push   %ebx
        mov    0xc(%esp),%edx
        movzwl 0x10(%esp),%ebx
        movzwl (%edx),%eax
.L___atomic_fetch_or_2_012:
        mov    %eax,%esi
        mov    %eax,%ecx
        or     %ebx,%esi
        lock cmpxchg %si,(%edx)
        jne     .L___atomic_fetch_or_2_012
        mov    %ecx,%eax
        pop    %ebx
        pop    %esi
        ret
	.size   _(__atomic_fetch_or_2), .-_(__atomic_fetch_or_2)

        .global _(__atomic_fetch_or_4)
        .type   _(__atomic_fetch_or_4), %function
_(__atomic_fetch_or_4):
        endbr32
        push   %ebx
        mov    0x8(%esp),%edx
        mov    (%edx),%eax
.L___atomic_fetch_or_4_00b:
        mov    0xc(%esp),%ebx
        mov    %eax,%ecx
        or     %eax,%ebx
        lock cmpxchg %ebx,(%edx)
        jne     .L___atomic_fetch_or_4_00b
        mov    %ecx,%eax
        pop    %ebx
        ret
	.size   _(__atomic_fetch_or_4), .-_(__atomic_fetch_or_4)

        .global _(__atomic_fetch_or_8)
        .type   _(__atomic_fetch_or_8), %function
_(__atomic_fetch_or_8):
        endbr32
        push   %ebp
        push   %edi
        push   %esi
        push   %ebx
        sub    $0x14,%esp
        mov    0x28(%esp),%ebp
        mov    0x2c(%esp),%esi
        mov    0x30(%esp),%edi
        mov    0x0(%ebp),%eax
        mov    0x4(%ebp),%edx
.L___atomic_fetch_or_8_01d:
        mov    %eax,%ecx
        mov    %edx,%ebx
        mov    %eax,0x8(%esp)
        or     %esi,%ecx
        or     %edi,%ebx
        mov    %edx,0xc(%esp)
        mov    %ecx,(%esp)
        mov    %ebx,0x4(%esp)
        mov    (%esp),%ebx
        mov    0x4(%esp),%ecx
        lock cmpxchg8b 0x0(%ebp)
        jne     .L___atomic_fetch_or_8_01d
        mov    0x8(%esp),%eax
        mov    0xc(%esp),%edx
        add    $0x14,%esp
        pop    %ebx
        pop    %esi
        pop    %edi
        pop    %ebp
        ret
	.size   _(__atomic_fetch_or_8), .-_(__atomic_fetch_or_8)

        .global _(__atomic_or_fetch_1)
        .type   _(__atomic_or_fetch_1), %function
_(__atomic_or_fetch_1):
        endbr32
        push   %ebx
        mov    0x8(%esp),%edx
        movzbl 0xc(%esp),%ebx
        movzbl (%edx),%eax
.L___atomic_or_fetch_1_041:
        mov    %eax,%ecx
        or     %ebx,%ecx
        lock cmpxchg %cl,(%edx)
        jne     .L___atomic_or_fetch_1_041
        mov    %ecx,%eax
        pop    %ebx
        ret
	.size   _(__atomic_or_fetch_1), .-_(__atomic_or_fetch_1)

        .global _(__atomic_or_fetch_2)
        .type   _(__atomic_or_fetch_2), %function
_(__atomic_or_fetch_2):
        endbr32
        push   %ebx
        mov    0x8(%esp),%edx
        movzwl 0xc(%esp),%ebx
        movzwl (%edx),%eax
.L___atomic_or_fetch_2_041:
        mov    %eax,%ecx
        or     %ebx,%ecx
        lock cmpxchg %cx,(%edx)
        jne     .L___atomic_or_fetch_2_041
        mov    %ecx,%eax
        pop    %ebx
        ret
	.size   _(__atomic_or_fetch_2), .-_(__atomic_or_fetch_2)

        .global _(__atomic_or_fetch_4)
        .type   _(__atomic_or_fetch_4), %function
_(__atomic_or_fetch_4):
        endbr32
        mov    0x4(%esp),%edx
        mov    (%edx),%eax
.L___atomic_or_fetch_4_02a:
        mov    0x8(%esp),%ecx
        or     %eax,%ecx
        lock cmpxchg %ecx,(%edx)
        jne     .L___atomic_or_fetch_4_02a
        mov    %ecx,%eax
        ret
	.size   _(__atomic_or_fetch_4), .-_(__atomic_or_fetch_4)

        .global _(__atomic_or_fetch_8)
        .type   _(__atomic_or_fetch_8), %function
_(__atomic_or_fetch_8):
        endbr32
        push   %ebp
        push   %edi
        push   %esi
        push   %ebx
        sub    $0xc,%esp
        mov    0x20(%esp),%ebp
        mov    0x24(%esp),%esi
        mov    0x28(%esp),%edi
        mov    0x0(%ebp),%eax
        mov    0x4(%ebp),%edx
.L___atomic_or_fetch_8_07d:
        mov    %eax,%ecx
        mov    %edx,%ebx
        or     %esi,%ecx
        or     %edi,%ebx
        mov    %ecx,(%esp)
        mov    %ebx,0x4(%esp)
        mov    (%esp),%ebx
        mov    0x4(%esp),%ecx
        lock cmpxchg8b 0x0(%ebp)
        jne     .L___atomic_or_fetch_8_07d
        mov    (%esp),%eax
        mov    0x4(%esp),%edx
        add    $0xc,%esp
        pop    %ebx
        pop    %esi
        pop    %edi
        pop    %ebp
        ret
	.size   _(__atomic_or_fetch_8), .-_(__atomic_or_fetch_8)

        .global _(__atomic_fetch_nand_1)
        .type   _(__atomic_fetch_nand_1), %function
_(__atomic_fetch_nand_1):
        endbr32
        push   %esi
        push   %ebx
        mov    0xc(%esp),%edx
        movzbl 0x10(%esp),%esi
        movzbl (%edx),%eax
.L___atomic_fetch_nand_1_012:
        mov    %esi,%ecx
        mov    %eax,%ebx
        and    %eax,%ecx
        not    %ecx
        lock cmpxchg %cl,(%edx)
        jne     .L___atomic_fetch_nand_1_012
        mov    %ebx,%eax
        pop    %ebx
        pop    %esi
        ret
	.size   _(__atomic_fetch_nand_1), .-_(__atomic_fetch_nand_1)

        .global _(__atomic_fetch_nand_2)
        .type   _(__atomic_fetch_nand_2), %function
_(__atomic_fetch_nand_2):
        endbr32
        push   %esi
        push   %ebx
        mov    0xc(%esp),%edx
        movzwl 0x10(%esp),%esi
        movzwl (%edx),%eax
.L___atomic_fetch_nand_2_012:
        mov    %eax,%ecx
        mov    %eax,%ebx
        and    %esi,%ecx
        not    %ecx
        lock cmpxchg %cx,(%edx)
        jne     .L___atomic_fetch_nand_2_012
        mov    %ebx,%eax
        pop    %ebx
        pop    %esi
        ret
	.size   _(__atomic_fetch_nand_2), .-_(__atomic_fetch_nand_2)

        .global _(__atomic_fetch_nand_4)
        .type   _(__atomic_fetch_nand_4), %function
_(__atomic_fetch_nand_4):
        endbr32
        push   %ebx
        mov    0x8(%esp),%edx
        mov    (%edx),%eax
.L___atomic_fetch_nand_4_00b:
        mov    0xc(%esp),%ecx
        mov    %eax,%ebx
        and    %eax,%ecx
        not    %ecx
        lock cmpxchg %ecx,(%edx)
        jne     .L___atomic_fetch_nand_4_00b
        mov    %ebx,%eax
        pop    %ebx
        ret
	.size   _(__atomic_fetch_nand_4), .-_(__atomic_fetch_nand_4)

        .global _(__atomic_fetch_nand_8)
        .type   _(__atomic_fetch_nand_8), %function
_(__atomic_fetch_nand_8):
        endbr32
        push   %ebp
        push   %edi
        push   %esi
        push   %ebx
        sub    $0x14,%esp
        mov    0x28(%esp),%ebp
        mov    0x2c(%esp),%esi
        mov    0x30(%esp),%edi
        mov    0x0(%ebp),%eax
        mov    0x4(%ebp),%edx
.L___atomic_fetch_nand_8_01d:
        mov    %eax,%ecx
        mov    %edx,%ebx
        mov    %eax,(%esp)
        and    %esi,%ecx
        and    %edi,%ebx
        mov    %edx,0x4(%esp)
        not    %ecx
        not    %ebx
        mov    %ebx,0xc(%esp)
        mov    %ecx,%ebx
        mov    %ecx,0x8(%esp)
        mov    0xc(%esp),%ecx
        lock cmpxchg8b 0x0(%ebp)
        jne     .L___atomic_fetch_nand_8_01d
        mov    (%esp),%eax
        mov    0x4(%esp),%edx
        add    $0x14,%esp
        pop    %ebx
        pop    %esi
        pop    %edi
        pop    %ebp
        ret
	.size   _(__atomic_fetch_nand_8), .-_(__atomic_fetch_nand_8)

        .global _(__atomic_nand_fetch_1)
        .type   _(__atomic_nand_fetch_1), %function
_(__atomic_nand_fetch_1):
        endbr32
        push   %ebx
        mov    0x8(%esp),%ecx
        movzbl 0xc(%esp),%ebx
        movzbl (%ecx),%eax
.L___atomic_nand_fetch_1_041:
        mov    %eax,%edx
        and    %ebx,%edx
        not    %edx
        lock cmpxchg %dl,(%ecx)
        jne     .L___atomic_nand_fetch_1_041
        mov    %edx,%eax
        pop    %ebx
        ret
	.size   _(__atomic_nand_fetch_1), .-_(__atomic_nand_fetch_1)

        .global _(__atomic_nand_fetch_2)
        .type   _(__atomic_nand_fetch_2), %function
_(__atomic_nand_fetch_2):
        endbr32
        push   %ebx
        mov    0x8(%esp),%ecx
        movzwl 0xc(%esp),%ebx
        movzwl (%ecx),%eax
.L___atomic_nand_fetch_2_041:
        mov    %eax,%edx
        and    %ebx,%edx
        not    %edx
        lock cmpxchg %dx,(%ecx)
        jne     .L___atomic_nand_fetch_2_041
        mov    %edx,%eax
        pop    %ebx
        ret
	.size   _(__atomic_nand_fetch_2), .-_(__atomic_nand_fetch_2)

        .global _(__atomic_nand_fetch_4)
        .type   _(__atomic_nand_fetch_4), %function
_(__atomic_nand_fetch_4):
        endbr32
        mov    0x4(%esp),%ecx
        mov    (%ecx),%eax
.L___atomic_nand_fetch_4_02a:
        mov    0x8(%esp),%edx
        and    %eax,%edx
        not    %edx
        lock cmpxchg %edx,(%ecx)
        jne     .L___atomic_nand_fetch_4_02a
        mov    %edx,%eax
        ret
	.size   _(__atomic_nand_fetch_4), .-_(__atomic_nand_fetch_4)

        .global _(__atomic_nand_fetch_8)
        .type   _(__atomic_nand_fetch_8), %function
_(__atomic_nand_fetch_8):
        endbr32
        push   %ebp
        push   %edi
        push   %esi
        push   %ebx
        sub    $0xc,%esp
        mov    0x20(%esp),%ebp
        mov    0x24(%esp),%esi
        mov    0x28(%esp),%edi
        mov    0x0(%ebp),%eax
        mov    0x4(%ebp),%edx
.L___atomic_nand_fetch_8_07d:
        mov    %eax,%ecx
        mov    %edx,%ebx
        and    %esi,%ecx
        and    %edi,%ebx
        not    %ecx
        not    %ebx
        mov    %ebx,0x4(%esp)
        mov    %ecx,%ebx
        mov    %ecx,(%esp)
        mov    0x4(%esp),%ecx
        lock cmpxchg8b 0x0(%ebp)
        jne     .L___atomic_nand_fetch_8_07d
        mov    (%esp),%eax
        mov    0x4(%esp),%edx
        add    $0xc,%esp
        pop    %ebx
        pop    %esi
        pop    %edi
        pop    %ebp
        ret
	.size   _(__atomic_nand_fetch_8), .-_(__atomic_nand_fetch_8)

        .global _(__atomic_fetch_xor_1)
        .type   _(__atomic_fetch_xor_1), %function
_(__atomic_fetch_xor_1):
        endbr32
        push   %edi
        push   %esi
        push   %ebx
        mov    0x10(%esp),%edx
        movzbl 0x14(%esp),%ebx
        movzbl (%edx),%eax
.L___atomic_fetch_xor_1_013:
        mov    %eax,%esi
        mov    %eax,%edi
        xor    %ebx,%esi
        mov    %esi,%ecx
        lock cmpxchg %cl,(%edx)
        jne     .L___atomic_fetch_xor_1_013
        mov    %edi,%eax
        pop    %ebx
        pop    %esi
        pop    %edi
        ret
	.size   _(__atomic_fetch_xor_1), .-_(__atomic_fetch_xor_1)

        .global _(__atomic_fetch_xor_2)
        .type   _(__atomic_fetch_xor_2), %function
_(__atomic_fetch_xor_2):
        endbr32
        push   %esi
        push   %ebx
        mov    0xc(%esp),%edx
        movzwl 0x10(%esp),%ebx
        movzwl (%edx),%eax
.L___atomic_fetch_xor_2_012:
        mov    %eax,%esi
        mov    %eax,%ecx
        xor    %ebx,%esi
        lock cmpxchg %si,(%edx)
        jne     .L___atomic_fetch_xor_2_012
        mov    %ecx,%eax
        pop    %ebx
        pop    %esi
        ret
	.size   _(__atomic_fetch_xor_2), .-_(__atomic_fetch_xor_2)

        .global _(__atomic_fetch_xor_4)
        .type   _(__atomic_fetch_xor_4), %function
_(__atomic_fetch_xor_4):
        endbr32
        push   %ebx
        mov    0x8(%esp),%edx
        mov    (%edx),%eax
.L___atomic_fetch_xor_4_00b:
        mov    0xc(%esp),%ebx
        mov    %eax,%ecx
        xor    %eax,%ebx
        lock cmpxchg %ebx,(%edx)
        jne     .L___atomic_fetch_xor_4_00b
        mov    %ecx,%eax
        pop    %ebx
        ret
	.size   _(__atomic_fetch_xor_4), .-_(__atomic_fetch_xor_4)

        .global _(__atomic_fetch_xor_8)
        .type   _(__atomic_fetch_xor_8), %function
_(__atomic_fetch_xor_8):
        endbr32
        push   %ebp
        push   %edi
        push   %esi
        push   %ebx
        sub    $0x14,%esp
        mov    0x28(%esp),%ebp
        mov    0x2c(%esp),%esi
        mov    0x30(%esp),%edi
        mov    0x0(%ebp),%eax
        mov    0x4(%ebp),%edx
.L___atomic_fetch_xor_8_01d:
        mov    %eax,%ecx
        mov    %edx,%ebx
        mov    %eax,0x8(%esp)
        xor    %esi,%ecx
        xor    %edi,%ebx
        mov    %edx,0xc(%esp)
        mov    %ecx,(%esp)
        mov    %ebx,0x4(%esp)
        mov    (%esp),%ebx
        mov    0x4(%esp),%ecx
        lock cmpxchg8b 0x0(%ebp)
        jne     .L___atomic_fetch_xor_8_01d
        mov    0x8(%esp),%eax
        mov    0xc(%esp),%edx
        add    $0x14,%esp
        pop    %ebx
        pop    %esi
        pop    %edi
        pop    %ebp
        ret
	.size   _(__atomic_fetch_xor_8), .-_(__atomic_fetch_xor_8)

        .global _(__atomic_xor_fetch_1)
        .type   _(__atomic_xor_fetch_1), %function
_(__atomic_xor_fetch_1):
        endbr32
        push   %ebx
        mov    0x8(%esp),%edx
        movzbl 0xc(%esp),%ebx
        movzbl (%edx),%eax
.L___atomic_xor_fetch_1_041:
        mov    %eax,%ecx
        xor    %ebx,%ecx
        lock cmpxchg %cl,(%edx)
        jne     .L___atomic_xor_fetch_1_041
        mov    %ecx,%eax
        pop    %ebx
        ret
	.size   _(__atomic_xor_fetch_1), .-_(__atomic_xor_fetch_1)

        .global _(__atomic_xor_fetch_2)
        .type   _(__atomic_xor_fetch_2), %function
_(__atomic_xor_fetch_2):
        endbr32
        push   %ebx
        mov    0x8(%esp),%edx
        movzwl 0xc(%esp),%ebx
        movzwl (%edx),%eax
.L___atomic_xor_fetch_2_041:
        mov    %eax,%ecx
        xor    %ebx,%ecx
        lock cmpxchg %cx,(%edx)
        jne     .L___atomic_xor_fetch_2_041
        mov    %ecx,%eax
        pop    %ebx
        ret
	.size   _(__atomic_xor_fetch_2), .-_(__atomic_xor_fetch_2)

        .global _(__atomic_xor_fetch_4)
        .type   _(__atomic_xor_fetch_4), %function
_(__atomic_xor_fetch_4):
        endbr32
        mov    0x4(%esp),%edx
        mov    (%edx),%eax
.L___atomic_xor_fetch_4_02a:
        mov    0x8(%esp),%ecx
        xor    %eax,%ecx
        lock cmpxchg %ecx,(%edx)
        jne     .L___atomic_xor_fetch_4_02a
        mov    %ecx,%eax
        ret
	.size   _(__atomic_xor_fetch_4), .-_(__atomic_xor_fetch_4)

        .global _(__atomic_xor_fetch_8)
        .type   _(__atomic_xor_fetch_8), %function
_(__atomic_xor_fetch_8):
        endbr32
        push   %ebp
        push   %edi
        push   %esi
        push   %ebx
        sub    $0xc,%esp
        mov    0x20(%esp),%ebp
        mov    0x24(%esp),%esi
        mov    0x28(%esp),%edi
        mov    0x0(%ebp),%eax
        mov    0x4(%ebp),%edx
.L___atomic_xor_fetch_8_07d:
        mov    %eax,%ecx
        mov    %edx,%ebx
        xor    %esi,%ecx
        xor    %edi,%ebx
        mov    %ecx,(%esp)
        mov    %ebx,0x4(%esp)
        mov    (%esp),%ebx
        mov    0x4(%esp),%ecx
        lock cmpxchg8b 0x0(%ebp)
        jne     .L___atomic_xor_fetch_8_07d
        mov    (%esp),%eax
        mov    0x4(%esp),%edx
        add    $0xc,%esp
        pop    %ebx
        pop    %esi
        pop    %edi
        pop    %ebp
        ret
	.size   _(__atomic_xor_fetch_8), .-_(__atomic_xor_fetch_8)

        .global _(__atomic_test_and_set_1)
        .type   _(__atomic_test_and_set_1), %function
_(__atomic_test_and_set_1):
        endbr32
        mov    0x4(%esp),%edx
        mov    $0x1,%eax
        xchg   %al,(%edx)
        ret
	.size   _(__atomic_test_and_set_1), .-_(__atomic_test_and_set_1)

        .global _(__atomic_test_and_set_2)
        .type   _(__atomic_test_and_set_2), %function
_(__atomic_test_and_set_2):
        endbr32
        mov    0x4(%esp),%edx
        mov    $0x1,%eax
        xchg   %al,(%edx)
        ret
	.size   _(__atomic_test_and_set_2), .-_(__atomic_test_and_set_2)

        .global _(__atomic_test_and_set_4)
        .type   _(__atomic_test_and_set_4), %function
_(__atomic_test_and_set_4):
        endbr32
        mov    0x4(%esp),%edx
        mov    $0x1,%eax
        xchg   %al,(%edx)
        ret
	.size   _(__atomic_test_and_set_4), .-_(__atomic_test_and_set_4)

        .global _(__atomic_test_and_set_8)
        .type   _(__atomic_test_and_set_8), %function
_(__atomic_test_and_set_8):
        endbr32
        mov    0x4(%esp),%edx
        mov    $0x1,%eax
        xchg   %al,(%edx)
        ret
	.size   _(__atomic_test_and_set_8), .-_(__atomic_test_and_set_8)

        .global _(atomic_thread_fence)
        .type   _(atomic_thread_fence), %function
_(atomic_thread_fence):
        endbr32
        lock orl $0x0,(%esp)
        ret
	.size   _(atomic_thread_fence), .-_(atomic_thread_fence)

        .global _(atomic_signal_fence)
        .type   _(atomic_signal_fence), %function
_(atomic_signal_fence):
        endbr32
        ret
	.size   _(atomic_signal_fence), .-_(atomic_signal_fence)

        .global _(atomic_flag_test_and_set)
        .type   _(atomic_flag_test_and_set), %function
_(atomic_flag_test_and_set):
        endbr32
        mov    0x4(%esp),%edx
        mov    $0x1,%eax
        xchg   %al,(%edx)
        ret
	.size   _(atomic_flag_test_and_set), .-_(atomic_flag_test_and_set)

        .global _(atomic_flag_test_and_set_explicit)
        .type   _(atomic_flag_test_and_set_explicit), %function
_(atomic_flag_test_and_set_explicit):
        endbr32
        mov    0x4(%esp),%edx
        mov    $0x1,%eax
        xchg   %al,(%edx)
        ret
	.size   _(atomic_flag_test_and_set_explicit), .-_(atomic_flag_test_and_set_explicit)

        .global _(atomic_flag_clear)
        .type   _(atomic_flag_clear), %function
_(atomic_flag_clear):
        endbr32
        mov    0x4(%esp),%edx
        xor    %eax,%eax
        xchg   %al,(%edx)
        ret
	.size   _(atomic_flag_clear), .-_(atomic_flag_clear)

        .global _(atomic_flag_clear_explicit)
        .type   _(atomic_flag_clear_explicit), %function
_(atomic_flag_clear_explicit):
        endbr32
        mov    0x4(%esp),%edx
        xor    %eax,%eax
        xchg   %al,(%edx)
        ret
	.size   _(atomic_flag_clear_explicit), .-_(atomic_flag_clear_explicit)

#endif //__i386__

/* ---------------------------------------------- */
#if defined __x86_64__
        .text
        .align  2

        .global _(__atomic_load_1)
        .type   _(__atomic_load_1), %function
_(__atomic_load_1):
        endbr64
        movzbl (%rdi),%eax
        ret
	.size   _(__atomic_load_1), .-_(__atomic_load_1)

        .global _(__atomic_load_2)
        .type   _(__atomic_load_2), %function
_(__atomic_load_2):
        endbr64
        movzwl (%rdi),%eax
        ret
	.size   _(__atomic_load_2), .-_(__atomic_load_2)

        .global _(__atomic_load_4)
        .type   _(__atomic_load_4), %function
_(__atomic_load_4):
        endbr64
        mov    (%rdi),%eax
        ret
	.size   _(__atomic_load_4), .-_(__atomic_load_4)

        .global _(__atomic_load_8)
        .type   _(__atomic_load_8), %function
_(__atomic_load_8):
        endbr64
        mov    (%rdi),%rax
        ret
	.size   _(__atomic_load_8), .-_(__atomic_load_8)

        .global _(__atomic_store_1)
        .type   _(__atomic_store_1), %function
_(__atomic_store_1):
        endbr64
        xchg   %sil,(%rdi)
        ret
	.size   _(__atomic_store_1), .-_(__atomic_store_1)

        .global _(__atomic_store_2)
        .type   _(__atomic_store_2), %function
_(__atomic_store_2):
        endbr64
        xchg   %si,(%rdi)
        ret
	.size   _(__atomic_store_2), .-_(__atomic_store_2)

        .global _(__atomic_store_4)
        .type   _(__atomic_store_4), %function
_(__atomic_store_4):
        endbr64
        xchg   %esi,(%rdi)
        ret
	.size   _(__atomic_store_4), .-_(__atomic_store_4)

        .global _(__atomic_store_8)
        .type   _(__atomic_store_8), %function
_(__atomic_store_8):
        endbr64
        xchg   %rsi,(%rdi)
        ret
	.size   _(__atomic_store_8), .-_(__atomic_store_8)

        .global _(__atomic_compare_exchange_1)
        .type   _(__atomic_compare_exchange_1), %function
_(__atomic_compare_exchange_1):
        endbr64
        movzbl (%rsi),%eax
        lock cmpxchg %dl,(%rdi)
        sete   %dl
        je      .L___atomic_compare_exchange_1_012
        mov    %al,(%rsi)
.L___atomic_compare_exchange_1_012:
        mov    %edx,%eax
        ret
	.size   _(__atomic_compare_exchange_1), .-_(__atomic_compare_exchange_1)

        .global _(__atomic_compare_exchange_2)
        .type   _(__atomic_compare_exchange_2), %function
_(__atomic_compare_exchange_2):
        endbr64
        movzwl (%rsi),%eax
        lock cmpxchg %dx,(%rdi)
        sete   %dl
        je      .L___atomic_compare_exchange_2_014
        mov    %ax,(%rsi)
.L___atomic_compare_exchange_2_014:
        mov    %edx,%eax
        ret
	.size   _(__atomic_compare_exchange_2), .-_(__atomic_compare_exchange_2)

        .global _(__atomic_compare_exchange_4)
        .type   _(__atomic_compare_exchange_4), %function
_(__atomic_compare_exchange_4):
        endbr64
        mov    (%rsi),%eax
        lock cmpxchg %edx,(%rdi)
        sete   %dl
        je      .L___atomic_compare_exchange_4_011
        mov    %eax,(%rsi)
.L___atomic_compare_exchange_4_011:
        mov    %edx,%eax
        ret
	.size   _(__atomic_compare_exchange_4), .-_(__atomic_compare_exchange_4)

        .global _(__atomic_compare_exchange_8)
        .type   _(__atomic_compare_exchange_8), %function
_(__atomic_compare_exchange_8):
        endbr64
        mov    (%rsi),%rax
        lock cmpxchg %rdx,(%rdi)
        sete   %dl
        je      .L___atomic_compare_exchange_8_014
        mov    %rax,(%rsi)
.L___atomic_compare_exchange_8_014:
        mov    %edx,%eax
        ret
	.size   _(__atomic_compare_exchange_8), .-_(__atomic_compare_exchange_8)

        .global _(__atomic_exchange_1)
        .type   _(__atomic_exchange_1), %function
_(__atomic_exchange_1):
        endbr64
        mov    %esi,%eax
        xchg   %al,(%rdi)
        ret
	.size   _(__atomic_exchange_1), .-_(__atomic_exchange_1)

        .global _(__atomic_exchange_2)
        .type   _(__atomic_exchange_2), %function
_(__atomic_exchange_2):
        endbr64
        mov    %esi,%eax
        xchg   %ax,(%rdi)
        ret
	.size   _(__atomic_exchange_2), .-_(__atomic_exchange_2)

        .global _(__atomic_exchange_4)
        .type   _(__atomic_exchange_4), %function
_(__atomic_exchange_4):
        endbr64
        mov    %esi,%eax
        xchg   %eax,(%rdi)
        ret
	.size   _(__atomic_exchange_4), .-_(__atomic_exchange_4)

        .global _(__atomic_exchange_8)
        .type   _(__atomic_exchange_8), %function
_(__atomic_exchange_8):
        endbr64
        mov    %rsi,%rax
        xchg   %rax,(%rdi)
        ret
	.size   _(__atomic_exchange_8), .-_(__atomic_exchange_8)

        .global _(__atomic_fetch_add_1)
        .type   _(__atomic_fetch_add_1), %function
_(__atomic_fetch_add_1):
        endbr64
        mov    %esi,%eax
        lock xadd %al,(%rdi)
        ret
	.size   _(__atomic_fetch_add_1), .-_(__atomic_fetch_add_1)

        .global _(__atomic_fetch_add_2)
        .type   _(__atomic_fetch_add_2), %function
_(__atomic_fetch_add_2):
        endbr64
        mov    %esi,%eax
        lock xadd %ax,(%rdi)
        ret
	.size   _(__atomic_fetch_add_2), .-_(__atomic_fetch_add_2)

        .global _(__atomic_fetch_add_4)
        .type   _(__atomic_fetch_add_4), %function
_(__atomic_fetch_add_4):
        endbr64
        mov    %esi,%eax
        lock xadd %eax,(%rdi)
        ret
	.size   _(__atomic_fetch_add_4), .-_(__atomic_fetch_add_4)

        .global _(__atomic_fetch_add_8)
        .type   _(__atomic_fetch_add_8), %function
_(__atomic_fetch_add_8):
        endbr64
        mov    %rsi,%rax
        lock xadd %rax,(%rdi)
        ret
	.size   _(__atomic_fetch_add_8), .-_(__atomic_fetch_add_8)

        .global _(__atomic_add_fetch_1)
        .type   _(__atomic_add_fetch_1), %function
_(__atomic_add_fetch_1):
        endbr64
        mov    %esi,%eax
        lock xadd %al,(%rdi)
        add    %esi,%eax
        ret
	.size   _(__atomic_add_fetch_1), .-_(__atomic_add_fetch_1)

        .global _(__atomic_add_fetch_2)
        .type   _(__atomic_add_fetch_2), %function
_(__atomic_add_fetch_2):
        endbr64
        mov    %esi,%eax
        lock xadd %ax,(%rdi)
        add    %esi,%eax
        ret
	.size   _(__atomic_add_fetch_2), .-_(__atomic_add_fetch_2)

        .global _(__atomic_add_fetch_4)
        .type   _(__atomic_add_fetch_4), %function
_(__atomic_add_fetch_4):
        endbr64
        mov    %esi,%eax
        lock xadd %eax,(%rdi)
        add    %esi,%eax
        ret
	.size   _(__atomic_add_fetch_4), .-_(__atomic_add_fetch_4)

        .global _(__atomic_add_fetch_8)
        .type   _(__atomic_add_fetch_8), %function
_(__atomic_add_fetch_8):
        endbr64
        mov    %rsi,%rax
        lock xadd %rax,(%rdi)
        add    %rsi,%rax
        ret
	.size   _(__atomic_add_fetch_8), .-_(__atomic_add_fetch_8)

        .global _(__atomic_fetch_sub_1)
        .type   _(__atomic_fetch_sub_1), %function
_(__atomic_fetch_sub_1):
        endbr64
        mov    %esi,%eax
        neg    %eax
        lock xadd %al,(%rdi)
        ret
	.size   _(__atomic_fetch_sub_1), .-_(__atomic_fetch_sub_1)

        .global _(__atomic_fetch_sub_2)
        .type   _(__atomic_fetch_sub_2), %function
_(__atomic_fetch_sub_2):
        endbr64
        mov    %esi,%eax
        neg    %eax
        lock xadd %ax,(%rdi)
        ret
	.size   _(__atomic_fetch_sub_2), .-_(__atomic_fetch_sub_2)

        .global _(__atomic_fetch_sub_4)
        .type   _(__atomic_fetch_sub_4), %function
_(__atomic_fetch_sub_4):
        endbr64
        mov    %esi,%eax
        neg    %eax
        lock xadd %eax,(%rdi)
        ret
	.size   _(__atomic_fetch_sub_4), .-_(__atomic_fetch_sub_4)

        .global _(__atomic_fetch_sub_8)
        .type   _(__atomic_fetch_sub_8), %function
_(__atomic_fetch_sub_8):
        endbr64
        mov    %rsi,%rax
        neg    %rax
        lock xadd %rax,(%rdi)
        ret
	.size   _(__atomic_fetch_sub_8), .-_(__atomic_fetch_sub_8)

        .global _(__atomic_sub_fetch_1)
        .type   _(__atomic_sub_fetch_1), %function
_(__atomic_sub_fetch_1):
        endbr64
        neg    %esi
        mov    %esi,%eax
        lock xadd %al,(%rdi)
        add    %esi,%eax
        ret
	.size   _(__atomic_sub_fetch_1), .-_(__atomic_sub_fetch_1)

        .global _(__atomic_sub_fetch_2)
        .type   _(__atomic_sub_fetch_2), %function
_(__atomic_sub_fetch_2):
        endbr64
        neg    %esi
        mov    %esi,%eax
        lock xadd %ax,(%rdi)
        add    %esi,%eax
        ret
	.size   _(__atomic_sub_fetch_2), .-_(__atomic_sub_fetch_2)

        .global _(__atomic_sub_fetch_4)
        .type   _(__atomic_sub_fetch_4), %function
_(__atomic_sub_fetch_4):
        endbr64
        neg    %esi
        mov    %esi,%eax
        lock xadd %eax,(%rdi)
        add    %esi,%eax
        ret
	.size   _(__atomic_sub_fetch_4), .-_(__atomic_sub_fetch_4)

        .global _(__atomic_sub_fetch_8)
        .type   _(__atomic_sub_fetch_8), %function
_(__atomic_sub_fetch_8):
        endbr64
        neg    %rsi
        mov    %rsi,%rax
        lock xadd %rax,(%rdi)
        add    %rsi,%rax
        ret
	.size   _(__atomic_sub_fetch_8), .-_(__atomic_sub_fetch_8)

        .global _(__atomic_fetch_and_1)
        .type   _(__atomic_fetch_and_1), %function
_(__atomic_fetch_and_1):
        endbr64
        movzbl (%rdi),%eax
.L___atomic_fetch_and_1_007:
        mov    %eax,%ecx
        mov    %eax,%edx
        and    %esi,%ecx
        lock cmpxchg %cl,(%rdi)
        jne     .L___atomic_fetch_and_1_007
        mov    %edx,%eax
        ret
	.size   _(__atomic_fetch_and_1), .-_(__atomic_fetch_and_1)

        .global _(__atomic_fetch_and_2)
        .type   _(__atomic_fetch_and_2), %function
_(__atomic_fetch_and_2):
        endbr64
        movzwl (%rdi),%eax
.L___atomic_fetch_and_2_007:
        mov    %eax,%ecx
        mov    %eax,%edx
        and    %esi,%ecx
        lock cmpxchg %cx,(%rdi)
        jne     .L___atomic_fetch_and_2_007
        mov    %edx,%eax
        ret
	.size   _(__atomic_fetch_and_2), .-_(__atomic_fetch_and_2)

        .global _(__atomic_fetch_and_4)
        .type   _(__atomic_fetch_and_4), %function
_(__atomic_fetch_and_4):
        endbr64
        mov    (%rdi),%eax
.L___atomic_fetch_and_4_006:
        mov    %eax,%ecx
        mov    %eax,%edx
        and    %esi,%ecx
        lock cmpxchg %ecx,(%rdi)
        jne     .L___atomic_fetch_and_4_006
        mov    %edx,%eax
        ret
	.size   _(__atomic_fetch_and_4), .-_(__atomic_fetch_and_4)

        .global _(__atomic_fetch_and_8)
        .type   _(__atomic_fetch_and_8), %function
_(__atomic_fetch_and_8):
        endbr64
        mov    (%rdi),%rax
.L___atomic_fetch_and_8_007:
        mov    %rax,%rcx
        mov    %rax,%rdx
        and    %rsi,%rcx
        lock cmpxchg %rcx,(%rdi)
        jne     .L___atomic_fetch_and_8_007
        mov    %rdx,%rax
        ret
	.size   _(__atomic_fetch_and_8), .-_(__atomic_fetch_and_8)

        .global _(__atomic_and_fetch_1)
        .type   _(__atomic_and_fetch_1), %function
_(__atomic_and_fetch_1):
        endbr64
        movzbl (%rdi),%eax
.L___atomic_and_fetch_1_027:
        mov    %eax,%edx
        and    %esi,%edx
        lock cmpxchg %dl,(%rdi)
        jne     .L___atomic_and_fetch_1_027
        mov    %edx,%eax
        ret
	.size   _(__atomic_and_fetch_1), .-_(__atomic_and_fetch_1)

        .global _(__atomic_and_fetch_2)
        .type   _(__atomic_and_fetch_2), %function
_(__atomic_and_fetch_2):
        endbr64
        movzwl (%rdi),%eax
.L___atomic_and_fetch_2_027:
        mov    %eax,%edx
        and    %esi,%edx
        lock cmpxchg %dx,(%rdi)
        jne     .L___atomic_and_fetch_2_027
        mov    %edx,%eax
        ret
	.size   _(__atomic_and_fetch_2), .-_(__atomic_and_fetch_2)

        .global _(__atomic_and_fetch_4)
        .type   _(__atomic_and_fetch_4), %function
_(__atomic_and_fetch_4):
        endbr64
        mov    (%rdi),%eax
.L___atomic_and_fetch_4_026:
        mov    %eax,%edx
        and    %esi,%edx
        lock cmpxchg %edx,(%rdi)
        jne     .L___atomic_and_fetch_4_026
        mov    %edx,%eax
        ret
	.size   _(__atomic_and_fetch_4), .-_(__atomic_and_fetch_4)

        .global _(__atomic_and_fetch_8)
        .type   _(__atomic_and_fetch_8), %function
_(__atomic_and_fetch_8):
        endbr64
        mov    (%rdi),%rax
.L___atomic_and_fetch_8_027:
        mov    %rax,%rdx
        and    %rsi,%rdx
        lock cmpxchg %rdx,(%rdi)
        jne     .L___atomic_and_fetch_8_027
        mov    %rdx,%rax
        ret
	.size   _(__atomic_and_fetch_8), .-_(__atomic_and_fetch_8)

        .global _(__atomic_fetch_or_1)
        .type   _(__atomic_fetch_or_1), %function
_(__atomic_fetch_or_1):
        endbr64
        movzbl (%rdi),%eax
.L___atomic_fetch_or_1_007:
        mov    %eax,%ecx
        mov    %eax,%edx
        or     %esi,%ecx
        lock cmpxchg %cl,(%rdi)
        jne     .L___atomic_fetch_or_1_007
        mov    %edx,%eax
        ret
	.size   _(__atomic_fetch_or_1), .-_(__atomic_fetch_or_1)

        .global _(__atomic_fetch_or_2)
        .type   _(__atomic_fetch_or_2), %function
_(__atomic_fetch_or_2):
        endbr64
        movzwl (%rdi),%eax
.L___atomic_fetch_or_2_007:
        mov    %eax,%ecx
        mov    %eax,%edx
        or     %esi,%ecx
        lock cmpxchg %cx,(%rdi)
        jne     .L___atomic_fetch_or_2_007
        mov    %edx,%eax
        ret
	.size   _(__atomic_fetch_or_2), .-_(__atomic_fetch_or_2)

        .global _(__atomic_fetch_or_4)
        .type   _(__atomic_fetch_or_4), %function
_(__atomic_fetch_or_4):
        endbr64
        mov    (%rdi),%eax
.L___atomic_fetch_or_4_006:
        mov    %eax,%ecx
        mov    %eax,%edx
        or     %esi,%ecx
        lock cmpxchg %ecx,(%rdi)
        jne     .L___atomic_fetch_or_4_006
        mov    %edx,%eax
        ret
	.size   _(__atomic_fetch_or_4), .-_(__atomic_fetch_or_4)

        .global _(__atomic_fetch_or_8)
        .type   _(__atomic_fetch_or_8), %function
_(__atomic_fetch_or_8):
        endbr64
        mov    (%rdi),%rax
.L___atomic_fetch_or_8_007:
        mov    %rax,%rcx
        mov    %rax,%rdx
        or     %rsi,%rcx
        lock cmpxchg %rcx,(%rdi)
        jne     .L___atomic_fetch_or_8_007
        mov    %rdx,%rax
        ret
	.size   _(__atomic_fetch_or_8), .-_(__atomic_fetch_or_8)

        .global _(__atomic_or_fetch_1)
        .type   _(__atomic_or_fetch_1), %function
_(__atomic_or_fetch_1):
        endbr64
        movzbl (%rdi),%eax
.L___atomic_or_fetch_1_027:
        mov    %eax,%edx
        or     %esi,%edx
        lock cmpxchg %dl,(%rdi)
        jne     .L___atomic_or_fetch_1_027
        mov    %edx,%eax
        ret
	.size   _(__atomic_or_fetch_1), .-_(__atomic_or_fetch_1)

        .global _(__atomic_or_fetch_2)
        .type   _(__atomic_or_fetch_2), %function
_(__atomic_or_fetch_2):
        endbr64
        movzwl (%rdi),%eax
.L___atomic_or_fetch_2_027:
        mov    %eax,%edx
        or     %esi,%edx
        lock cmpxchg %dx,(%rdi)
        jne     .L___atomic_or_fetch_2_027
        mov    %edx,%eax
        ret
	.size   _(__atomic_or_fetch_2), .-_(__atomic_or_fetch_2)

        .global _(__atomic_or_fetch_4)
        .type   _(__atomic_or_fetch_4), %function
_(__atomic_or_fetch_4):
        endbr64
        mov    (%rdi),%eax
.L___atomic_or_fetch_4_026:
        mov    %eax,%edx
        or     %esi,%edx
        lock cmpxchg %edx,(%rdi)
        jne     .L___atomic_or_fetch_4_026
        mov    %edx,%eax
        ret
	.size   _(__atomic_or_fetch_4), .-_(__atomic_or_fetch_4)

        .global _(__atomic_or_fetch_8)
        .type   _(__atomic_or_fetch_8), %function
_(__atomic_or_fetch_8):
        endbr64
        mov    (%rdi),%rax
.L___atomic_or_fetch_8_027:
        mov    %rax,%rdx
        or     %rsi,%rdx
        lock cmpxchg %rdx,(%rdi)
        jne     .L___atomic_or_fetch_8_027
        mov    %rdx,%rax
        ret
	.size   _(__atomic_or_fetch_8), .-_(__atomic_or_fetch_8)

        .global _(__atomic_fetch_nand_1)
        .type   _(__atomic_fetch_nand_1), %function
_(__atomic_fetch_nand_1):
        endbr64
        movzbl (%rdi),%eax
.L___atomic_fetch_nand_1_007:
        mov    %eax,%edx
        mov    %eax,%ecx
        and    %esi,%edx
        not    %edx
        lock cmpxchg %dl,(%rdi)
        jne     .L___atomic_fetch_nand_1_007
        mov    %ecx,%eax
        ret
	.size   _(__atomic_fetch_nand_1), .-_(__atomic_fetch_nand_1)

        .global _(__atomic_fetch_nand_2)
        .type   _(__atomic_fetch_nand_2), %function
_(__atomic_fetch_nand_2):
        endbr64
        movzwl (%rdi),%eax
.L___atomic_fetch_nand_2_007:
        mov    %eax,%edx
        mov    %eax,%ecx
        and    %esi,%edx
        not    %edx
        lock cmpxchg %dx,(%rdi)
        jne     .L___atomic_fetch_nand_2_007
        mov    %ecx,%eax
        ret
	.size   _(__atomic_fetch_nand_2), .-_(__atomic_fetch_nand_2)

        .global _(__atomic_fetch_nand_4)
        .type   _(__atomic_fetch_nand_4), %function
_(__atomic_fetch_nand_4):
        endbr64
        mov    (%rdi),%eax
.L___atomic_fetch_nand_4_006:
        mov    %eax,%edx
        mov    %eax,%ecx
        and    %esi,%edx
        not    %edx
        lock cmpxchg %edx,(%rdi)
        jne     .L___atomic_fetch_nand_4_006
        mov    %ecx,%eax
        ret
	.size   _(__atomic_fetch_nand_4), .-_(__atomic_fetch_nand_4)

        .global _(__atomic_fetch_nand_8)
        .type   _(__atomic_fetch_nand_8), %function
_(__atomic_fetch_nand_8):
        endbr64
        mov    (%rdi),%rax
.L___atomic_fetch_nand_8_007:
        mov    %rax,%rdx
        mov    %rax,%rcx
        and    %rsi,%rdx
        not    %rdx
        lock cmpxchg %rdx,(%rdi)
        jne     .L___atomic_fetch_nand_8_007
        mov    %rcx,%rax
        ret
	.size   _(__atomic_fetch_nand_8), .-_(__atomic_fetch_nand_8)

        .global _(__atomic_nand_fetch_1)
        .type   _(__atomic_nand_fetch_1), %function
_(__atomic_nand_fetch_1):
        endbr64
        movzbl (%rdi),%eax
.L___atomic_nand_fetch_1_027:
        mov    %eax,%edx
        and    %esi,%edx
        not    %edx
        lock cmpxchg %dl,(%rdi)
        jne     .L___atomic_nand_fetch_1_027
        mov    %edx,%eax
        ret
	.size   _(__atomic_nand_fetch_1), .-_(__atomic_nand_fetch_1)

        .global _(__atomic_nand_fetch_2)
        .type   _(__atomic_nand_fetch_2), %function
_(__atomic_nand_fetch_2):
        endbr64
        movzwl (%rdi),%eax
.L___atomic_nand_fetch_2_027:
        mov    %eax,%edx
        and    %esi,%edx
        not    %edx
        lock cmpxchg %dx,(%rdi)
        jne     .L___atomic_nand_fetch_2_027
        mov    %edx,%eax
        ret
	.size   _(__atomic_nand_fetch_2), .-_(__atomic_nand_fetch_2)

        .global _(__atomic_nand_fetch_4)
        .type   _(__atomic_nand_fetch_4), %function
_(__atomic_nand_fetch_4):
        endbr64
        mov    (%rdi),%eax
.L___atomic_nand_fetch_4_026:
        mov    %eax,%edx
        and    %esi,%edx
        not    %edx
        lock cmpxchg %edx,(%rdi)
        jne     .L___atomic_nand_fetch_4_026
        mov    %edx,%eax
        ret
	.size   _(__atomic_nand_fetch_4), .-_(__atomic_nand_fetch_4)

        .global _(__atomic_nand_fetch_8)
        .type   _(__atomic_nand_fetch_8), %function
_(__atomic_nand_fetch_8):
        endbr64
        mov    (%rdi),%rax
.L___atomic_nand_fetch_8_027:
        mov    %rax,%rdx
        and    %rsi,%rdx
        not    %rdx
        lock cmpxchg %rdx,(%rdi)
        jne     .L___atomic_nand_fetch_8_027
        mov    %rdx,%rax
        ret
	.size   _(__atomic_nand_fetch_8), .-_(__atomic_nand_fetch_8)

        .global _(__atomic_fetch_xor_1)
        .type   _(__atomic_fetch_xor_1), %function
_(__atomic_fetch_xor_1):
        endbr64
        movzbl (%rdi),%eax
.L___atomic_fetch_xor_1_007:
        mov    %eax,%ecx
        mov    %eax,%edx
        xor    %esi,%ecx
        lock cmpxchg %cl,(%rdi)
        jne     .L___atomic_fetch_xor_1_007
        mov    %edx,%eax
        ret
	.size   _(__atomic_fetch_xor_1), .-_(__atomic_fetch_xor_1)

        .global _(__atomic_fetch_xor_2)
        .type   _(__atomic_fetch_xor_2), %function
_(__atomic_fetch_xor_2):
        endbr64
        movzwl (%rdi),%eax
.L___atomic_fetch_xor_2_007:
        mov    %eax,%ecx
        mov    %eax,%edx
        xor    %esi,%ecx
        lock cmpxchg %cx,(%rdi)
        jne     .L___atomic_fetch_xor_2_007
        mov    %edx,%eax
        ret
	.size   _(__atomic_fetch_xor_2), .-_(__atomic_fetch_xor_2)

        .global _(__atomic_fetch_xor_4)
        .type   _(__atomic_fetch_xor_4), %function
_(__atomic_fetch_xor_4):
        endbr64
        mov    (%rdi),%eax
.L___atomic_fetch_xor_4_006:
        mov    %eax,%ecx
        mov    %eax,%edx
        xor    %esi,%ecx
        lock cmpxchg %ecx,(%rdi)
        jne     .L___atomic_fetch_xor_4_006
        mov    %edx,%eax
        ret
	.size   _(__atomic_fetch_xor_4), .-_(__atomic_fetch_xor_4)

        .global _(__atomic_fetch_xor_8)
        .type   _(__atomic_fetch_xor_8), %function
_(__atomic_fetch_xor_8):
        endbr64
        mov    (%rdi),%rax
.L___atomic_fetch_xor_8_007:
        mov    %rax,%rcx
        mov    %rax,%rdx
        xor    %rsi,%rcx
        lock cmpxchg %rcx,(%rdi)
        jne     .L___atomic_fetch_xor_8_007
        mov    %rdx,%rax
        ret
	.size   _(__atomic_fetch_xor_8), .-_(__atomic_fetch_xor_8)

        .global _(__atomic_xor_fetch_1)
        .type   _(__atomic_xor_fetch_1), %function
_(__atomic_xor_fetch_1):
        endbr64
        movzbl (%rdi),%eax
.L___atomic_xor_fetch_1_027:
        mov    %eax,%edx
        xor    %esi,%edx
        lock cmpxchg %dl,(%rdi)
        jne     .L___atomic_xor_fetch_1_027
        mov    %edx,%eax
        ret
	.size   _(__atomic_xor_fetch_1), .-_(__atomic_xor_fetch_1)

        .global _(__atomic_xor_fetch_2)
        .type   _(__atomic_xor_fetch_2), %function
_(__atomic_xor_fetch_2):
        endbr64
        movzwl (%rdi),%eax
.L___atomic_xor_fetch_2_027:
        mov    %eax,%edx
        xor    %esi,%edx
        lock cmpxchg %dx,(%rdi)
        jne     .L___atomic_xor_fetch_2_027
        mov    %edx,%eax
        ret
	.size   _(__atomic_xor_fetch_2), .-_(__atomic_xor_fetch_2)

        .global _(__atomic_xor_fetch_4)
        .type   _(__atomic_xor_fetch_4), %function
_(__atomic_xor_fetch_4):
        endbr64
        mov    (%rdi),%eax
.L___atomic_xor_fetch_4_026:
        mov    %eax,%edx
        xor    %esi,%edx
        lock cmpxchg %edx,(%rdi)
        jne     .L___atomic_xor_fetch_4_026
        mov    %edx,%eax
        ret
	.size   _(__atomic_xor_fetch_4), .-_(__atomic_xor_fetch_4)

        .global _(__atomic_xor_fetch_8)
        .type   _(__atomic_xor_fetch_8), %function
_(__atomic_xor_fetch_8):
        endbr64
        mov    (%rdi),%rax
.L___atomic_xor_fetch_8_027:
        mov    %rax,%rdx
        xor    %rsi,%rdx
        lock cmpxchg %rdx,(%rdi)
        jne     .L___atomic_xor_fetch_8_027
        mov    %rdx,%rax
        ret
	.size   _(__atomic_xor_fetch_8), .-_(__atomic_xor_fetch_8)

        .global _(__atomic_test_and_set_1)
        .type   _(__atomic_test_and_set_1), %function
_(__atomic_test_and_set_1):
        endbr64
        mov    $0x1,%eax
        xchg   %al,(%rdi)
        ret
	.size   _(__atomic_test_and_set_1), .-_(__atomic_test_and_set_1)

        .global _(__atomic_test_and_set_2)
        .type   _(__atomic_test_and_set_2), %function
_(__atomic_test_and_set_2):
        endbr64
        mov    $0x1,%eax
        xchg   %al,(%rdi)
        ret
	.size   _(__atomic_test_and_set_2), .-_(__atomic_test_and_set_2)

        .global _(__atomic_test_and_set_4)
        .type   _(__atomic_test_and_set_4), %function
_(__atomic_test_and_set_4):
        endbr64
        mov    $0x1,%eax
        xchg   %al,(%rdi)
        ret
	.size   _(__atomic_test_and_set_4), .-_(__atomic_test_and_set_4)

        .global _(__atomic_test_and_set_8)
        .type   _(__atomic_test_and_set_8), %function
_(__atomic_test_and_set_8):
        endbr64
        mov    $0x1,%eax
        xchg   %al,(%rdi)
        ret
	.size   _(__atomic_test_and_set_8), .-_(__atomic_test_and_set_8)

        .global _(atomic_thread_fence)
        .type   _(atomic_thread_fence), %function
_(atomic_thread_fence):
        endbr64
        lock orq $0x0,(%rsp)
        ret
	.size   _(atomic_thread_fence), .-_(atomic_thread_fence)

        .global _(atomic_signal_fence)
        .type   _(atomic_signal_fence), %function
_(atomic_signal_fence):
        endbr64
        ret
	.size   _(atomic_signal_fence), .-_(atomic_signal_fence)

        .global _(atomic_flag_test_and_set)
        .type   _(atomic_flag_test_and_set), %function
_(atomic_flag_test_and_set):
        endbr64
        mov    $0x1,%eax
        xchg   %al,(%rdi)
        ret
	.size   _(atomic_flag_test_and_set), .-_(atomic_flag_test_and_set)

        .global _(atomic_flag_test_and_set_explicit)
        .type   _(atomic_flag_test_and_set_explicit), %function
_(atomic_flag_test_and_set_explicit):
        endbr64
        mov    $0x1,%eax
        xchg   %al,(%rdi)
        ret
	.size   _(atomic_flag_test_and_set_explicit), .-_(atomic_flag_test_and_set_explicit)

        .global _(atomic_flag_clear)
        .type   _(atomic_flag_clear), %function
_(atomic_flag_clear):
        endbr64
        xor    %eax,%eax
        xchg   %al,(%rdi)
        ret
	.size   _(atomic_flag_clear), .-_(atomic_flag_clear)

        .global _(atomic_flag_clear_explicit)
        .type   _(atomic_flag_clear_explicit), %function
_(atomic_flag_clear_explicit):
        endbr64
        xor    %eax,%eax
        xchg   %al,(%rdi)
        ret
	.size   _(atomic_flag_clear_explicit), .-_(atomic_flag_clear_explicit)

#endif //__x86_64__

/* ---------------------------------------------- */
#if defined __arm__
        .text
        .align  2
        .thumb
        .syntax unified

        .global _(__atomic_load_1)
        .type   _(__atomic_load_1), %function
_(__atomic_load_1):
#ifdef __TINYC__
        .short 0xb911
        .short 0x7800
        .short 0xb2c0
        .short 0x4770
        .short 0xf3bf
        .short 0x7800
        .short 0xf3bf
        .short 0xb2c0
        .short 0x4770
#else
        cbnz    r1,  .L___atomic_load_1_008
        ldrb    r0, [r0, #0]
        uxtb    r0, r0
        bx  lr
.L___atomic_load_1_008:
        dmb ish
        ldrb    r0, [r0, #0]
        dmb ish
        uxtb    r0, r0
        bx  lr
	.size   _(__atomic_load_1), .-_(__atomic_load_1)

#endif
        .global _(__atomic_load_2)
        .type   _(__atomic_load_2), %function
_(__atomic_load_2):
#ifdef __TINYC__
        .short 0xb911
        .short 0x8800
        .short 0xb280
        .short 0x4770
        .short 0xf3bf
        .short 0x8800
        .short 0xf3bf
        .short 0xb280
        .short 0x4770
#else
        cbnz    r1,  .L___atomic_load_2_008
        ldrh    r0, [r0, #0]
        uxth    r0, r0
        bx  lr
.L___atomic_load_2_008:
        dmb ish
        ldrh    r0, [r0, #0]
        dmb ish
        uxth    r0, r0
        bx  lr
	.size   _(__atomic_load_2), .-_(__atomic_load_2)

#endif
        .global _(__atomic_load_4)
        .type   _(__atomic_load_4), %function
_(__atomic_load_4):
#ifdef __TINYC__
        .short 0xb909
        .short 0x6800
        .short 0x4770
        .short 0xf3bf
        .short 0x6800
        .short 0xf3bf
        .short 0x4770
#else
        cbnz    r1,  .L___atomic_load_4_006
        ldr r0, [r0, #0]
        bx  lr
.L___atomic_load_4_006:
        dmb ish
        ldr r0, [r0, #0]
        dmb ish
        bx  lr
	.size   _(__atomic_load_4), .-_(__atomic_load_4)

#endif
        .global _(__atomic_load_8)
        .type   _(__atomic_load_8), %function
_(__atomic_load_8):
#ifdef __TINYC__
        .short 0xb911
        .short 0xe8d0
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d0
        .short 0xf3bf
        .short 0x4770
#else
        cbnz    r1,  .L___atomic_load_8_008
        ldrexd  r0, r1, [r0]
        bx  lr
.L___atomic_load_8_008:
        dmb ish
        ldrexd  r0, r1, [r0]
        dmb ish
        bx  lr
	.size   _(__atomic_load_8), .-_(__atomic_load_8)

#endif
        .global _(__atomic_store_1)
        .type   _(__atomic_store_1), %function
_(__atomic_store_1):
#ifdef __TINYC__
        .short 0xb90a
        .short 0x7001
        .short 0x4770
        .short 0xf3bf
        .short 0x7001
        .short 0xf3bf
        .short 0x4770
#else
        cbnz    r2,  .L___atomic_store_1_006
        strb    r1, [r0, #0]
        bx  lr
.L___atomic_store_1_006:
        dmb ish
        strb    r1, [r0, #0]
        dmb ish
        bx  lr
	.size   _(__atomic_store_1), .-_(__atomic_store_1)

#endif
        .global _(__atomic_store_2)
        .type   _(__atomic_store_2), %function
_(__atomic_store_2):
#ifdef __TINYC__
        .short 0xb90a
        .short 0x8001
        .short 0x4770
        .short 0xf3bf
        .short 0x8001
        .short 0xf3bf
        .short 0x4770
#else
        cbnz    r2,  .L___atomic_store_2_006
        strh    r1, [r0, #0]
        bx  lr
.L___atomic_store_2_006:
        dmb ish
        strh    r1, [r0, #0]
        dmb ish
        bx  lr
	.size   _(__atomic_store_2), .-_(__atomic_store_2)

#endif
        .global _(__atomic_store_4)
        .type   _(__atomic_store_4), %function
_(__atomic_store_4):
#ifdef __TINYC__
        .short 0xb90a
        .short 0x6001
        .short 0x4770
        .short 0xf3bf
        .short 0x6001
        .short 0xf3bf
        .short 0x4770
#else
        cbnz    r2,  .L___atomic_store_4_006
        str r1, [r0, #0]
        bx  lr
.L___atomic_store_4_006:
        dmb ish
        str r1, [r0, #0]
        dmb ish
        bx  lr
	.size   _(__atomic_store_4), .-_(__atomic_store_4)

#endif
        .global _(__atomic_store_8)
        .type   _(__atomic_store_8), %function
_(__atomic_store_8):
#ifdef __TINYC__
        .short 0xb430
        .short 0x4614
        .short 0x9902
        .short 0x461d
        .short 0xb939
        .short 0xe8d0
        .short 0xe8c0
        .short 0x2900
        .short 0xd1f9
        .short 0xbc30
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d0
        .short 0xe8c0
        .short 0x2900
        .short 0xd1f9
        .short 0xf3bf
        .short 0xbc30
        .short 0x4770
#else
        push    {r4, r5}
        mov r4, r2
        ldr r1, [sp, #8]
        mov r5, r3
        cbnz    r1,  .L___atomic_store_8_01a
.L___atomic_store_8_00a:
        ldrexd  r2, r3, [r0]
        strexd  r1, r4, r5, [r0]
        cmp r1, #0
        bne.n    .L___atomic_store_8_00a
        pop {r4, r5}
        bx  lr
.L___atomic_store_8_01a:
        dmb ish
.L___atomic_store_8_01e:
        ldrexd  r2, r3, [r0]
        strexd  r1, r4, r5, [r0]
        cmp r1, #0
        bne.n    .L___atomic_store_8_01e
        dmb ish
        pop {r4, r5}
        bx  lr
	.size   _(__atomic_store_8), .-_(__atomic_store_8)

#endif
        .global _(__atomic_compare_exchange_1)
        .type   _(__atomic_compare_exchange_1), %function
_(__atomic_compare_exchange_1):
#ifdef __TINYC__
        .short 0xb500
        .short 0xb983
        .short 0x780b
        .short 0xe8d0
        .short 0x459c
        .short 0xd104
        .short 0xe8c0
        .short 0xf1be
        .short 0xd1f6
        .short 0xbf0e
        .short 0x2001
        .short 0x2000
        .short 0xf881
        .short 0xf85d
        .short 0x780b
        .short 0xf3bf
        .short 0xe8d0
        .short 0x459c
        .short 0xd1f1
        .short 0xe8c0
        .short 0xf1be
        .short 0xd1f6
        .short 0xf3bf
        .short 0xe7e9
#else
        push    {lr}
        cbnz    r3,  .L___atomic_compare_exchange_1_026
        ldrb    r3, [r1, #0]
.L___atomic_compare_exchange_1_006:
        ldrexb  ip, [r0]
        cmp ip, r3
        bne.n    .L___atomic_compare_exchange_1_018
        strexb  lr, r2, [r0]
        cmp.w   lr, #0
        bne.n    .L___atomic_compare_exchange_1_006
.L___atomic_compare_exchange_1_018:
        itee    eq
        moveq   r0, #1
        movne   r0, #0
        strbne.w    ip, [r1]
        ldr.w   pc, [sp], #4
.L___atomic_compare_exchange_1_026:
        ldrb    r3, [r1, #0]
        dmb ish
.L___atomic_compare_exchange_1_02c:
        ldrexb  ip, [r0]
        cmp ip, r3
        bne.n    .L___atomic_compare_exchange_1_018
        strexb  lr, r2, [r0]
        cmp.w   lr, #0
        bne.n    .L___atomic_compare_exchange_1_02c
        dmb ish
        b.n  .L___atomic_compare_exchange_1_018
	.size   _(__atomic_compare_exchange_1), .-_(__atomic_compare_exchange_1)

#endif
        .global _(__atomic_compare_exchange_2)
        .type   _(__atomic_compare_exchange_2), %function
_(__atomic_compare_exchange_2):
#ifdef __TINYC__
        .short 0xb500
        .short 0xb983
        .short 0x880b
        .short 0xe8d0
        .short 0x459c
        .short 0xd104
        .short 0xe8c0
        .short 0xf1be
        .short 0xd1f6
        .short 0xbf0e
        .short 0x2001
        .short 0x2000
        .short 0xf8a1
        .short 0xf85d
        .short 0x880b
        .short 0xf3bf
        .short 0xe8d0
        .short 0x459c
        .short 0xd1f1
        .short 0xe8c0
        .short 0xf1be
        .short 0xd1f6
        .short 0xf3bf
        .short 0xe7e9
#else
        push    {lr}
        cbnz    r3,  .L___atomic_compare_exchange_2_026
        ldrh    r3, [r1, #0]
.L___atomic_compare_exchange_2_006:
        ldrexh  ip, [r0]
        cmp ip, r3
        bne.n    .L___atomic_compare_exchange_2_018
        strexh  lr, r2, [r0]
        cmp.w   lr, #0
        bne.n    .L___atomic_compare_exchange_2_006
.L___atomic_compare_exchange_2_018:
        itee    eq
        moveq   r0, #1
        movne   r0, #0
        strhne.w    ip, [r1]
        ldr.w   pc, [sp], #4
.L___atomic_compare_exchange_2_026:
        ldrh    r3, [r1, #0]
        dmb ish
.L___atomic_compare_exchange_2_02c:
        ldrexh  ip, [r0]
        cmp ip, r3
        bne.n    .L___atomic_compare_exchange_2_018
        strexh  lr, r2, [r0]
        cmp.w   lr, #0
        bne.n    .L___atomic_compare_exchange_2_02c
        dmb ish
        b.n  .L___atomic_compare_exchange_2_018
	.size   _(__atomic_compare_exchange_2), .-_(__atomic_compare_exchange_2)

#endif
        .global _(__atomic_compare_exchange_4)
        .type   _(__atomic_compare_exchange_4), %function
_(__atomic_compare_exchange_4):
#ifdef __TINYC__
        .short 0xb410
        .short 0xb983
        .short 0x680b
        .short 0xe850
        .short 0x429c
        .short 0xd104
        .short 0xe840
        .short 0xf1bc
        .short 0xd1f6
        .short 0xbf0e
        .short 0x2001
        .short 0x2000
        .short 0x600c
        .short 0xf85d
        .short 0x4770
        .short 0x680b
        .short 0xf3bf
        .short 0xe850
        .short 0x429c
        .short 0xd1f1
        .short 0xe840
        .short 0xf1bc
        .short 0xd1f6
        .short 0xf3bf
        .short 0xe7e9
#else
        push    {r4}
        cbnz    r3,  .L___atomic_compare_exchange_4_026
        ldr r3, [r1, #0]
.L___atomic_compare_exchange_4_006:
        ldrex   r4, [r0]
        cmp r4, r3
        bne.n    .L___atomic_compare_exchange_4_018
        strex   ip, r2, [r0]
        cmp.w   ip, #0
        bne.n    .L___atomic_compare_exchange_4_006
.L___atomic_compare_exchange_4_018:
        itee    eq
        moveq   r0, #1
        movne   r0, #0
        strne   r4, [r1, #0]
        ldr.w   r4, [sp], #4
        bx  lr
.L___atomic_compare_exchange_4_026:
        ldr r3, [r1, #0]
        dmb ish
.L___atomic_compare_exchange_4_02c:
        ldrex   r4, [r0]
        cmp r4, r3
        bne.n    .L___atomic_compare_exchange_4_018
        strex   ip, r2, [r0]
        cmp.w   ip, #0
        bne.n    .L___atomic_compare_exchange_4_02c
        dmb ish
        b.n  .L___atomic_compare_exchange_4_018
	.size   _(__atomic_compare_exchange_4), .-_(__atomic_compare_exchange_4)

#endif
        .global _(__atomic_compare_exchange_8)
        .type   _(__atomic_compare_exchange_8), %function
_(__atomic_compare_exchange_8):
#ifdef __TINYC__
        .short 0xb4f0
        .short 0x461d
        .short 0x9b04
        .short 0x4614
        .short 0xb99b
        .short 0xe9d1
        .short 0xe8d0
        .short 0x429f
        .short 0xbf08
        .short 0x4296
        .short 0xd104
        .short 0xe8c0
        .short 0xf1bc
        .short 0xd1f4
        .short 0xbf0e
        .short 0x2001
        .short 0x2000
        .short 0xe9c1
        .short 0xbcf0
        .short 0x4770
        .short 0xe9d1
        .short 0xf3bf
        .short 0xe8d0
        .short 0x429f
        .short 0xbf08
        .short 0x4296
        .short 0xd1ee
        .short 0xe8c0
        .short 0xf1bc
        .short 0xd1f4
        .short 0xf3bf
        .short 0xe7e6
#else
        push    {r4, r5, r6, r7}
        mov r5, r3
        ldr r3, [sp, #16]
        mov r4, r2
        cbnz    r3,  .L___atomic_compare_exchange_8_032
        ldrd    r2, r3, [r1]
.L___atomic_compare_exchange_8_00e:
        ldrexd  r6, r7, [r0]
        cmp r7, r3
        it  eq
        cmpeq   r6, r2
        bne.n    .L___atomic_compare_exchange_8_024
        strexd  ip, r4, r5, [r0]
        cmp.w   ip, #0
        bne.n    .L___atomic_compare_exchange_8_00e
.L___atomic_compare_exchange_8_024:
        itee    eq
        moveq   r0, #1
        movne   r0, #0
        strdne  r6, r7, [r1]
        pop {r4, r5, r6, r7}
        bx  lr
.L___atomic_compare_exchange_8_032:
        ldrd    r2, r3, [r1]
        dmb ish
.L___atomic_compare_exchange_8_03a:
        ldrexd  r6, r7, [r0]
        cmp r7, r3
        it  eq
        cmpeq   r6, r2
        bne.n    .L___atomic_compare_exchange_8_024
        strexd  ip, r4, r5, [r0]
        cmp.w   ip, #0
        bne.n    .L___atomic_compare_exchange_8_03a
        dmb ish
        b.n  .L___atomic_compare_exchange_8_024
	.size   _(__atomic_compare_exchange_8), .-_(__atomic_compare_exchange_8)

#endif
        .global _(__atomic_exchange_1)
        .type   _(__atomic_exchange_1), %function
_(__atomic_exchange_1):
#ifdef __TINYC__
        .short 0xf000
        .short 0xb500
        .short 0x23ff
        .short 0x00d2
        .short 0xf3bf
        .short 0xf020
        .short 0x4093
        .short 0x4091
        .short 0xfa83
        .short 0xe850
        .short 0xfaa1
        .short 0xe840
        .short 0xf1be
        .short 0xd1f6
        .short 0xfa2c
        .short 0xf3bf
        .short 0xb2c0
        .short 0xf85d
#else
        and.w   r2, r0, #3
        push    {lr}
        movs    r3, #255    @ 0xff
        lsls    r2, r2, #3
        dmb ish
        bic.w   r0, r0, #3
        lsls    r3, r2
        lsls    r1, r2
        uadd8   r3, r3, r3
.L___atomic_exchange_1_01a:
        ldrex   ip, [r0]
        sel r3, r1, ip
        strex   lr, r3, [r0]
        cmp.w   lr, #0
        bne.n    .L___atomic_exchange_1_01a
        lsr.w   r0, ip, r2
        dmb ish
        uxtb    r0, r0
        ldr.w   pc, [sp], #4
	.size   _(__atomic_exchange_1), .-_(__atomic_exchange_1)

#endif
        .global _(__atomic_exchange_2)
        .type   _(__atomic_exchange_2), %function
_(__atomic_exchange_2):
#ifdef __TINYC__
        .short 0xf64f
        .short 0xf3bf
        .short 0xea5f
        .short 0xf020
        .short 0xbf24
        .short 0x041b
        .short 0x0409
        .short 0xfa93
        .short 0xe850
        .short 0xbf34
        .short 0xfa1f
        .short 0xfa1f
        .short 0xfaa1
        .short 0xe840
        .short 0xea1c
        .short 0xd1f1
        .short 0xf3bf
        .short 0xb290
        .short 0x4770
#else
        movw    r3, #65535  @ 0xffff
        dmb ish
        movs.w  ip, r0, lsr #2
        bic.w   r0, r0, #3
        itt cs
        lslcs   r3, r3, #16
        lslcs   r1, r1, #16
        uadd16  r3, r3, r3
.L___atomic_exchange_2_01a:
        ldrex   ip, [r0]
        ite cc
        uxthcc.w    r2, ip
        uxthcs.w    r2, ip, ror #16
        sel r3, r1, ip
        strex   ip, r3, [r0]
        tst.w   ip, ip
        bne.n    .L___atomic_exchange_2_01a
        dmb ish
        uxth    r0, r2
        bx  lr
	.size   _(__atomic_exchange_2), .-_(__atomic_exchange_2)

#endif
        .global _(__atomic_exchange_4)
        .type   _(__atomic_exchange_4), %function
_(__atomic_exchange_4):
#ifdef __TINYC__
        .short 0x4603
        .short 0xb932
        .short 0xe853
        .short 0xe843
        .short 0x2a00
        .short 0xd1f9
        .short 0x4770
        .short 0xf3bf
        .short 0xe853
        .short 0xe843
        .short 0x2a00
        .short 0xd1f9
        .short 0xf3bf
        .short 0x4770
#else
        mov r3, r0
        cbnz    r2,  .L___atomic_exchange_4_012
.L___atomic_exchange_4_004:
        ldrex   r0, [r3]
        strex   r2, r1, [r3]
        cmp r2, #0
        bne.n    .L___atomic_exchange_4_004
        bx  lr
.L___atomic_exchange_4_012:
        dmb ish
.L___atomic_exchange_4_016:
        ldrex   r0, [r3]
        strex   r2, r1, [r3]
        cmp r2, #0
        bne.n    .L___atomic_exchange_4_016
        dmb ish
        bx  lr
	.size   _(__atomic_exchange_4), .-_(__atomic_exchange_4)

#endif
        .global _(__atomic_exchange_8)
        .type   _(__atomic_exchange_8), %function
_(__atomic_exchange_8):
#ifdef __TINYC__
        .short 0xb430
        .short 0x4614
        .short 0x9902
        .short 0x4602
        .short 0x461d
        .short 0xb939
        .short 0xe8d2
        .short 0xe8c2
        .short 0x2b00
        .short 0xd1f9
        .short 0xbc30
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d2
        .short 0xe8c2
        .short 0x2b00
        .short 0xd1f9
        .short 0xf3bf
        .short 0xbc30
        .short 0x4770
#else
        push    {r4, r5}
        mov r4, r2
        ldr r1, [sp, #8]
        mov r2, r0
        mov r5, r3
        cbnz    r1,  .L___atomic_exchange_8_01c
.L___atomic_exchange_8_00c:
        ldrexd  r0, r1, [r2]
        strexd  r3, r4, r5, [r2]
        cmp r3, #0
        bne.n    .L___atomic_exchange_8_00c
        pop {r4, r5}
        bx  lr
.L___atomic_exchange_8_01c:
        dmb ish
.L___atomic_exchange_8_020:
        ldrexd  r0, r1, [r2]
        strexd  r3, r4, r5, [r2]
        cmp r3, #0
        bne.n    .L___atomic_exchange_8_020
        dmb ish
        pop {r4, r5}
        bx  lr
	.size   _(__atomic_exchange_8), .-_(__atomic_exchange_8)

#endif
        .global _(__atomic_fetch_add_1)
        .type   _(__atomic_fetch_add_1), %function
_(__atomic_fetch_add_1):
#ifdef __TINYC__
        .short 0xb94a
        .short 0xe8d0
        .short 0x185a
        .short 0xe8c0
        .short 0xf1bc
        .short 0xd1f7
        .short 0xb2d8
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d0
        .short 0x185a
        .short 0xe8c0
        .short 0xf1bc
        .short 0xd1f7
        .short 0xb2d8
        .short 0xf3bf
        .short 0x4770
#else
        cbnz    r2,  .L___atomic_fetch_add_1_016
.L___atomic_fetch_add_1_002:
        ldrexb  r3, [r0]
        adds    r2, r3, r1
        strexb  ip, r2, [r0]
        cmp.w   ip, #0
        bne.n    .L___atomic_fetch_add_1_002
        uxtb    r0, r3
        bx  lr
.L___atomic_fetch_add_1_016:
        dmb ish
.L___atomic_fetch_add_1_01a:
        ldrexb  r3, [r0]
        adds    r2, r3, r1
        strexb  ip, r2, [r0]
        cmp.w   ip, #0
        bne.n    .L___atomic_fetch_add_1_01a
        uxtb    r0, r3
        dmb ish
        bx  lr
	.size   _(__atomic_fetch_add_1), .-_(__atomic_fetch_add_1)

#endif
        .global _(__atomic_fetch_add_2)
        .type   _(__atomic_fetch_add_2), %function
_(__atomic_fetch_add_2):
#ifdef __TINYC__
        .short 0xb94a
        .short 0xe8d0
        .short 0x185a
        .short 0xe8c0
        .short 0xf1bc
        .short 0xd1f7
        .short 0xb298
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d0
        .short 0x185a
        .short 0xe8c0
        .short 0xf1bc
        .short 0xd1f7
        .short 0xb298
        .short 0xf3bf
        .short 0x4770
#else
        cbnz    r2,  .L___atomic_fetch_add_2_016
.L___atomic_fetch_add_2_002:
        ldrexh  r3, [r0]
        adds    r2, r3, r1
        strexh  ip, r2, [r0]
        cmp.w   ip, #0
        bne.n    .L___atomic_fetch_add_2_002
        uxth    r0, r3
        bx  lr
.L___atomic_fetch_add_2_016:
        dmb ish
.L___atomic_fetch_add_2_01a:
        ldrexh  r3, [r0]
        adds    r2, r3, r1
        strexh  ip, r2, [r0]
        cmp.w   ip, #0
        bne.n    .L___atomic_fetch_add_2_01a
        uxth    r0, r3
        dmb ish
        bx  lr
	.size   _(__atomic_fetch_add_2), .-_(__atomic_fetch_add_2)

#endif
        .global _(__atomic_fetch_add_4)
        .type   _(__atomic_fetch_add_4), %function
_(__atomic_fetch_add_4):
#ifdef __TINYC__
        .short 0x4603
        .short 0xb942
        .short 0xe853
        .short 0x1842
        .short 0xe843
        .short 0xf1bc
        .short 0xd1f7
        .short 0x4770
        .short 0xf3bf
        .short 0xe853
        .short 0x1842
        .short 0xe843
        .short 0xf1bc
        .short 0xd1f7
        .short 0xf3bf
        .short 0x4770
#else
        mov r3, r0
        cbnz    r2,  .L___atomic_fetch_add_4_016
.L___atomic_fetch_add_4_004:
        ldrex   r0, [r3]
        adds    r2, r0, r1
        strex   ip, r2, [r3]
        cmp.w   ip, #0
        bne.n    .L___atomic_fetch_add_4_004
        bx  lr
.L___atomic_fetch_add_4_016:
        dmb ish
.L___atomic_fetch_add_4_01a:
        ldrex   r0, [r3]
        adds    r2, r0, r1
        strex   ip, r2, [r3]
        cmp.w   ip, #0
        bne.n    .L___atomic_fetch_add_4_01a
        dmb ish
        bx  lr
	.size   _(__atomic_fetch_add_4), .-_(__atomic_fetch_add_4)

#endif
        .global _(__atomic_fetch_add_8)
        .type   _(__atomic_fetch_add_8), %function
_(__atomic_fetch_add_8):
#ifdef __TINYC__
        .short 0xb4f0
        .short 0x4614
        .short 0x9904
        .short 0x4602
        .short 0x461d
        .short 0xb951
        .short 0xe8d2
        .short 0x1906
        .short 0xeb41
        .short 0xe8c2
        .short 0x2b00
        .short 0xd1f6
        .short 0xbcf0
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d2
        .short 0x1906
        .short 0xeb41
        .short 0xe8c2
        .short 0x2b00
        .short 0xd1f6
        .short 0xf3bf
        .short 0xbcf0
        .short 0x4770
#else
        push    {r4, r5, r6, r7}
        mov r4, r2
        ldr r1, [sp, #16]
        mov r2, r0
        mov r5, r3
        cbnz    r1,  .L___atomic_fetch_add_8_022
.L___atomic_fetch_add_8_00c:
        ldrexd  r0, r1, [r2]
        adds    r6, r0, r4
        adc.w   r7, r1, r5
        strexd  r3, r6, r7, [r2]
        cmp r3, #0
        bne.n    .L___atomic_fetch_add_8_00c
        pop {r4, r5, r6, r7}
        bx  lr
.L___atomic_fetch_add_8_022:
        dmb ish
.L___atomic_fetch_add_8_026:
        ldrexd  r0, r1, [r2]
        adds    r6, r0, r4
        adc.w   r7, r1, r5
        strexd  r3, r6, r7, [r2]
        cmp r3, #0
        bne.n    .L___atomic_fetch_add_8_026
        dmb ish
        pop {r4, r5, r6, r7}
        bx  lr
	.size   _(__atomic_fetch_add_8), .-_(__atomic_fetch_add_8)

#endif
        .global _(__atomic_add_fetch_1)
        .type   _(__atomic_add_fetch_1), %function
_(__atomic_add_fetch_1):
#ifdef __TINYC__
        .short 0xb942
        .short 0xe8d0
        .short 0x440b
        .short 0xe8c0
        .short 0x2a00
        .short 0xd1f8
        .short 0xb2d8
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d0
        .short 0x440b
        .short 0xe8c0
        .short 0x2a00
        .short 0xd1f8
        .short 0xb2d8
        .short 0xf3bf
        .short 0x4770
#else
        cbnz    r2,  .L___atomic_add_fetch_1_048
.L___atomic_add_fetch_1_036:
        ldrexb  r3, [r0]
        add r3, r1
        strexb  r2, r3, [r0]
        cmp r2, #0
        bne.n    .L___atomic_add_fetch_1_036
        uxtb    r0, r3
        bx  lr
.L___atomic_add_fetch_1_048:
        dmb ish
.L___atomic_add_fetch_1_04c:
        ldrexb  r3, [r0]
        add r3, r1
        strexb  r2, r3, [r0]
        cmp r2, #0
        bne.n    .L___atomic_add_fetch_1_04c
        uxtb    r0, r3
        dmb ish
        bx  lr
	.size   _(__atomic_add_fetch_1), .-_(__atomic_add_fetch_1)

#endif
        .global _(__atomic_add_fetch_2)
        .type   _(__atomic_add_fetch_2), %function
_(__atomic_add_fetch_2):
#ifdef __TINYC__
        .short 0xb942
        .short 0xe8d0
        .short 0x440b
        .short 0xe8c0
        .short 0x2a00
        .short 0xd1f8
        .short 0xb298
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d0
        .short 0x440b
        .short 0xe8c0
        .short 0x2a00
        .short 0xd1f8
        .short 0xb298
        .short 0xf3bf
        .short 0x4770
#else
        cbnz    r2,  .L___atomic_add_fetch_2_048
.L___atomic_add_fetch_2_036:
        ldrexh  r3, [r0]
        add r3, r1
        strexh  r2, r3, [r0]
        cmp r2, #0
        bne.n    .L___atomic_add_fetch_2_036
        uxth    r0, r3
        bx  lr
.L___atomic_add_fetch_2_048:
        dmb ish
.L___atomic_add_fetch_2_04c:
        ldrexh  r3, [r0]
        add r3, r1
        strexh  r2, r3, [r0]
        cmp r2, #0
        bne.n    .L___atomic_add_fetch_2_04c
        uxth    r0, r3
        dmb ish
        bx  lr
	.size   _(__atomic_add_fetch_2), .-_(__atomic_add_fetch_2)

#endif
        .global _(__atomic_add_fetch_4)
        .type   _(__atomic_add_fetch_4), %function
_(__atomic_add_fetch_4):
#ifdef __TINYC__
        .short 0x4603
        .short 0xb93a
        .short 0xe853
        .short 0x4408
        .short 0xe843
        .short 0x2a00
        .short 0xd1f8
        .short 0x4770
        .short 0xf3bf
        .short 0xe853
        .short 0x4408
        .short 0xe843
        .short 0x2a00
        .short 0xd1f8
        .short 0xf3bf
        .short 0x4770
#else
        mov r3, r0
        cbnz    r2,  .L___atomic_add_fetch_4_044
.L___atomic_add_fetch_4_034:
        ldrex   r0, [r3]
        add r0, r1
        strex   r2, r0, [r3]
        cmp r2, #0
        bne.n    .L___atomic_add_fetch_4_034
        bx  lr
.L___atomic_add_fetch_4_044:
        dmb ish
.L___atomic_add_fetch_4_048:
        ldrex   r0, [r3]
        add r0, r1
        strex   r2, r0, [r3]
        cmp r2, #0
        bne.n    .L___atomic_add_fetch_4_048
        dmb ish
        bx  lr
	.size   _(__atomic_add_fetch_4), .-_(__atomic_add_fetch_4)

#endif
        .global _(__atomic_add_fetch_8)
        .type   _(__atomic_add_fetch_8), %function
_(__atomic_add_fetch_8):
#ifdef __TINYC__
        .short 0xb430
        .short 0x4614
        .short 0x9902
        .short 0x4602
        .short 0x461d
        .short 0xb949
        .short 0xe8d2
        .short 0x1900
        .short 0x4169
        .short 0xe8c2
        .short 0x2b00
        .short 0xd1f7
        .short 0xbc30
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d2
        .short 0x1900
        .short 0x4169
        .short 0xe8c2
        .short 0x2b00
        .short 0xd1f7
        .short 0xf3bf
        .short 0xbc30
        .short 0x4770
#else
        push    {r4, r5}
        mov r4, r2
        ldr r1, [sp, #8]
        mov r2, r0
        mov r5, r3
        cbnz    r1,  .L___atomic_add_fetch_8_060
.L___atomic_add_fetch_8_04c:
        ldrexd  r0, r1, [r2]
        adds    r0, r0, r4
        adcs    r1, r5
        strexd  r3, r0, r1, [r2]
        cmp r3, #0
        bne.n    .L___atomic_add_fetch_8_04c
        pop {r4, r5}
        bx  lr
.L___atomic_add_fetch_8_060:
        dmb ish
.L___atomic_add_fetch_8_064:
        ldrexd  r0, r1, [r2]
        adds    r0, r0, r4
        adcs    r1, r5
        strexd  r3, r0, r1, [r2]
        cmp r3, #0
        bne.n    .L___atomic_add_fetch_8_064
        dmb ish
        pop {r4, r5}
        bx  lr
	.size   _(__atomic_add_fetch_8), .-_(__atomic_add_fetch_8)

#endif
        .global _(__atomic_fetch_sub_1)
        .type   _(__atomic_fetch_sub_1), %function
_(__atomic_fetch_sub_1):
#ifdef __TINYC__
        .short 0xb94a
        .short 0xe8d0
        .short 0x1a5a
        .short 0xe8c0
        .short 0xf1bc
        .short 0xd1f7
        .short 0xb2d8
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d0
        .short 0x1a5a
        .short 0xe8c0
        .short 0xf1bc
        .short 0xd1f7
        .short 0xb2d8
        .short 0xf3bf
        .short 0x4770
#else
        cbnz    r2,  .L___atomic_fetch_sub_1_016
.L___atomic_fetch_sub_1_002:
        ldrexb  r3, [r0]
        subs    r2, r3, r1
        strexb  ip, r2, [r0]
        cmp.w   ip, #0
        bne.n    .L___atomic_fetch_sub_1_002
        uxtb    r0, r3
        bx  lr
.L___atomic_fetch_sub_1_016:
        dmb ish
.L___atomic_fetch_sub_1_01a:
        ldrexb  r3, [r0]
        subs    r2, r3, r1
        strexb  ip, r2, [r0]
        cmp.w   ip, #0
        bne.n    .L___atomic_fetch_sub_1_01a
        uxtb    r0, r3
        dmb ish
        bx  lr
	.size   _(__atomic_fetch_sub_1), .-_(__atomic_fetch_sub_1)

#endif
        .global _(__atomic_fetch_sub_2)
        .type   _(__atomic_fetch_sub_2), %function
_(__atomic_fetch_sub_2):
#ifdef __TINYC__
        .short 0xb94a
        .short 0xe8d0
        .short 0x1a5a
        .short 0xe8c0
        .short 0xf1bc
        .short 0xd1f7
        .short 0xb298
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d0
        .short 0x1a5a
        .short 0xe8c0
        .short 0xf1bc
        .short 0xd1f7
        .short 0xb298
        .short 0xf3bf
        .short 0x4770
#else
        cbnz    r2,  .L___atomic_fetch_sub_2_016
.L___atomic_fetch_sub_2_002:
        ldrexh  r3, [r0]
        subs    r2, r3, r1
        strexh  ip, r2, [r0]
        cmp.w   ip, #0
        bne.n    .L___atomic_fetch_sub_2_002
        uxth    r0, r3
        bx  lr
.L___atomic_fetch_sub_2_016:
        dmb ish
.L___atomic_fetch_sub_2_01a:
        ldrexh  r3, [r0]
        subs    r2, r3, r1
        strexh  ip, r2, [r0]
        cmp.w   ip, #0
        bne.n    .L___atomic_fetch_sub_2_01a
        uxth    r0, r3
        dmb ish
        bx  lr
	.size   _(__atomic_fetch_sub_2), .-_(__atomic_fetch_sub_2)

#endif
        .global _(__atomic_fetch_sub_4)
        .type   _(__atomic_fetch_sub_4), %function
_(__atomic_fetch_sub_4):
#ifdef __TINYC__
        .short 0x4603
        .short 0xb942
        .short 0xe853
        .short 0x1a42
        .short 0xe843
        .short 0xf1bc
        .short 0xd1f7
        .short 0x4770
        .short 0xf3bf
        .short 0xe853
        .short 0x1a42
        .short 0xe843
        .short 0xf1bc
        .short 0xd1f7
        .short 0xf3bf
        .short 0x4770
#else
        mov r3, r0
        cbnz    r2,  .L___atomic_fetch_sub_4_016
.L___atomic_fetch_sub_4_004:
        ldrex   r0, [r3]
        subs    r2, r0, r1
        strex   ip, r2, [r3]
        cmp.w   ip, #0
        bne.n    .L___atomic_fetch_sub_4_004
        bx  lr
.L___atomic_fetch_sub_4_016:
        dmb ish
.L___atomic_fetch_sub_4_01a:
        ldrex   r0, [r3]
        subs    r2, r0, r1
        strex   ip, r2, [r3]
        cmp.w   ip, #0
        bne.n    .L___atomic_fetch_sub_4_01a
        dmb ish
        bx  lr
	.size   _(__atomic_fetch_sub_4), .-_(__atomic_fetch_sub_4)

#endif
        .global _(__atomic_fetch_sub_8)
        .type   _(__atomic_fetch_sub_8), %function
_(__atomic_fetch_sub_8):
#ifdef __TINYC__
        .short 0xb4f0
        .short 0x4614
        .short 0x9904
        .short 0x4602
        .short 0x461d
        .short 0xb951
        .short 0xe8d2
        .short 0x1b06
        .short 0xeb61
        .short 0xe8c2
        .short 0x2b00
        .short 0xd1f6
        .short 0xbcf0
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d2
        .short 0x1b06
        .short 0xeb61
        .short 0xe8c2
        .short 0x2b00
        .short 0xd1f6
        .short 0xf3bf
        .short 0xbcf0
        .short 0x4770
#else
        push    {r4, r5, r6, r7}
        mov r4, r2
        ldr r1, [sp, #16]
        mov r2, r0
        mov r5, r3
        cbnz    r1,  .L___atomic_fetch_sub_8_022
.L___atomic_fetch_sub_8_00c:
        ldrexd  r0, r1, [r2]
        subs    r6, r0, r4
        sbc.w   r7, r1, r5
        strexd  r3, r6, r7, [r2]
        cmp r3, #0
        bne.n    .L___atomic_fetch_sub_8_00c
        pop {r4, r5, r6, r7}
        bx  lr
.L___atomic_fetch_sub_8_022:
        dmb ish
.L___atomic_fetch_sub_8_026:
        ldrexd  r0, r1, [r2]
        subs    r6, r0, r4
        sbc.w   r7, r1, r5
        strexd  r3, r6, r7, [r2]
        cmp r3, #0
        bne.n    .L___atomic_fetch_sub_8_026
        dmb ish
        pop {r4, r5, r6, r7}
        bx  lr
	.size   _(__atomic_fetch_sub_8), .-_(__atomic_fetch_sub_8)

#endif
        .global _(__atomic_sub_fetch_1)
        .type   _(__atomic_sub_fetch_1), %function
_(__atomic_sub_fetch_1):
#ifdef __TINYC__
        .short 0xb942
        .short 0xe8d0
        .short 0x1a5b
        .short 0xe8c0
        .short 0x2a00
        .short 0xd1f8
        .short 0xb2d8
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d0
        .short 0x1a5b
        .short 0xe8c0
        .short 0x2a00
        .short 0xd1f8
        .short 0xb2d8
        .short 0xf3bf
        .short 0x4770
#else
        cbnz    r2,  .L___atomic_sub_fetch_1_048
.L___atomic_sub_fetch_1_036:
        ldrexb  r3, [r0]
        subs    r3, r3, r1
        strexb  r2, r3, [r0]
        cmp r2, #0
        bne.n    .L___atomic_sub_fetch_1_036
        uxtb    r0, r3
        bx  lr
.L___atomic_sub_fetch_1_048:
        dmb ish
.L___atomic_sub_fetch_1_04c:
        ldrexb  r3, [r0]
        subs    r3, r3, r1
        strexb  r2, r3, [r0]
        cmp r2, #0
        bne.n    .L___atomic_sub_fetch_1_04c
        uxtb    r0, r3
        dmb ish
        bx  lr
	.size   _(__atomic_sub_fetch_1), .-_(__atomic_sub_fetch_1)

#endif
        .global _(__atomic_sub_fetch_2)
        .type   _(__atomic_sub_fetch_2), %function
_(__atomic_sub_fetch_2):
#ifdef __TINYC__
        .short 0xb942
        .short 0xe8d0
        .short 0x1a5b
        .short 0xe8c0
        .short 0x2a00
        .short 0xd1f8
        .short 0xb298
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d0
        .short 0x1a5b
        .short 0xe8c0
        .short 0x2a00
        .short 0xd1f8
        .short 0xb298
        .short 0xf3bf
        .short 0x4770
#else
        cbnz    r2,  .L___atomic_sub_fetch_2_048
.L___atomic_sub_fetch_2_036:
        ldrexh  r3, [r0]
        subs    r3, r3, r1
        strexh  r2, r3, [r0]
        cmp r2, #0
        bne.n    .L___atomic_sub_fetch_2_036
        uxth    r0, r3
        bx  lr
.L___atomic_sub_fetch_2_048:
        dmb ish
.L___atomic_sub_fetch_2_04c:
        ldrexh  r3, [r0]
        subs    r3, r3, r1
        strexh  r2, r3, [r0]
        cmp r2, #0
        bne.n    .L___atomic_sub_fetch_2_04c
        uxth    r0, r3
        dmb ish
        bx  lr
	.size   _(__atomic_sub_fetch_2), .-_(__atomic_sub_fetch_2)

#endif
        .global _(__atomic_sub_fetch_4)
        .type   _(__atomic_sub_fetch_4), %function
_(__atomic_sub_fetch_4):
#ifdef __TINYC__
        .short 0x4603
        .short 0xb93a
        .short 0xe853
        .short 0x1a40
        .short 0xe843
        .short 0x2a00
        .short 0xd1f8
        .short 0x4770
        .short 0xf3bf
        .short 0xe853
        .short 0x1a40
        .short 0xe843
        .short 0x2a00
        .short 0xd1f8
        .short 0xf3bf
        .short 0x4770
#else
        mov r3, r0
        cbnz    r2,  .L___atomic_sub_fetch_4_044
.L___atomic_sub_fetch_4_034:
        ldrex   r0, [r3]
        subs    r0, r0, r1
        strex   r2, r0, [r3]
        cmp r2, #0
        bne.n    .L___atomic_sub_fetch_4_034
        bx  lr
.L___atomic_sub_fetch_4_044:
        dmb ish
.L___atomic_sub_fetch_4_048:
        ldrex   r0, [r3]
        subs    r0, r0, r1
        strex   r2, r0, [r3]
        cmp r2, #0
        bne.n    .L___atomic_sub_fetch_4_048
        dmb ish
        bx  lr
	.size   _(__atomic_sub_fetch_4), .-_(__atomic_sub_fetch_4)

#endif
        .global _(__atomic_sub_fetch_8)
        .type   _(__atomic_sub_fetch_8), %function
_(__atomic_sub_fetch_8):
#ifdef __TINYC__
        .short 0xb430
        .short 0x4614
        .short 0x9902
        .short 0x4602
        .short 0x461d
        .short 0xb951
        .short 0xe8d2
        .short 0x1b00
        .short 0xeb61
        .short 0xe8c2
        .short 0x2b00
        .short 0xd1f6
        .short 0xbc30
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d2
        .short 0x1b00
        .short 0xeb61
        .short 0xe8c2
        .short 0x2b00
        .short 0xd1f6
        .short 0xf3bf
        .short 0xbc30
        .short 0x4770
#else
        push    {r4, r5}
        mov r4, r2
        ldr r1, [sp, #8]
        mov r2, r0
        mov r5, r3
        cbnz    r1,  .L___atomic_sub_fetch_8_062
.L___atomic_sub_fetch_8_04c:
        ldrexd  r0, r1, [r2]
        subs    r0, r0, r4
        sbc.w   r1, r1, r5
        strexd  r3, r0, r1, [r2]
        cmp r3, #0
        bne.n    .L___atomic_sub_fetch_8_04c
        pop {r4, r5}
        bx  lr
.L___atomic_sub_fetch_8_062:
        dmb ish
.L___atomic_sub_fetch_8_066:
        ldrexd  r0, r1, [r2]
        subs    r0, r0, r4
        sbc.w   r1, r1, r5
        strexd  r3, r0, r1, [r2]
        cmp r3, #0
        bne.n    .L___atomic_sub_fetch_8_066
        dmb ish
        pop {r4, r5}
        bx  lr
	.size   _(__atomic_sub_fetch_8), .-_(__atomic_sub_fetch_8)

#endif
        .global _(__atomic_fetch_and_1)
        .type   _(__atomic_fetch_and_1), %function
_(__atomic_fetch_and_1):
#ifdef __TINYC__
        .short 0xb952
        .short 0xe8d0
        .short 0xea03
        .short 0xe8c0
        .short 0xf1bc
        .short 0xd1f6
        .short 0xb2d8
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d0
        .short 0xea03
        .short 0xe8c0
        .short 0xf1bc
        .short 0xd1f6
        .short 0xb2d8
        .short 0xf3bf
        .short 0x4770
#else
        cbnz    r2,  .L___atomic_fetch_and_1_018
.L___atomic_fetch_and_1_002:
        ldrexb  r3, [r0]
        and.w   r2, r3, r1
        strexb  ip, r2, [r0]
        cmp.w   ip, #0
        bne.n    .L___atomic_fetch_and_1_002
        uxtb    r0, r3
        bx  lr
.L___atomic_fetch_and_1_018:
        dmb ish
.L___atomic_fetch_and_1_01c:
        ldrexb  r3, [r0]
        and.w   r2, r3, r1
        strexb  ip, r2, [r0]
        cmp.w   ip, #0
        bne.n    .L___atomic_fetch_and_1_01c
        uxtb    r0, r3
        dmb ish
        bx  lr
	.size   _(__atomic_fetch_and_1), .-_(__atomic_fetch_and_1)

#endif
        .global _(__atomic_fetch_and_2)
        .type   _(__atomic_fetch_and_2), %function
_(__atomic_fetch_and_2):
#ifdef __TINYC__
        .short 0xb952
        .short 0xe8d0
        .short 0xea03
        .short 0xe8c0
        .short 0xf1bc
        .short 0xd1f6
        .short 0xb298
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d0
        .short 0xea03
        .short 0xe8c0
        .short 0xf1bc
        .short 0xd1f6
        .short 0xb298
        .short 0xf3bf
        .short 0x4770
#else
        cbnz    r2,  .L___atomic_fetch_and_2_018
.L___atomic_fetch_and_2_002:
        ldrexh  r3, [r0]
        and.w   r2, r3, r1
        strexh  ip, r2, [r0]
        cmp.w   ip, #0
        bne.n    .L___atomic_fetch_and_2_002
        uxth    r0, r3
        bx  lr
.L___atomic_fetch_and_2_018:
        dmb ish
.L___atomic_fetch_and_2_01c:
        ldrexh  r3, [r0]
        and.w   r2, r3, r1
        strexh  ip, r2, [r0]
        cmp.w   ip, #0
        bne.n    .L___atomic_fetch_and_2_01c
        uxth    r0, r3
        dmb ish
        bx  lr
	.size   _(__atomic_fetch_and_2), .-_(__atomic_fetch_and_2)

#endif
        .global _(__atomic_fetch_and_4)
        .type   _(__atomic_fetch_and_4), %function
_(__atomic_fetch_and_4):
#ifdef __TINYC__
        .short 0x4603
        .short 0xb94a
        .short 0xe853
        .short 0xea00
        .short 0xe843
        .short 0xf1bc
        .short 0xd1f6
        .short 0x4770
        .short 0xf3bf
        .short 0xe853
        .short 0xea00
        .short 0xe843
        .short 0xf1bc
        .short 0xd1f6
        .short 0xf3bf
        .short 0x4770
#else
        mov r3, r0
        cbnz    r2,  .L___atomic_fetch_and_4_018
.L___atomic_fetch_and_4_004:
        ldrex   r0, [r3]
        and.w   r2, r0, r1
        strex   ip, r2, [r3]
        cmp.w   ip, #0
        bne.n    .L___atomic_fetch_and_4_004
        bx  lr
.L___atomic_fetch_and_4_018:
        dmb ish
.L___atomic_fetch_and_4_01c:
        ldrex   r0, [r3]
        and.w   r2, r0, r1
        strex   ip, r2, [r3]
        cmp.w   ip, #0
        bne.n    .L___atomic_fetch_and_4_01c
        dmb ish
        bx  lr
	.size   _(__atomic_fetch_and_4), .-_(__atomic_fetch_and_4)

#endif
        .global _(__atomic_fetch_and_8)
        .type   _(__atomic_fetch_and_8), %function
_(__atomic_fetch_and_8):
#ifdef __TINYC__
        .short 0xb4f0
        .short 0x4614
        .short 0x9904
        .short 0x4602
        .short 0x461d
        .short 0xb959
        .short 0xe8d2
        .short 0xea00
        .short 0xea01
        .short 0xe8c2
        .short 0x2b00
        .short 0xd1f5
        .short 0xbcf0
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d2
        .short 0xea00
        .short 0xea01
        .short 0xe8c2
        .short 0x2b00
        .short 0xd1f5
        .short 0xf3bf
        .short 0xbcf0
        .short 0x4770
#else
        push    {r4, r5, r6, r7}
        mov r4, r2
        ldr r1, [sp, #16]
        mov r2, r0
        mov r5, r3
        cbnz    r1,  .L___atomic_fetch_and_8_024
.L___atomic_fetch_and_8_00c:
        ldrexd  r0, r1, [r2]
        and.w   r6, r0, r4
        and.w   r7, r1, r5
        strexd  r3, r6, r7, [r2]
        cmp r3, #0
        bne.n    .L___atomic_fetch_and_8_00c
        pop {r4, r5, r6, r7}
        bx  lr
.L___atomic_fetch_and_8_024:
        dmb ish
.L___atomic_fetch_and_8_028:
        ldrexd  r0, r1, [r2]
        and.w   r6, r0, r4
        and.w   r7, r1, r5
        strexd  r3, r6, r7, [r2]
        cmp r3, #0
        bne.n    .L___atomic_fetch_and_8_028
        dmb ish
        pop {r4, r5, r6, r7}
        bx  lr
	.size   _(__atomic_fetch_and_8), .-_(__atomic_fetch_and_8)

#endif
        .global _(__atomic_and_fetch_1)
        .type   _(__atomic_and_fetch_1), %function
_(__atomic_and_fetch_1):
#ifdef __TINYC__
        .short 0xb942
        .short 0xe8d0
        .short 0x400b
        .short 0xe8c0
        .short 0x2a00
        .short 0xd1f8
        .short 0xb2d8
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d0
        .short 0x400b
        .short 0xe8c0
        .short 0x2a00
        .short 0xd1f8
        .short 0xb2d8
        .short 0xf3bf
        .short 0x4770
#else
        cbnz    r2,  .L___atomic_and_fetch_1_04c
.L___atomic_and_fetch_1_03a:
        ldrexb  r3, [r0]
        ands    r3, r1
        strexb  r2, r3, [r0]
        cmp r2, #0
        bne.n    .L___atomic_and_fetch_1_03a
        uxtb    r0, r3
        bx  lr
.L___atomic_and_fetch_1_04c:
        dmb ish
.L___atomic_and_fetch_1_050:
        ldrexb  r3, [r0]
        ands    r3, r1
        strexb  r2, r3, [r0]
        cmp r2, #0
        bne.n    .L___atomic_and_fetch_1_050
        uxtb    r0, r3
        dmb ish
        bx  lr
	.size   _(__atomic_and_fetch_1), .-_(__atomic_and_fetch_1)

#endif
        .global _(__atomic_and_fetch_2)
        .type   _(__atomic_and_fetch_2), %function
_(__atomic_and_fetch_2):
#ifdef __TINYC__
        .short 0xb942
        .short 0xe8d0
        .short 0x400b
        .short 0xe8c0
        .short 0x2a00
        .short 0xd1f8
        .short 0xb298
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d0
        .short 0x400b
        .short 0xe8c0
        .short 0x2a00
        .short 0xd1f8
        .short 0xb298
        .short 0xf3bf
        .short 0x4770
#else
        cbnz    r2,  .L___atomic_and_fetch_2_04c
.L___atomic_and_fetch_2_03a:
        ldrexh  r3, [r0]
        ands    r3, r1
        strexh  r2, r3, [r0]
        cmp r2, #0
        bne.n    .L___atomic_and_fetch_2_03a
        uxth    r0, r3
        bx  lr
.L___atomic_and_fetch_2_04c:
        dmb ish
.L___atomic_and_fetch_2_050:
        ldrexh  r3, [r0]
        ands    r3, r1
        strexh  r2, r3, [r0]
        cmp r2, #0
        bne.n    .L___atomic_and_fetch_2_050
        uxth    r0, r3
        dmb ish
        bx  lr
	.size   _(__atomic_and_fetch_2), .-_(__atomic_and_fetch_2)

#endif
        .global _(__atomic_and_fetch_4)
        .type   _(__atomic_and_fetch_4), %function
_(__atomic_and_fetch_4):
#ifdef __TINYC__
        .short 0x4603
        .short 0xb93a
        .short 0xe853
        .short 0x4008
        .short 0xe843
        .short 0x2a00
        .short 0xd1f8
        .short 0x4770
        .short 0xf3bf
        .short 0xe853
        .short 0x4008
        .short 0xe843
        .short 0x2a00
        .short 0xd1f8
        .short 0xf3bf
        .short 0x4770
#else
        mov r3, r0
        cbnz    r2,  .L___atomic_and_fetch_4_048
.L___atomic_and_fetch_4_038:
        ldrex   r0, [r3]
        ands    r0, r1
        strex   r2, r0, [r3]
        cmp r2, #0
        bne.n    .L___atomic_and_fetch_4_038
        bx  lr
.L___atomic_and_fetch_4_048:
        dmb ish
.L___atomic_and_fetch_4_04c:
        ldrex   r0, [r3]
        ands    r0, r1
        strex   r2, r0, [r3]
        cmp r2, #0
        bne.n    .L___atomic_and_fetch_4_04c
        dmb ish
        bx  lr
	.size   _(__atomic_and_fetch_4), .-_(__atomic_and_fetch_4)

#endif
        .global _(__atomic_and_fetch_8)
        .type   _(__atomic_and_fetch_8), %function
_(__atomic_and_fetch_8):
#ifdef __TINYC__
        .short 0xb430
        .short 0x4614
        .short 0x9902
        .short 0x4602
        .short 0x461d
        .short 0xb949
        .short 0xe8d2
        .short 0x4020
        .short 0x4029
        .short 0xe8c2
        .short 0x2b00
        .short 0xd1f7
        .short 0xbc30
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d2
        .short 0x4020
        .short 0x4029
        .short 0xe8c2
        .short 0x2b00
        .short 0xd1f7
        .short 0xf3bf
        .short 0xbc30
        .short 0x4770
#else
        push    {r4, r5}
        mov r4, r2
        ldr r1, [sp, #8]
        mov r2, r0
        mov r5, r3
        cbnz    r1,  .L___atomic_and_fetch_8_064
.L___atomic_and_fetch_8_050:
        ldrexd  r0, r1, [r2]
        ands    r0, r4
        ands    r1, r5
        strexd  r3, r0, r1, [r2]
        cmp r3, #0
        bne.n    .L___atomic_and_fetch_8_050
        pop {r4, r5}
        bx  lr
.L___atomic_and_fetch_8_064:
        dmb ish
.L___atomic_and_fetch_8_068:
        ldrexd  r0, r1, [r2]
        ands    r0, r4
        ands    r1, r5
        strexd  r3, r0, r1, [r2]
        cmp r3, #0
        bne.n    .L___atomic_and_fetch_8_068
        dmb ish
        pop {r4, r5}
        bx  lr
	.size   _(__atomic_and_fetch_8), .-_(__atomic_and_fetch_8)

#endif
        .global _(__atomic_fetch_or_1)
        .type   _(__atomic_fetch_or_1), %function
_(__atomic_fetch_or_1):
#ifdef __TINYC__
        .short 0xb952
        .short 0xe8d0
        .short 0xea43
        .short 0xe8c0
        .short 0xf1bc
        .short 0xd1f6
        .short 0xb2d8
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d0
        .short 0xea43
        .short 0xe8c0
        .short 0xf1bc
        .short 0xd1f6
        .short 0xb2d8
        .short 0xf3bf
        .short 0x4770
#else
        cbnz    r2,  .L___atomic_fetch_or_1_018
.L___atomic_fetch_or_1_002:
        ldrexb  r3, [r0]
        orr.w   r2, r3, r1
        strexb  ip, r2, [r0]
        cmp.w   ip, #0
        bne.n    .L___atomic_fetch_or_1_002
        uxtb    r0, r3
        bx  lr
.L___atomic_fetch_or_1_018:
        dmb ish
.L___atomic_fetch_or_1_01c:
        ldrexb  r3, [r0]
        orr.w   r2, r3, r1
        strexb  ip, r2, [r0]
        cmp.w   ip, #0
        bne.n    .L___atomic_fetch_or_1_01c
        uxtb    r0, r3
        dmb ish
        bx  lr
	.size   _(__atomic_fetch_or_1), .-_(__atomic_fetch_or_1)

#endif
        .global _(__atomic_fetch_or_2)
        .type   _(__atomic_fetch_or_2), %function
_(__atomic_fetch_or_2):
#ifdef __TINYC__
        .short 0xb952
        .short 0xe8d0
        .short 0xea43
        .short 0xe8c0
        .short 0xf1bc
        .short 0xd1f6
        .short 0xb298
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d0
        .short 0xea43
        .short 0xe8c0
        .short 0xf1bc
        .short 0xd1f6
        .short 0xb298
        .short 0xf3bf
        .short 0x4770
#else
        cbnz    r2,  .L___atomic_fetch_or_2_018
.L___atomic_fetch_or_2_002:
        ldrexh  r3, [r0]
        orr.w   r2, r3, r1
        strexh  ip, r2, [r0]
        cmp.w   ip, #0
        bne.n    .L___atomic_fetch_or_2_002
        uxth    r0, r3
        bx  lr
.L___atomic_fetch_or_2_018:
        dmb ish
.L___atomic_fetch_or_2_01c:
        ldrexh  r3, [r0]
        orr.w   r2, r3, r1
        strexh  ip, r2, [r0]
        cmp.w   ip, #0
        bne.n    .L___atomic_fetch_or_2_01c
        uxth    r0, r3
        dmb ish
        bx  lr
	.size   _(__atomic_fetch_or_2), .-_(__atomic_fetch_or_2)

#endif
        .global _(__atomic_fetch_or_4)
        .type   _(__atomic_fetch_or_4), %function
_(__atomic_fetch_or_4):
#ifdef __TINYC__
        .short 0x4603
        .short 0xb94a
        .short 0xe853
        .short 0xea40
        .short 0xe843
        .short 0xf1bc
        .short 0xd1f6
        .short 0x4770
        .short 0xf3bf
        .short 0xe853
        .short 0xea40
        .short 0xe843
        .short 0xf1bc
        .short 0xd1f6
        .short 0xf3bf
        .short 0x4770
#else
        mov r3, r0
        cbnz    r2,  .L___atomic_fetch_or_4_018
.L___atomic_fetch_or_4_004:
        ldrex   r0, [r3]
        orr.w   r2, r0, r1
        strex   ip, r2, [r3]
        cmp.w   ip, #0
        bne.n    .L___atomic_fetch_or_4_004
        bx  lr
.L___atomic_fetch_or_4_018:
        dmb ish
.L___atomic_fetch_or_4_01c:
        ldrex   r0, [r3]
        orr.w   r2, r0, r1
        strex   ip, r2, [r3]
        cmp.w   ip, #0
        bne.n    .L___atomic_fetch_or_4_01c
        dmb ish
        bx  lr
	.size   _(__atomic_fetch_or_4), .-_(__atomic_fetch_or_4)

#endif
        .global _(__atomic_fetch_or_8)
        .type   _(__atomic_fetch_or_8), %function
_(__atomic_fetch_or_8):
#ifdef __TINYC__
        .short 0xb4f0
        .short 0x4614
        .short 0x9904
        .short 0x4602
        .short 0x461d
        .short 0xb959
        .short 0xe8d2
        .short 0xea40
        .short 0xea41
        .short 0xe8c2
        .short 0x2b00
        .short 0xd1f5
        .short 0xbcf0
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d2
        .short 0xea40
        .short 0xea41
        .short 0xe8c2
        .short 0x2b00
        .short 0xd1f5
        .short 0xf3bf
        .short 0xbcf0
        .short 0x4770
#else
        push    {r4, r5, r6, r7}
        mov r4, r2
        ldr r1, [sp, #16]
        mov r2, r0
        mov r5, r3
        cbnz    r1,  .L___atomic_fetch_or_8_024
.L___atomic_fetch_or_8_00c:
        ldrexd  r0, r1, [r2]
        orr.w   r6, r0, r4
        orr.w   r7, r1, r5
        strexd  r3, r6, r7, [r2]
        cmp r3, #0
        bne.n    .L___atomic_fetch_or_8_00c
        pop {r4, r5, r6, r7}
        bx  lr
.L___atomic_fetch_or_8_024:
        dmb ish
.L___atomic_fetch_or_8_028:
        ldrexd  r0, r1, [r2]
        orr.w   r6, r0, r4
        orr.w   r7, r1, r5
        strexd  r3, r6, r7, [r2]
        cmp r3, #0
        bne.n    .L___atomic_fetch_or_8_028
        dmb ish
        pop {r4, r5, r6, r7}
        bx  lr
	.size   _(__atomic_fetch_or_8), .-_(__atomic_fetch_or_8)

#endif
        .global _(__atomic_or_fetch_1)
        .type   _(__atomic_or_fetch_1), %function
_(__atomic_or_fetch_1):
#ifdef __TINYC__
        .short 0xb942
        .short 0xe8d0
        .short 0x430b
        .short 0xe8c0
        .short 0x2a00
        .short 0xd1f8
        .short 0xb2d8
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d0
        .short 0x430b
        .short 0xe8c0
        .short 0x2a00
        .short 0xd1f8
        .short 0xb2d8
        .short 0xf3bf
        .short 0x4770
#else
        cbnz    r2,  .L___atomic_or_fetch_1_04c
.L___atomic_or_fetch_1_03a:
        ldrexb  r3, [r0]
        orrs    r3, r1
        strexb  r2, r3, [r0]
        cmp r2, #0
        bne.n    .L___atomic_or_fetch_1_03a
        uxtb    r0, r3
        bx  lr
.L___atomic_or_fetch_1_04c:
        dmb ish
.L___atomic_or_fetch_1_050:
        ldrexb  r3, [r0]
        orrs    r3, r1
        strexb  r2, r3, [r0]
        cmp r2, #0
        bne.n    .L___atomic_or_fetch_1_050
        uxtb    r0, r3
        dmb ish
        bx  lr
	.size   _(__atomic_or_fetch_1), .-_(__atomic_or_fetch_1)

#endif
        .global _(__atomic_or_fetch_2)
        .type   _(__atomic_or_fetch_2), %function
_(__atomic_or_fetch_2):
#ifdef __TINYC__
        .short 0xb942
        .short 0xe8d0
        .short 0x430b
        .short 0xe8c0
        .short 0x2a00
        .short 0xd1f8
        .short 0xb298
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d0
        .short 0x430b
        .short 0xe8c0
        .short 0x2a00
        .short 0xd1f8
        .short 0xb298
        .short 0xf3bf
        .short 0x4770
#else
        cbnz    r2,  .L___atomic_or_fetch_2_04c
.L___atomic_or_fetch_2_03a:
        ldrexh  r3, [r0]
        orrs    r3, r1
        strexh  r2, r3, [r0]
        cmp r2, #0
        bne.n    .L___atomic_or_fetch_2_03a
        uxth    r0, r3
        bx  lr
.L___atomic_or_fetch_2_04c:
        dmb ish
.L___atomic_or_fetch_2_050:
        ldrexh  r3, [r0]
        orrs    r3, r1
        strexh  r2, r3, [r0]
        cmp r2, #0
        bne.n    .L___atomic_or_fetch_2_050
        uxth    r0, r3
        dmb ish
        bx  lr
	.size   _(__atomic_or_fetch_2), .-_(__atomic_or_fetch_2)

#endif
        .global _(__atomic_or_fetch_4)
        .type   _(__atomic_or_fetch_4), %function
_(__atomic_or_fetch_4):
#ifdef __TINYC__
        .short 0x4603
        .short 0xb93a
        .short 0xe853
        .short 0x4308
        .short 0xe843
        .short 0x2a00
        .short 0xd1f8
        .short 0x4770
        .short 0xf3bf
        .short 0xe853
        .short 0x4308
        .short 0xe843
        .short 0x2a00
        .short 0xd1f8
        .short 0xf3bf
        .short 0x4770
#else
        mov r3, r0
        cbnz    r2,  .L___atomic_or_fetch_4_048
.L___atomic_or_fetch_4_038:
        ldrex   r0, [r3]
        orrs    r0, r1
        strex   r2, r0, [r3]
        cmp r2, #0
        bne.n    .L___atomic_or_fetch_4_038
        bx  lr
.L___atomic_or_fetch_4_048:
        dmb ish
.L___atomic_or_fetch_4_04c:
        ldrex   r0, [r3]
        orrs    r0, r1
        strex   r2, r0, [r3]
        cmp r2, #0
        bne.n    .L___atomic_or_fetch_4_04c
        dmb ish
        bx  lr
	.size   _(__atomic_or_fetch_4), .-_(__atomic_or_fetch_4)

#endif
        .global _(__atomic_or_fetch_8)
        .type   _(__atomic_or_fetch_8), %function
_(__atomic_or_fetch_8):
#ifdef __TINYC__
        .short 0xb430
        .short 0x4614
        .short 0x9902
        .short 0x4602
        .short 0x461d
        .short 0xb949
        .short 0xe8d2
        .short 0x4320
        .short 0x4329
        .short 0xe8c2
        .short 0x2b00
        .short 0xd1f7
        .short 0xbc30
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d2
        .short 0x4320
        .short 0x4329
        .short 0xe8c2
        .short 0x2b00
        .short 0xd1f7
        .short 0xf3bf
        .short 0xbc30
        .short 0x4770
#else
        push    {r4, r5}
        mov r4, r2
        ldr r1, [sp, #8]
        mov r2, r0
        mov r5, r3
        cbnz    r1,  .L___atomic_or_fetch_8_064
.L___atomic_or_fetch_8_050:
        ldrexd  r0, r1, [r2]
        orrs    r0, r4
        orrs    r1, r5
        strexd  r3, r0, r1, [r2]
        cmp r3, #0
        bne.n    .L___atomic_or_fetch_8_050
        pop {r4, r5}
        bx  lr
.L___atomic_or_fetch_8_064:
        dmb ish
.L___atomic_or_fetch_8_068:
        ldrexd  r0, r1, [r2]
        orrs    r0, r4
        orrs    r1, r5
        strexd  r3, r0, r1, [r2]
        cmp r3, #0
        bne.n    .L___atomic_or_fetch_8_068
        dmb ish
        pop {r4, r5}
        bx  lr
	.size   _(__atomic_or_fetch_8), .-_(__atomic_or_fetch_8)

#endif
        .global _(__atomic_fetch_nand_1)
        .type   _(__atomic_fetch_nand_1), %function
_(__atomic_fetch_nand_1):
#ifdef __TINYC__
        .short 0xb95a
        .short 0xe8d0
        .short 0xea03
        .short 0x43d2
        .short 0xe8c0
        .short 0xf1bc
        .short 0xd1f5
        .short 0xb2d8
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d0
        .short 0xea03
        .short 0x43d2
        .short 0xe8c0
        .short 0xf1bc
        .short 0xd1f5
        .short 0xb2d8
        .short 0xf3bf
        .short 0x4770
#else
        cbnz    r2,  .L___atomic_fetch_nand_1_01a
.L___atomic_fetch_nand_1_002:
        ldrexb  r3, [r0]
        and.w   r2, r3, r1
        mvns    r2, r2
        strexb  ip, r2, [r0]
        cmp.w   ip, #0
        bne.n    .L___atomic_fetch_nand_1_002
        uxtb    r0, r3
        bx  lr
.L___atomic_fetch_nand_1_01a:
        dmb ish
.L___atomic_fetch_nand_1_01e:
        ldrexb  r3, [r0]
        and.w   r2, r3, r1
        mvns    r2, r2
        strexb  ip, r2, [r0]
        cmp.w   ip, #0
        bne.n    .L___atomic_fetch_nand_1_01e
        uxtb    r0, r3
        dmb ish
        bx  lr
	.size   _(__atomic_fetch_nand_1), .-_(__atomic_fetch_nand_1)

#endif
        .global _(__atomic_fetch_nand_2)
        .type   _(__atomic_fetch_nand_2), %function
_(__atomic_fetch_nand_2):
#ifdef __TINYC__
        .short 0xb95a
        .short 0xe8d0
        .short 0xea03
        .short 0x43d2
        .short 0xe8c0
        .short 0xf1bc
        .short 0xd1f5
        .short 0xb298
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d0
        .short 0xea03
        .short 0x43d2
        .short 0xe8c0
        .short 0xf1bc
        .short 0xd1f5
        .short 0xb298
        .short 0xf3bf
        .short 0x4770
#else
        cbnz    r2,  .L___atomic_fetch_nand_2_01a
.L___atomic_fetch_nand_2_002:
        ldrexh  r3, [r0]
        and.w   r2, r3, r1
        mvns    r2, r2
        strexh  ip, r2, [r0]
        cmp.w   ip, #0
        bne.n    .L___atomic_fetch_nand_2_002
        uxth    r0, r3
        bx  lr
.L___atomic_fetch_nand_2_01a:
        dmb ish
.L___atomic_fetch_nand_2_01e:
        ldrexh  r3, [r0]
        and.w   r2, r3, r1
        mvns    r2, r2
        strexh  ip, r2, [r0]
        cmp.w   ip, #0
        bne.n    .L___atomic_fetch_nand_2_01e
        uxth    r0, r3
        dmb ish
        bx  lr
	.size   _(__atomic_fetch_nand_2), .-_(__atomic_fetch_nand_2)

#endif
        .global _(__atomic_fetch_nand_4)
        .type   _(__atomic_fetch_nand_4), %function
_(__atomic_fetch_nand_4):
#ifdef __TINYC__
        .short 0x4603
        .short 0xb952
        .short 0xe853
        .short 0xea00
        .short 0x43d2
        .short 0xe843
        .short 0xf1bc
        .short 0xd1f5
        .short 0x4770
        .short 0xf3bf
        .short 0xe853
        .short 0xea00
        .short 0x43d2
        .short 0xe843
        .short 0xf1bc
        .short 0xd1f5
        .short 0xf3bf
        .short 0x4770
#else
        mov r3, r0
        cbnz    r2,  .L___atomic_fetch_nand_4_01a
.L___atomic_fetch_nand_4_004:
        ldrex   r0, [r3]
        and.w   r2, r0, r1
        mvns    r2, r2
        strex   ip, r2, [r3]
        cmp.w   ip, #0
        bne.n    .L___atomic_fetch_nand_4_004
        bx  lr
.L___atomic_fetch_nand_4_01a:
        dmb ish
.L___atomic_fetch_nand_4_01e:
        ldrex   r0, [r3]
        and.w   r2, r0, r1
        mvns    r2, r2
        strex   ip, r2, [r3]
        cmp.w   ip, #0
        bne.n    .L___atomic_fetch_nand_4_01e
        dmb ish
        bx  lr
	.size   _(__atomic_fetch_nand_4), .-_(__atomic_fetch_nand_4)

#endif
        .global _(__atomic_fetch_nand_8)
        .type   _(__atomic_fetch_nand_8), %function
_(__atomic_fetch_nand_8):
#ifdef __TINYC__
        .short 0xb4f0
        .short 0x4614
        .short 0x9904
        .short 0x4602
        .short 0x461d
        .short 0xb969
        .short 0xe8d2
        .short 0xea00
        .short 0xea01
        .short 0x43f6
        .short 0x43ff
        .short 0xe8c2
        .short 0x2b00
        .short 0xd1f3
        .short 0xbcf0
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d2
        .short 0xea00
        .short 0xea01
        .short 0x43f6
        .short 0x43ff
        .short 0xe8c2
        .short 0x2b00
        .short 0xd1f3
        .short 0xf3bf
        .short 0xbcf0
        .short 0x4770
#else
        push    {r4, r5, r6, r7}
        mov r4, r2
        ldr r1, [sp, #16]
        mov r2, r0
        mov r5, r3
        cbnz    r1,  .L___atomic_fetch_nand_8_028
.L___atomic_fetch_nand_8_00c:
        ldrexd  r0, r1, [r2]
        and.w   r6, r0, r4
        and.w   r7, r1, r5
        mvns    r6, r6
        mvns    r7, r7
        strexd  r3, r6, r7, [r2]
        cmp r3, #0
        bne.n    .L___atomic_fetch_nand_8_00c
        pop {r4, r5, r6, r7}
        bx  lr
.L___atomic_fetch_nand_8_028:
        dmb ish
.L___atomic_fetch_nand_8_02c:
        ldrexd  r0, r1, [r2]
        and.w   r6, r0, r4
        and.w   r7, r1, r5
        mvns    r6, r6
        mvns    r7, r7
        strexd  r3, r6, r7, [r2]
        cmp r3, #0
        bne.n    .L___atomic_fetch_nand_8_02c
        dmb ish
        pop {r4, r5, r6, r7}
        bx  lr
	.size   _(__atomic_fetch_nand_8), .-_(__atomic_fetch_nand_8)

#endif
        .global _(__atomic_nand_fetch_1)
        .type   _(__atomic_nand_fetch_1), %function
_(__atomic_nand_fetch_1):
#ifdef __TINYC__
        .short 0xb94a
        .short 0xe8d0
        .short 0x400b
        .short 0x43db
        .short 0xe8c0
        .short 0x2a00
        .short 0xd1f7
        .short 0xb2d8
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d0
        .short 0x400b
        .short 0x43db
        .short 0xe8c0
        .short 0x2a00
        .short 0xd1f7
        .short 0xb2d8
        .short 0xf3bf
        .short 0x4770
#else
        cbnz    r2,  .L___atomic_nand_fetch_1_052
.L___atomic_nand_fetch_1_03e:
        ldrexb  r3, [r0]
        ands    r3, r1
        mvns    r3, r3
        strexb  r2, r3, [r0]
        cmp r2, #0
        bne.n    .L___atomic_nand_fetch_1_03e
        uxtb    r0, r3
        bx  lr
.L___atomic_nand_fetch_1_052:
        dmb ish
.L___atomic_nand_fetch_1_056:
        ldrexb  r3, [r0]
        ands    r3, r1
        mvns    r3, r3
        strexb  r2, r3, [r0]
        cmp r2, #0
        bne.n    .L___atomic_nand_fetch_1_056
        uxtb    r0, r3
        dmb ish
        bx  lr
	.size   _(__atomic_nand_fetch_1), .-_(__atomic_nand_fetch_1)

#endif
        .global _(__atomic_nand_fetch_2)
        .type   _(__atomic_nand_fetch_2), %function
_(__atomic_nand_fetch_2):
#ifdef __TINYC__
        .short 0xb94a
        .short 0xe8d0
        .short 0x400b
        .short 0x43db
        .short 0xe8c0
        .short 0x2a00
        .short 0xd1f7
        .short 0xb298
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d0
        .short 0x400b
        .short 0x43db
        .short 0xe8c0
        .short 0x2a00
        .short 0xd1f7
        .short 0xb298
        .short 0xf3bf
        .short 0x4770
#else
        cbnz    r2,  .L___atomic_nand_fetch_2_052
.L___atomic_nand_fetch_2_03e:
        ldrexh  r3, [r0]
        ands    r3, r1
        mvns    r3, r3
        strexh  r2, r3, [r0]
        cmp r2, #0
        bne.n    .L___atomic_nand_fetch_2_03e
        uxth    r0, r3
        bx  lr
.L___atomic_nand_fetch_2_052:
        dmb ish
.L___atomic_nand_fetch_2_056:
        ldrexh  r3, [r0]
        ands    r3, r1
        mvns    r3, r3
        strexh  r2, r3, [r0]
        cmp r2, #0
        bne.n    .L___atomic_nand_fetch_2_056
        uxth    r0, r3
        dmb ish
        bx  lr
	.size   _(__atomic_nand_fetch_2), .-_(__atomic_nand_fetch_2)

#endif
        .global _(__atomic_nand_fetch_4)
        .type   _(__atomic_nand_fetch_4), %function
_(__atomic_nand_fetch_4):
#ifdef __TINYC__
        .short 0x4603
        .short 0xb942
        .short 0xe853
        .short 0x4008
        .short 0x43c0
        .short 0xe843
        .short 0x2a00
        .short 0xd1f7
        .short 0x4770
        .short 0xf3bf
        .short 0xe853
        .short 0x4008
        .short 0x43c0
        .short 0xe843
        .short 0x2a00
        .short 0xd1f7
        .short 0xf3bf
        .short 0x4770
#else
        mov r3, r0
        cbnz    r2,  .L___atomic_nand_fetch_4_04e
.L___atomic_nand_fetch_4_03c:
        ldrex   r0, [r3]
        ands    r0, r1
        mvns    r0, r0
        strex   r2, r0, [r3]
        cmp r2, #0
        bne.n    .L___atomic_nand_fetch_4_03c
        bx  lr
.L___atomic_nand_fetch_4_04e:
        dmb ish
.L___atomic_nand_fetch_4_052:
        ldrex   r0, [r3]
        ands    r0, r1
        mvns    r0, r0
        strex   r2, r0, [r3]
        cmp r2, #0
        bne.n    .L___atomic_nand_fetch_4_052
        dmb ish
        bx  lr
	.size   _(__atomic_nand_fetch_4), .-_(__atomic_nand_fetch_4)

#endif
        .global _(__atomic_nand_fetch_8)
        .type   _(__atomic_nand_fetch_8), %function
_(__atomic_nand_fetch_8):
#ifdef __TINYC__
        .short 0xb430
        .short 0x4614
        .short 0x9902
        .short 0x4602
        .short 0x461d
        .short 0xb959
        .short 0xe8d2
        .short 0x4020
        .short 0x4029
        .short 0x43c0
        .short 0x43c9
        .short 0xe8c2
        .short 0x2b00
        .short 0xd1f5
        .short 0xbc30
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d2
        .short 0x4020
        .short 0x4029
        .short 0x43c0
        .short 0x43c9
        .short 0xe8c2
        .short 0x2b00
        .short 0xd1f5
        .short 0xf3bf
        .short 0xbc30
        .short 0x4770
#else
        push    {r4, r5}
        mov r4, r2
        ldr r1, [sp, #8]
        mov r2, r0
        mov r5, r3
        cbnz    r1,  .L___atomic_nand_fetch_8_070
.L___atomic_nand_fetch_8_058:
        ldrexd  r0, r1, [r2]
        ands    r0, r4
        ands    r1, r5
        mvns    r0, r0
        mvns    r1, r1
        strexd  r3, r0, r1, [r2]
        cmp r3, #0
        bne.n    .L___atomic_nand_fetch_8_058
        pop {r4, r5}
        bx  lr
.L___atomic_nand_fetch_8_070:
        dmb ish
.L___atomic_nand_fetch_8_074:
        ldrexd  r0, r1, [r2]
        ands    r0, r4
        ands    r1, r5
        mvns    r0, r0
        mvns    r1, r1
        strexd  r3, r0, r1, [r2]
        cmp r3, #0
        bne.n    .L___atomic_nand_fetch_8_074
        dmb ish
        pop {r4, r5}
        bx  lr
	.size   _(__atomic_nand_fetch_8), .-_(__atomic_nand_fetch_8)

#endif
        .global _(__atomic_fetch_xor_1)
        .type   _(__atomic_fetch_xor_1), %function
_(__atomic_fetch_xor_1):
#ifdef __TINYC__
        .short 0xb952
        .short 0xe8d0
        .short 0xea83
        .short 0xe8c0
        .short 0xf1bc
        .short 0xd1f6
        .short 0xb2d8
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d0
        .short 0xea83
        .short 0xe8c0
        .short 0xf1bc
        .short 0xd1f6
        .short 0xb2d8
        .short 0xf3bf
        .short 0x4770
#else
        cbnz    r2,  .L___atomic_fetch_xor_1_018
.L___atomic_fetch_xor_1_002:
        ldrexb  r3, [r0]
        eor.w   r2, r3, r1
        strexb  ip, r2, [r0]
        cmp.w   ip, #0
        bne.n    .L___atomic_fetch_xor_1_002
        uxtb    r0, r3
        bx  lr
.L___atomic_fetch_xor_1_018:
        dmb ish
.L___atomic_fetch_xor_1_01c:
        ldrexb  r3, [r0]
        eor.w   r2, r3, r1
        strexb  ip, r2, [r0]
        cmp.w   ip, #0
        bne.n    .L___atomic_fetch_xor_1_01c
        uxtb    r0, r3
        dmb ish
        bx  lr
	.size   _(__atomic_fetch_xor_1), .-_(__atomic_fetch_xor_1)

#endif
        .global _(__atomic_fetch_xor_2)
        .type   _(__atomic_fetch_xor_2), %function
_(__atomic_fetch_xor_2):
#ifdef __TINYC__
        .short 0xb952
        .short 0xe8d0
        .short 0xea83
        .short 0xe8c0
        .short 0xf1bc
        .short 0xd1f6
        .short 0xb298
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d0
        .short 0xea83
        .short 0xe8c0
        .short 0xf1bc
        .short 0xd1f6
        .short 0xb298
        .short 0xf3bf
        .short 0x4770
#else
        cbnz    r2,  .L___atomic_fetch_xor_2_018
.L___atomic_fetch_xor_2_002:
        ldrexh  r3, [r0]
        eor.w   r2, r3, r1
        strexh  ip, r2, [r0]
        cmp.w   ip, #0
        bne.n    .L___atomic_fetch_xor_2_002
        uxth    r0, r3
        bx  lr
.L___atomic_fetch_xor_2_018:
        dmb ish
.L___atomic_fetch_xor_2_01c:
        ldrexh  r3, [r0]
        eor.w   r2, r3, r1
        strexh  ip, r2, [r0]
        cmp.w   ip, #0
        bne.n    .L___atomic_fetch_xor_2_01c
        uxth    r0, r3
        dmb ish
        bx  lr
	.size   _(__atomic_fetch_xor_2), .-_(__atomic_fetch_xor_2)

#endif
        .global _(__atomic_fetch_xor_4)
        .type   _(__atomic_fetch_xor_4), %function
_(__atomic_fetch_xor_4):
#ifdef __TINYC__
        .short 0x4603
        .short 0xb94a
        .short 0xe853
        .short 0xea80
        .short 0xe843
        .short 0xf1bc
        .short 0xd1f6
        .short 0x4770
        .short 0xf3bf
        .short 0xe853
        .short 0xea80
        .short 0xe843
        .short 0xf1bc
        .short 0xd1f6
        .short 0xf3bf
        .short 0x4770
#else
        mov r3, r0
        cbnz    r2,  .L___atomic_fetch_xor_4_018
.L___atomic_fetch_xor_4_004:
        ldrex   r0, [r3]
        eor.w   r2, r0, r1
        strex   ip, r2, [r3]
        cmp.w   ip, #0
        bne.n    .L___atomic_fetch_xor_4_004
        bx  lr
.L___atomic_fetch_xor_4_018:
        dmb ish
.L___atomic_fetch_xor_4_01c:
        ldrex   r0, [r3]
        eor.w   r2, r0, r1
        strex   ip, r2, [r3]
        cmp.w   ip, #0
        bne.n    .L___atomic_fetch_xor_4_01c
        dmb ish
        bx  lr
	.size   _(__atomic_fetch_xor_4), .-_(__atomic_fetch_xor_4)

#endif
        .global _(__atomic_fetch_xor_8)
        .type   _(__atomic_fetch_xor_8), %function
_(__atomic_fetch_xor_8):
#ifdef __TINYC__
        .short 0xb4f0
        .short 0x4614
        .short 0x9904
        .short 0x4602
        .short 0x461d
        .short 0xb959
        .short 0xe8d2
        .short 0xea80
        .short 0xea81
        .short 0xe8c2
        .short 0x2b00
        .short 0xd1f5
        .short 0xbcf0
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d2
        .short 0xea80
        .short 0xea81
        .short 0xe8c2
        .short 0x2b00
        .short 0xd1f5
        .short 0xf3bf
        .short 0xbcf0
        .short 0x4770
#else
        push    {r4, r5, r6, r7}
        mov r4, r2
        ldr r1, [sp, #16]
        mov r2, r0
        mov r5, r3
        cbnz    r1,  .L___atomic_fetch_xor_8_024
.L___atomic_fetch_xor_8_00c:
        ldrexd  r0, r1, [r2]
        eor.w   r6, r0, r4
        eor.w   r7, r1, r5
        strexd  r3, r6, r7, [r2]
        cmp r3, #0
        bne.n    .L___atomic_fetch_xor_8_00c
        pop {r4, r5, r6, r7}
        bx  lr
.L___atomic_fetch_xor_8_024:
        dmb ish
.L___atomic_fetch_xor_8_028:
        ldrexd  r0, r1, [r2]
        eor.w   r6, r0, r4
        eor.w   r7, r1, r5
        strexd  r3, r6, r7, [r2]
        cmp r3, #0
        bne.n    .L___atomic_fetch_xor_8_028
        dmb ish
        pop {r4, r5, r6, r7}
        bx  lr
	.size   _(__atomic_fetch_xor_8), .-_(__atomic_fetch_xor_8)

#endif
        .global _(__atomic_xor_fetch_1)
        .type   _(__atomic_xor_fetch_1), %function
_(__atomic_xor_fetch_1):
#ifdef __TINYC__
        .short 0xb942
        .short 0xe8d0
        .short 0x404b
        .short 0xe8c0
        .short 0x2a00
        .short 0xd1f8
        .short 0xb2d8
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d0
        .short 0x404b
        .short 0xe8c0
        .short 0x2a00
        .short 0xd1f8
        .short 0xb2d8
        .short 0xf3bf
        .short 0x4770
#else
        cbnz    r2,  .L___atomic_xor_fetch_1_04c
.L___atomic_xor_fetch_1_03a:
        ldrexb  r3, [r0]
        eors    r3, r1
        strexb  r2, r3, [r0]
        cmp r2, #0
        bne.n    .L___atomic_xor_fetch_1_03a
        uxtb    r0, r3
        bx  lr
.L___atomic_xor_fetch_1_04c:
        dmb ish
.L___atomic_xor_fetch_1_050:
        ldrexb  r3, [r0]
        eors    r3, r1
        strexb  r2, r3, [r0]
        cmp r2, #0
        bne.n    .L___atomic_xor_fetch_1_050
        uxtb    r0, r3
        dmb ish
        bx  lr
	.size   _(__atomic_xor_fetch_1), .-_(__atomic_xor_fetch_1)

#endif
        .global _(__atomic_xor_fetch_2)
        .type   _(__atomic_xor_fetch_2), %function
_(__atomic_xor_fetch_2):
#ifdef __TINYC__
        .short 0xb942
        .short 0xe8d0
        .short 0x404b
        .short 0xe8c0
        .short 0x2a00
        .short 0xd1f8
        .short 0xb298
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d0
        .short 0x404b
        .short 0xe8c0
        .short 0x2a00
        .short 0xd1f8
        .short 0xb298
        .short 0xf3bf
        .short 0x4770
#else
        cbnz    r2,  .L___atomic_xor_fetch_2_04c
.L___atomic_xor_fetch_2_03a:
        ldrexh  r3, [r0]
        eors    r3, r1
        strexh  r2, r3, [r0]
        cmp r2, #0
        bne.n    .L___atomic_xor_fetch_2_03a
        uxth    r0, r3
        bx  lr
.L___atomic_xor_fetch_2_04c:
        dmb ish
.L___atomic_xor_fetch_2_050:
        ldrexh  r3, [r0]
        eors    r3, r1
        strexh  r2, r3, [r0]
        cmp r2, #0
        bne.n    .L___atomic_xor_fetch_2_050
        uxth    r0, r3
        dmb ish
        bx  lr
	.size   _(__atomic_xor_fetch_2), .-_(__atomic_xor_fetch_2)

#endif
        .global _(__atomic_xor_fetch_4)
        .type   _(__atomic_xor_fetch_4), %function
_(__atomic_xor_fetch_4):
#ifdef __TINYC__
        .short 0x4603
        .short 0xb93a
        .short 0xe853
        .short 0x4048
        .short 0xe843
        .short 0x2a00
        .short 0xd1f8
        .short 0x4770
        .short 0xf3bf
        .short 0xe853
        .short 0x4048
        .short 0xe843
        .short 0x2a00
        .short 0xd1f8
        .short 0xf3bf
        .short 0x4770
#else
        mov r3, r0
        cbnz    r2,  .L___atomic_xor_fetch_4_048
.L___atomic_xor_fetch_4_038:
        ldrex   r0, [r3]
        eors    r0, r1
        strex   r2, r0, [r3]
        cmp r2, #0
        bne.n    .L___atomic_xor_fetch_4_038
        bx  lr
.L___atomic_xor_fetch_4_048:
        dmb ish
.L___atomic_xor_fetch_4_04c:
        ldrex   r0, [r3]
        eors    r0, r1
        strex   r2, r0, [r3]
        cmp r2, #0
        bne.n    .L___atomic_xor_fetch_4_04c
        dmb ish
        bx  lr
	.size   _(__atomic_xor_fetch_4), .-_(__atomic_xor_fetch_4)

#endif
        .global _(__atomic_xor_fetch_8)
        .type   _(__atomic_xor_fetch_8), %function
_(__atomic_xor_fetch_8):
#ifdef __TINYC__
        .short 0xb430
        .short 0x4614
        .short 0x9902
        .short 0x4602
        .short 0x461d
        .short 0xb949
        .short 0xe8d2
        .short 0x4060
        .short 0x4069
        .short 0xe8c2
        .short 0x2b00
        .short 0xd1f7
        .short 0xbc30
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d2
        .short 0x4060
        .short 0x4069
        .short 0xe8c2
        .short 0x2b00
        .short 0xd1f7
        .short 0xf3bf
        .short 0xbc30
        .short 0x4770
#else
        push    {r4, r5}
        mov r4, r2
        ldr r1, [sp, #8]
        mov r2, r0
        mov r5, r3
        cbnz    r1,  .L___atomic_xor_fetch_8_064
.L___atomic_xor_fetch_8_050:
        ldrexd  r0, r1, [r2]
        eors    r0, r4
        eors    r1, r5
        strexd  r3, r0, r1, [r2]
        cmp r3, #0
        bne.n    .L___atomic_xor_fetch_8_050
        pop {r4, r5}
        bx  lr
.L___atomic_xor_fetch_8_064:
        dmb ish
.L___atomic_xor_fetch_8_068:
        ldrexd  r0, r1, [r2]
        eors    r0, r4
        eors    r1, r5
        strexd  r3, r0, r1, [r2]
        cmp r3, #0
        bne.n    .L___atomic_xor_fetch_8_068
        dmb ish
        pop {r4, r5}
        bx  lr
	.size   _(__atomic_xor_fetch_8), .-_(__atomic_xor_fetch_8)

#endif
        .global _(__atomic_test_and_set_1)
        .type   _(__atomic_test_and_set_1), %function
_(__atomic_test_and_set_1):
#ifdef __TINYC__
        .short 0xf04f
        .short 0xb939
        .short 0xe8d0
        .short 0xe8c0
        .short 0x2900
        .short 0xd1f9
        .short 0xb2d8
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d0
        .short 0xe8c0
        .short 0x2900
        .short 0xd1f9
        .short 0xb2d8
        .short 0xf3bf
        .short 0x4770
#else
        mov.w   r2, #1
        cbnz    r1,  .L___atomic_test_and_set_1_016
.L___atomic_test_and_set_1_006:
        ldrexb  r3, [r0]
        strexb  r1, r2, [r0]
        cmp r1, #0
        bne.n    .L___atomic_test_and_set_1_006
        uxtb    r0, r3
        bx  lr
.L___atomic_test_and_set_1_016:
        dmb ish
.L___atomic_test_and_set_1_01a:
        ldrexb  r3, [r0]
        strexb  r1, r2, [r0]
        cmp r1, #0
        bne.n    .L___atomic_test_and_set_1_01a
        uxtb    r0, r3
        dmb ish
        bx  lr
	.size   _(__atomic_test_and_set_1), .-_(__atomic_test_and_set_1)

#endif
        .global _(__atomic_test_and_set_2)
        .type   _(__atomic_test_and_set_2), %function
_(__atomic_test_and_set_2):
#ifdef __TINYC__
        .short 0xf04f
        .short 0xb939
        .short 0xe8d0
        .short 0xe8c0
        .short 0x2900
        .short 0xd1f9
        .short 0xb2d8
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d0
        .short 0xe8c0
        .short 0x2900
        .short 0xd1f9
        .short 0xb2d8
        .short 0xf3bf
        .short 0x4770
#else
        mov.w   r2, #1
        cbnz    r1,  .L___atomic_test_and_set_2_016
.L___atomic_test_and_set_2_006:
        ldrexb  r3, [r0]
        strexb  r1, r2, [r0]
        cmp r1, #0
        bne.n    .L___atomic_test_and_set_2_006
        uxtb    r0, r3
        bx  lr
.L___atomic_test_and_set_2_016:
        dmb ish
.L___atomic_test_and_set_2_01a:
        ldrexb  r3, [r0]
        strexb  r1, r2, [r0]
        cmp r1, #0
        bne.n    .L___atomic_test_and_set_2_01a
        uxtb    r0, r3
        dmb ish
        bx  lr
	.size   _(__atomic_test_and_set_2), .-_(__atomic_test_and_set_2)

#endif
        .global _(__atomic_test_and_set_4)
        .type   _(__atomic_test_and_set_4), %function
_(__atomic_test_and_set_4):
#ifdef __TINYC__
        .short 0xf04f
        .short 0xb939
        .short 0xe8d0
        .short 0xe8c0
        .short 0x2900
        .short 0xd1f9
        .short 0xb2d8
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d0
        .short 0xe8c0
        .short 0x2900
        .short 0xd1f9
        .short 0xb2d8
        .short 0xf3bf
        .short 0x4770
#else
        mov.w   r2, #1
        cbnz    r1,  .L___atomic_test_and_set_4_016
.L___atomic_test_and_set_4_006:
        ldrexb  r3, [r0]
        strexb  r1, r2, [r0]
        cmp r1, #0
        bne.n    .L___atomic_test_and_set_4_006
        uxtb    r0, r3
        bx  lr
.L___atomic_test_and_set_4_016:
        dmb ish
.L___atomic_test_and_set_4_01a:
        ldrexb  r3, [r0]
        strexb  r1, r2, [r0]
        cmp r1, #0
        bne.n    .L___atomic_test_and_set_4_01a
        uxtb    r0, r3
        dmb ish
        bx  lr
	.size   _(__atomic_test_and_set_4), .-_(__atomic_test_and_set_4)

#endif
        .global _(__atomic_test_and_set_8)
        .type   _(__atomic_test_and_set_8), %function
_(__atomic_test_and_set_8):
#ifdef __TINYC__
        .short 0xf04f
        .short 0xb939
        .short 0xe8d0
        .short 0xe8c0
        .short 0x2900
        .short 0xd1f9
        .short 0xb2d8
        .short 0x4770
        .short 0xf3bf
        .short 0xe8d0
        .short 0xe8c0
        .short 0x2900
        .short 0xd1f9
        .short 0xb2d8
        .short 0xf3bf
        .short 0x4770
#else
        mov.w   r2, #1
        cbnz    r1,  .L___atomic_test_and_set_8_016
.L___atomic_test_and_set_8_006:
        ldrexb  r3, [r0]
        strexb  r1, r2, [r0]
        cmp r1, #0
        bne.n    .L___atomic_test_and_set_8_006
        uxtb    r0, r3
        bx  lr
.L___atomic_test_and_set_8_016:
        dmb ish
.L___atomic_test_and_set_8_01a:
        ldrexb  r3, [r0]
        strexb  r1, r2, [r0]
        cmp r1, #0
        bne.n    .L___atomic_test_and_set_8_01a
        uxtb    r0, r3
        dmb ish
        bx  lr
	.size   _(__atomic_test_and_set_8), .-_(__atomic_test_and_set_8)

#endif
        .global _(atomic_thread_fence)
        .type   _(atomic_thread_fence), %function
_(atomic_thread_fence):
#ifdef __TINYC__
        .short 0xf3bf
        .short 0x4770
#else
        dmb ish
        bx  lr
	.size   _(atomic_thread_fence), .-_(atomic_thread_fence)

#endif
        .global _(atomic_signal_fence)
        .type   _(atomic_signal_fence), %function
_(atomic_signal_fence):
#ifdef __TINYC__
        .short 0x4770
#else
        bx  lr
	.size   _(atomic_signal_fence), .-_(atomic_signal_fence)

#endif
        .global _(atomic_flag_test_and_set)
        .type   _(atomic_flag_test_and_set), %function
_(atomic_flag_test_and_set):
#ifdef __TINYC__
        .short 0xf04f
        .short 0xf3bf
        .short 0xe8d0
        .short 0xe8c0
        .short 0x2900
        .short 0xd1f9
        .short 0xb2d8
        .short 0xf3bf
        .short 0x4770
#else
        mov.w   r2, #1
        dmb ish
.L_atomic_flag_test_and_set_008:
        ldrexb  r3, [r0]
        strexb  r1, r2, [r0]
        cmp r1, #0
        bne.n    .L_atomic_flag_test_and_set_008
        uxtb    r0, r3
        dmb ish
        bx  lr
	.size   _(atomic_flag_test_and_set), .-_(atomic_flag_test_and_set)

#endif
        .global _(atomic_flag_test_and_set_explicit)
        .type   _(atomic_flag_test_and_set_explicit), %function
_(atomic_flag_test_and_set_explicit):
#ifdef __TINYC__
        .short 0xf04f
        .short 0xf3bf
        .short 0xe8d0
        .short 0xe8c0
        .short 0x2900
        .short 0xd1f9
        .short 0xb2d8
        .short 0xf3bf
        .short 0x4770
#else
        mov.w   r2, #1
        dmb ish
.L_atomic_flag_test_and_set_explicit_024:
        ldrexb  r3, [r0]
        strexb  r1, r2, [r0]
        cmp r1, #0
        bne.n    .L_atomic_flag_test_and_set_explicit_024
        uxtb    r0, r3
        dmb ish
        bx  lr
	.size   _(atomic_flag_test_and_set_explicit), .-_(atomic_flag_test_and_set_explicit)

#endif
        .global _(atomic_flag_clear)
        .type   _(atomic_flag_clear), %function
_(atomic_flag_clear):
#ifdef __TINYC__
        .short 0x2300
        .short 0xf3bf
        .short 0x7003
        .short 0xf3bf
        .short 0x4770
#else
        movs    r3, #0
        dmb ish
        strb    r3, [r0, #0]
        dmb ish
        bx  lr
	.size   _(atomic_flag_clear), .-_(atomic_flag_clear)

#endif
        .global _(atomic_flag_clear_explicit)
        .type   _(atomic_flag_clear_explicit), %function
_(atomic_flag_clear_explicit):
#ifdef __TINYC__
        .short 0x2300
        .short 0xf3bf
        .short 0x7003
        .short 0xf3bf
        .short 0x4770
#else
        movs    r3, #0
        dmb ish
        strb    r3, [r0, #0]
        dmb ish
        bx  lr
	.size   _(atomic_flag_clear_explicit), .-_(atomic_flag_clear_explicit)

#endif
#endif //__arm__

/* ---------------------------------------------- */
#if defined __aarch64__
        .text
        .align  2

        .global _(__atomic_load_1)
        .type   _(__atomic_load_1), %function
_(__atomic_load_1):
#ifdef __TINYC__
        .int 0x35000081
        .int 0x39400000
        .int 0x12001c00
        .int 0xd65f03c0
        .int 0x08dffc00
        .int 0x12001c00
        .int 0xd65f03c0
#else
        cbnz    w1,  .L___atomic_load_1_010
        ldrb    w0, [x0]
        and w0, w0, #0xff
        ret
.L___atomic_load_1_010:
        ldarb   w0, [x0]
        and w0, w0, #0xff
        ret
	.size   _(__atomic_load_1), .-_(__atomic_load_1)

#endif
        .global _(__atomic_load_2)
        .type   _(__atomic_load_2), %function
_(__atomic_load_2):
#ifdef __TINYC__
        .int 0x35000081
        .int 0x79400000
        .int 0x12003c00
        .int 0xd65f03c0
        .int 0x48dffc00
        .int 0x12003c00
        .int 0xd65f03c0
#else
        cbnz    w1,  .L___atomic_load_2_010
        ldrh    w0, [x0]
        and w0, w0, #0xffff
        ret
.L___atomic_load_2_010:
        ldarh   w0, [x0]
        and w0, w0, #0xffff
        ret
	.size   _(__atomic_load_2), .-_(__atomic_load_2)

#endif
        .global _(__atomic_load_4)
        .type   _(__atomic_load_4), %function
_(__atomic_load_4):
#ifdef __TINYC__
        .int 0x35000061
        .int 0xb9400000
        .int 0xd65f03c0
        .int 0x88dffc00
        .int 0xd65f03c0
#else
        cbnz    w1,  .L___atomic_load_4_00c
        ldr w0, [x0]
        ret
.L___atomic_load_4_00c:
        ldar    w0, [x0]
        ret
	.size   _(__atomic_load_4), .-_(__atomic_load_4)

#endif
        .global _(__atomic_load_8)
        .type   _(__atomic_load_8), %function
_(__atomic_load_8):
#ifdef __TINYC__
        .int 0x35000061
        .int 0xf9400000
        .int 0xd65f03c0
        .int 0xc8dffc00
        .int 0xd65f03c0
#else
        cbnz    w1,  .L___atomic_load_8_00c
        ldr x0, [x0]
        ret
.L___atomic_load_8_00c:
        ldar    x0, [x0]
        ret
	.size   _(__atomic_load_8), .-_(__atomic_load_8)

#endif
        .global _(__atomic_store_1)
        .type   _(__atomic_store_1), %function
_(__atomic_store_1):
#ifdef __TINYC__
        .int 0x12001c21
        .int 0x35000062
        .int 0x39000001
        .int 0xd65f03c0
        .int 0x089ffc01
        .int 0xd65f03c0
#else
        and w1, w1, #0xff
        cbnz    w2,  .L___atomic_store_1_010
        strb    w1, [x0]
        ret
.L___atomic_store_1_010:
        stlrb   w1, [x0]
        ret
	.size   _(__atomic_store_1), .-_(__atomic_store_1)

#endif
        .global _(__atomic_store_2)
        .type   _(__atomic_store_2), %function
_(__atomic_store_2):
#ifdef __TINYC__
        .int 0x12003c21
        .int 0x35000062
        .int 0x79000001
        .int 0xd65f03c0
        .int 0x489ffc01
        .int 0xd65f03c0
#else
        and w1, w1, #0xffff
        cbnz    w2,  .L___atomic_store_2_010
        strh    w1, [x0]
        ret
.L___atomic_store_2_010:
        stlrh   w1, [x0]
        ret
	.size   _(__atomic_store_2), .-_(__atomic_store_2)

#endif
        .global _(__atomic_store_4)
        .type   _(__atomic_store_4), %function
_(__atomic_store_4):
#ifdef __TINYC__
        .int 0x35000062
        .int 0xb9000001
        .int 0xd65f03c0
        .int 0x889ffc01
        .int 0xd65f03c0
#else
        cbnz    w2,  .L___atomic_store_4_00c
        str w1, [x0]
        ret
.L___atomic_store_4_00c:
        stlr    w1, [x0]
        ret
	.size   _(__atomic_store_4), .-_(__atomic_store_4)

#endif
        .global _(__atomic_store_8)
        .type   _(__atomic_store_8), %function
_(__atomic_store_8):
#ifdef __TINYC__
        .int 0x35000062
        .int 0xf9000001
        .int 0xd65f03c0
        .int 0xc89ffc01
        .int 0xd65f03c0
#else
        cbnz    w2,  .L___atomic_store_8_00c
        str x1, [x0]
        ret
.L___atomic_store_8_00c:
        stlr    x1, [x0]
        ret
	.size   _(__atomic_store_8), .-_(__atomic_store_8)

#endif
        .global _(__atomic_compare_exchange_1)
        .type   _(__atomic_compare_exchange_1), %function
_(__atomic_compare_exchange_1):
#ifdef __TINYC__
        .int 0x12001c42
        .int 0x35000143
        .int 0x39400023
        .int 0x085f7c04
        .int 0x6b23009f
        .int 0x54000061
        .int 0x08057c02
        .int 0x35ffff85
        .int 0x1a9f17e0
        .int 0x54000141
        .int 0xd65f03c0
        .int 0x39400023
        .int 0x085ffc04
        .int 0x6b23009f
        .int 0x54000061
        .int 0x0805fc02
        .int 0x35ffff85
        .int 0x1a9f17e0
        .int 0x54ffff00
        .int 0x39000024
        .int 0xd65f03c0
#else
        and w2, w2, #0xff
        cbnz    w3,  .L___atomic_compare_exchange_1_02c
        ldrb    w3, [x1]
.L___atomic_compare_exchange_1_00c:
        ldxrb   w4, [x0]
        cmp w4, w3, uxtb
        b.ne     .L___atomic_compare_exchange_1_020
        stxrb   w5, w2, [x0]
        cbnz    w5,  .L___atomic_compare_exchange_1_00c
.L___atomic_compare_exchange_1_020:
        cset    w0, eq  // eq = none
        b.ne     .L___atomic_compare_exchange_1_04c
.L___atomic_compare_exchange_1_028:
        ret
.L___atomic_compare_exchange_1_02c:
        ldrb    w3, [x1]
.L___atomic_compare_exchange_1_030:
        ldaxrb  w4, [x0]
        cmp w4, w3, uxtb
        b.ne     .L___atomic_compare_exchange_1_044
        stlxrb  w5, w2, [x0]
        cbnz    w5,  .L___atomic_compare_exchange_1_030
.L___atomic_compare_exchange_1_044:
        cset    w0, eq  // eq = none
        b.eq     .L___atomic_compare_exchange_1_028
.L___atomic_compare_exchange_1_04c:
        strb    w4, [x1]
        ret
	.size   _(__atomic_compare_exchange_1), .-_(__atomic_compare_exchange_1)

#endif
        .global _(__atomic_compare_exchange_2)
        .type   _(__atomic_compare_exchange_2), %function
_(__atomic_compare_exchange_2):
#ifdef __TINYC__
        .int 0x12003c42
        .int 0x35000143
        .int 0x79400023
        .int 0x485f7c04
        .int 0x6b23209f
        .int 0x54000061
        .int 0x48057c02
        .int 0x35ffff85
        .int 0x1a9f17e0
        .int 0x54000141
        .int 0xd65f03c0
        .int 0x79400023
        .int 0x485ffc04
        .int 0x6b23209f
        .int 0x54000061
        .int 0x4805fc02
        .int 0x35ffff85
        .int 0x1a9f17e0
        .int 0x54ffff00
        .int 0x79000024
        .int 0xd65f03c0
#else
        and w2, w2, #0xffff
        cbnz    w3,  .L___atomic_compare_exchange_2_02c
        ldrh    w3, [x1]
.L___atomic_compare_exchange_2_00c:
        ldxrh   w4, [x0]
        cmp w4, w3, uxth
        b.ne     .L___atomic_compare_exchange_2_020
        stxrh   w5, w2, [x0]
        cbnz    w5,  .L___atomic_compare_exchange_2_00c
.L___atomic_compare_exchange_2_020:
        cset    w0, eq  // eq = none
        b.ne     .L___atomic_compare_exchange_2_04c
.L___atomic_compare_exchange_2_028:
        ret
.L___atomic_compare_exchange_2_02c:
        ldrh    w3, [x1]
.L___atomic_compare_exchange_2_030:
        ldaxrh  w4, [x0]
        cmp w4, w3, uxth
        b.ne     .L___atomic_compare_exchange_2_044
        stlxrh  w5, w2, [x0]
        cbnz    w5,  .L___atomic_compare_exchange_2_030
.L___atomic_compare_exchange_2_044:
        cset    w0, eq  // eq = none
        b.eq     .L___atomic_compare_exchange_2_028
.L___atomic_compare_exchange_2_04c:
        strh    w4, [x1]
        ret
	.size   _(__atomic_compare_exchange_2), .-_(__atomic_compare_exchange_2)

#endif
        .global _(__atomic_compare_exchange_4)
        .type   _(__atomic_compare_exchange_4), %function
_(__atomic_compare_exchange_4):
#ifdef __TINYC__
        .int 0x35000143
        .int 0xb9400023
        .int 0x885f7c04
        .int 0x6b03009f
        .int 0x54000061
        .int 0x88057c02
        .int 0x35ffff85
        .int 0x1a9f17e0
        .int 0x54000141
        .int 0xd65f03c0
        .int 0xb9400023
        .int 0x885ffc04
        .int 0x6b03009f
        .int 0x54000061
        .int 0x8805fc02
        .int 0x35ffff85
        .int 0x1a9f17e0
        .int 0x54ffff00
        .int 0xb9000024
        .int 0xd65f03c0
#else
        cbnz    w3,  .L___atomic_compare_exchange_4_028
        ldr w3, [x1]
.L___atomic_compare_exchange_4_008:
        ldxr    w4, [x0]
        cmp w4, w3
        b.ne     .L___atomic_compare_exchange_4_01c
        stxr    w5, w2, [x0]
        cbnz    w5,  .L___atomic_compare_exchange_4_008
.L___atomic_compare_exchange_4_01c:
        cset    w0, eq  // eq = none
        b.ne     .L___atomic_compare_exchange_4_048
.L___atomic_compare_exchange_4_024:
        ret
.L___atomic_compare_exchange_4_028:
        ldr w3, [x1]
.L___atomic_compare_exchange_4_02c:
        ldaxr   w4, [x0]
        cmp w4, w3
        b.ne     .L___atomic_compare_exchange_4_040
        stlxr   w5, w2, [x0]
        cbnz    w5,  .L___atomic_compare_exchange_4_02c
.L___atomic_compare_exchange_4_040:
        cset    w0, eq  // eq = none
        b.eq     .L___atomic_compare_exchange_4_024
.L___atomic_compare_exchange_4_048:
        str w4, [x1]
        ret
	.size   _(__atomic_compare_exchange_4), .-_(__atomic_compare_exchange_4)

#endif
        .global _(__atomic_compare_exchange_8)
        .type   _(__atomic_compare_exchange_8), %function
_(__atomic_compare_exchange_8):
#ifdef __TINYC__
        .int 0x35000143
        .int 0xf9400023
        .int 0xc85f7c04
        .int 0xeb03009f
        .int 0x54000061
        .int 0xc8057c02
        .int 0x35ffff85
        .int 0x1a9f17e0
        .int 0x54000141
        .int 0xd65f03c0
        .int 0xf9400023
        .int 0xc85ffc04
        .int 0xeb03009f
        .int 0x54000061
        .int 0xc805fc02
        .int 0x35ffff85
        .int 0x1a9f17e0
        .int 0x54ffff00
        .int 0xf9000024
        .int 0xd65f03c0
#else
        cbnz    w3,  .L___atomic_compare_exchange_8_028
        ldr x3, [x1]
.L___atomic_compare_exchange_8_008:
        ldxr    x4, [x0]
        cmp x4, x3
        b.ne     .L___atomic_compare_exchange_8_01c
        stxr    w5, x2, [x0]
        cbnz    w5,  .L___atomic_compare_exchange_8_008
.L___atomic_compare_exchange_8_01c:
        cset    w0, eq  // eq = none
        b.ne     .L___atomic_compare_exchange_8_048
.L___atomic_compare_exchange_8_024:
        ret
.L___atomic_compare_exchange_8_028:
        ldr x3, [x1]
.L___atomic_compare_exchange_8_02c:
        ldaxr   x4, [x0]
        cmp x4, x3
        b.ne     .L___atomic_compare_exchange_8_040
        stlxr   w5, x2, [x0]
        cbnz    w5,  .L___atomic_compare_exchange_8_02c
.L___atomic_compare_exchange_8_040:
        cset    w0, eq  // eq = none
        b.eq     .L___atomic_compare_exchange_8_024
.L___atomic_compare_exchange_8_048:
        str x4, [x1]
        ret
	.size   _(__atomic_compare_exchange_8), .-_(__atomic_compare_exchange_8)

#endif
        .global _(__atomic_exchange_1)
        .type   _(__atomic_exchange_1), %function
_(__atomic_exchange_1):
#ifdef __TINYC__
        .int 0x12001c21
        .int 0x350000c2
        .int 0x085f7c02
        .int 0x08037c01
        .int 0x35ffffc3
        .int 0x12001c40
        .int 0xd65f03c0
        .int 0x085ffc02
        .int 0x0803fc01
        .int 0x35ffffc3
        .int 0x12001c40
        .int 0xd65f03c0
#else
        and w1, w1, #0xff
        cbnz    w2,  .L___atomic_exchange_1_01c
.L___atomic_exchange_1_008:
        ldxrb   w2, [x0]
        stxrb   w3, w1, [x0]
        cbnz    w3,  .L___atomic_exchange_1_008
        and w0, w2, #0xff
        ret
.L___atomic_exchange_1_01c:
        ldaxrb  w2, [x0]
        stlxrb  w3, w1, [x0]
        cbnz    w3,  .L___atomic_exchange_1_01c
        and w0, w2, #0xff
        ret
	.size   _(__atomic_exchange_1), .-_(__atomic_exchange_1)

#endif
        .global _(__atomic_exchange_2)
        .type   _(__atomic_exchange_2), %function
_(__atomic_exchange_2):
#ifdef __TINYC__
        .int 0x12003c21
        .int 0x350000c2
        .int 0x485f7c02
        .int 0x48037c01
        .int 0x35ffffc3
        .int 0x12003c40
        .int 0xd65f03c0
        .int 0x485ffc02
        .int 0x4803fc01
        .int 0x35ffffc3
        .int 0x12003c40
        .int 0xd65f03c0
#else
        and w1, w1, #0xffff
        cbnz    w2,  .L___atomic_exchange_2_01c
.L___atomic_exchange_2_008:
        ldxrh   w2, [x0]
        stxrh   w3, w1, [x0]
        cbnz    w3,  .L___atomic_exchange_2_008
        and w0, w2, #0xffff
        ret
.L___atomic_exchange_2_01c:
        ldaxrh  w2, [x0]
        stlxrh  w3, w1, [x0]
        cbnz    w3,  .L___atomic_exchange_2_01c
        and w0, w2, #0xffff
        ret
	.size   _(__atomic_exchange_2), .-_(__atomic_exchange_2)

#endif
        .global _(__atomic_exchange_4)
        .type   _(__atomic_exchange_4), %function
_(__atomic_exchange_4):
#ifdef __TINYC__
        .int 0xaa0003e3
        .int 0x350000a2
        .int 0x885f7c60
        .int 0x88027c61
        .int 0x35ffffc2
        .int 0xd65f03c0
        .int 0x885ffc60
        .int 0x8802fc61
        .int 0x35ffffc2
        .int 0xd65f03c0
#else
        mov x3, x0
        cbnz    w2,  .L___atomic_exchange_4_018
.L___atomic_exchange_4_008:
        ldxr    w0, [x3]
        stxr    w2, w1, [x3]
        cbnz    w2,  .L___atomic_exchange_4_008
        ret
.L___atomic_exchange_4_018:
        ldaxr   w0, [x3]
        stlxr   w2, w1, [x3]
        cbnz    w2,  .L___atomic_exchange_4_018
        ret
	.size   _(__atomic_exchange_4), .-_(__atomic_exchange_4)

#endif
        .global _(__atomic_exchange_8)
        .type   _(__atomic_exchange_8), %function
_(__atomic_exchange_8):
#ifdef __TINYC__
        .int 0xaa0003e3
        .int 0x350000a2
        .int 0xc85f7c60
        .int 0xc8027c61
        .int 0x35ffffc2
        .int 0xd65f03c0
        .int 0xc85ffc60
        .int 0xc802fc61
        .int 0x35ffffc2
        .int 0xd65f03c0
#else
        mov x3, x0
        cbnz    w2,  .L___atomic_exchange_8_018
.L___atomic_exchange_8_008:
        ldxr    x0, [x3]
        stxr    w2, x1, [x3]
        cbnz    w2,  .L___atomic_exchange_8_008
        ret
.L___atomic_exchange_8_018:
        ldaxr   x0, [x3]
        stlxr   w2, x1, [x3]
        cbnz    w2,  .L___atomic_exchange_8_018
        ret
	.size   _(__atomic_exchange_8), .-_(__atomic_exchange_8)

#endif
        .global _(__atomic_fetch_add_1)
        .type   _(__atomic_fetch_add_1), %function
_(__atomic_fetch_add_1):
#ifdef __TINYC__
        .int 0x12001c21
        .int 0x350000e2
        .int 0x085f7c02
        .int 0x0b010043
        .int 0x08047c03
        .int 0x35ffffa4
        .int 0x12001c40
        .int 0xd65f03c0
        .int 0x085ffc02
        .int 0x0b010043
        .int 0x0804fc03
        .int 0x35ffffa4
        .int 0x12001c40
        .int 0xd65f03c0
#else
        and w1, w1, #0xff
        cbnz    w2,  .L___atomic_fetch_add_1_020
.L___atomic_fetch_add_1_008:
        ldxrb   w2, [x0]
        add w3, w2, w1
        stxrb   w4, w3, [x0]
        cbnz    w4,  .L___atomic_fetch_add_1_008
        and w0, w2, #0xff
        ret
.L___atomic_fetch_add_1_020:
        ldaxrb  w2, [x0]
        add w3, w2, w1
        stlxrb  w4, w3, [x0]
        cbnz    w4,  .L___atomic_fetch_add_1_020
        and w0, w2, #0xff
        ret
	.size   _(__atomic_fetch_add_1), .-_(__atomic_fetch_add_1)

#endif
        .global _(__atomic_fetch_add_2)
        .type   _(__atomic_fetch_add_2), %function
_(__atomic_fetch_add_2):
#ifdef __TINYC__
        .int 0x12003c21
        .int 0x350000e2
        .int 0x485f7c02
        .int 0x0b010043
        .int 0x48047c03
        .int 0x35ffffa4
        .int 0x12003c40
        .int 0xd65f03c0
        .int 0x485ffc02
        .int 0x0b010043
        .int 0x4804fc03
        .int 0x35ffffa4
        .int 0x12003c40
        .int 0xd65f03c0
#else
        and w1, w1, #0xffff
        cbnz    w2,  .L___atomic_fetch_add_2_020
.L___atomic_fetch_add_2_008:
        ldxrh   w2, [x0]
        add w3, w2, w1
        stxrh   w4, w3, [x0]
        cbnz    w4,  .L___atomic_fetch_add_2_008
        and w0, w2, #0xffff
        ret
.L___atomic_fetch_add_2_020:
        ldaxrh  w2, [x0]
        add w3, w2, w1
        stlxrh  w4, w3, [x0]
        cbnz    w4,  .L___atomic_fetch_add_2_020
        and w0, w2, #0xffff
        ret
	.size   _(__atomic_fetch_add_2), .-_(__atomic_fetch_add_2)

#endif
        .global _(__atomic_fetch_add_4)
        .type   _(__atomic_fetch_add_4), %function
_(__atomic_fetch_add_4):
#ifdef __TINYC__
        .int 0xaa0003e3
        .int 0x350000c2
        .int 0x885f7c60
        .int 0x0b010002
        .int 0x88047c62
        .int 0x35ffffa4
        .int 0xd65f03c0
        .int 0x885ffc60
        .int 0x0b010002
        .int 0x8804fc62
        .int 0x35ffffa4
        .int 0xd65f03c0
#else
        mov x3, x0
        cbnz    w2,  .L___atomic_fetch_add_4_01c
.L___atomic_fetch_add_4_008:
        ldxr    w0, [x3]
        add w2, w0, w1
        stxr    w4, w2, [x3]
        cbnz    w4,  .L___atomic_fetch_add_4_008
        ret
.L___atomic_fetch_add_4_01c:
        ldaxr   w0, [x3]
        add w2, w0, w1
        stlxr   w4, w2, [x3]
        cbnz    w4,  .L___atomic_fetch_add_4_01c
        ret
	.size   _(__atomic_fetch_add_4), .-_(__atomic_fetch_add_4)

#endif
        .global _(__atomic_fetch_add_8)
        .type   _(__atomic_fetch_add_8), %function
_(__atomic_fetch_add_8):
#ifdef __TINYC__
        .int 0xaa0003e3
        .int 0x350000c2
        .int 0xc85f7c60
        .int 0x8b010002
        .int 0xc8047c62
        .int 0x35ffffa4
        .int 0xd65f03c0
        .int 0xc85ffc60
        .int 0x8b010002
        .int 0xc804fc62
        .int 0x35ffffa4
        .int 0xd65f03c0
#else
        mov x3, x0
        cbnz    w2,  .L___atomic_fetch_add_8_01c
.L___atomic_fetch_add_8_008:
        ldxr    x0, [x3]
        add x2, x0, x1
        stxr    w4, x2, [x3]
        cbnz    w4,  .L___atomic_fetch_add_8_008
        ret
.L___atomic_fetch_add_8_01c:
        ldaxr   x0, [x3]
        add x2, x0, x1
        stlxr   w4, x2, [x3]
        cbnz    w4,  .L___atomic_fetch_add_8_01c
        ret
	.size   _(__atomic_fetch_add_8), .-_(__atomic_fetch_add_8)

#endif
        .global _(__atomic_add_fetch_1)
        .type   _(__atomic_add_fetch_1), %function
_(__atomic_add_fetch_1):
#ifdef __TINYC__
        .int 0x12001c21
        .int 0x350000e2
        .int 0x085f7c02
        .int 0x0b010042
        .int 0x08037c02
        .int 0x35ffffa3
        .int 0x12001c40
        .int 0xd65f03c0
        .int 0x085ffc02
        .int 0x0b010042
        .int 0x0803fc02
        .int 0x35ffffa3
        .int 0x12001c40
        .int 0xd65f03c0
#else
        and w1, w1, #0xff
        cbnz    w2,  .L___atomic_add_fetch_1_058
.L___atomic_add_fetch_1_040:
        ldxrb   w2, [x0]
        add w2, w2, w1
        stxrb   w3, w2, [x0]
        cbnz    w3,  .L___atomic_add_fetch_1_040
        and w0, w2, #0xff
        ret
.L___atomic_add_fetch_1_058:
        ldaxrb  w2, [x0]
        add w2, w2, w1
        stlxrb  w3, w2, [x0]
        cbnz    w3,  .L___atomic_add_fetch_1_058
        and w0, w2, #0xff
        ret
	.size   _(__atomic_add_fetch_1), .-_(__atomic_add_fetch_1)

#endif
        .global _(__atomic_add_fetch_2)
        .type   _(__atomic_add_fetch_2), %function
_(__atomic_add_fetch_2):
#ifdef __TINYC__
        .int 0x12003c21
        .int 0x350000e2
        .int 0x485f7c02
        .int 0x0b010042
        .int 0x48037c02
        .int 0x35ffffa3
        .int 0x12003c40
        .int 0xd65f03c0
        .int 0x485ffc02
        .int 0x0b010042
        .int 0x4803fc02
        .int 0x35ffffa3
        .int 0x12003c40
        .int 0xd65f03c0
#else
        and w1, w1, #0xffff
        cbnz    w2,  .L___atomic_add_fetch_2_058
.L___atomic_add_fetch_2_040:
        ldxrh   w2, [x0]
        add w2, w2, w1
        stxrh   w3, w2, [x0]
        cbnz    w3,  .L___atomic_add_fetch_2_040
        and w0, w2, #0xffff
        ret
.L___atomic_add_fetch_2_058:
        ldaxrh  w2, [x0]
        add w2, w2, w1
        stlxrh  w3, w2, [x0]
        cbnz    w3,  .L___atomic_add_fetch_2_058
        and w0, w2, #0xffff
        ret
	.size   _(__atomic_add_fetch_2), .-_(__atomic_add_fetch_2)

#endif
        .global _(__atomic_add_fetch_4)
        .type   _(__atomic_add_fetch_4), %function
_(__atomic_add_fetch_4):
#ifdef __TINYC__
        .int 0xaa0003e3
        .int 0x350000c2
        .int 0x885f7c60
        .int 0x0b010000
        .int 0x88027c60
        .int 0x35ffffa2
        .int 0xd65f03c0
        .int 0x885ffc60
        .int 0x0b010000
        .int 0x8802fc60
        .int 0x35ffffa2
        .int 0xd65f03c0
#else
        mov x3, x0
        cbnz    w2,  .L___atomic_add_fetch_4_04c
.L___atomic_add_fetch_4_038:
        ldxr    w0, [x3]
        add w0, w0, w1
        stxr    w2, w0, [x3]
        cbnz    w2,  .L___atomic_add_fetch_4_038
        ret
.L___atomic_add_fetch_4_04c:
        ldaxr   w0, [x3]
        add w0, w0, w1
        stlxr   w2, w0, [x3]
        cbnz    w2,  .L___atomic_add_fetch_4_04c
        ret
	.size   _(__atomic_add_fetch_4), .-_(__atomic_add_fetch_4)

#endif
        .global _(__atomic_add_fetch_8)
        .type   _(__atomic_add_fetch_8), %function
_(__atomic_add_fetch_8):
#ifdef __TINYC__
        .int 0xaa0003e3
        .int 0x350000c2
        .int 0xc85f7c60
        .int 0x8b010000
        .int 0xc8027c60
        .int 0x35ffffa2
        .int 0xd65f03c0
        .int 0xc85ffc60
        .int 0x8b010000
        .int 0xc802fc60
        .int 0x35ffffa2
        .int 0xd65f03c0
#else
        mov x3, x0
        cbnz    w2,  .L___atomic_add_fetch_8_04c
.L___atomic_add_fetch_8_038:
        ldxr    x0, [x3]
        add x0, x0, x1
        stxr    w2, x0, [x3]
        cbnz    w2,  .L___atomic_add_fetch_8_038
        ret
.L___atomic_add_fetch_8_04c:
        ldaxr   x0, [x3]
        add x0, x0, x1
        stlxr   w2, x0, [x3]
        cbnz    w2,  .L___atomic_add_fetch_8_04c
        ret
	.size   _(__atomic_add_fetch_8), .-_(__atomic_add_fetch_8)

#endif
        .global _(__atomic_fetch_sub_1)
        .type   _(__atomic_fetch_sub_1), %function
_(__atomic_fetch_sub_1):
#ifdef __TINYC__
        .int 0x12001c21
        .int 0x350000e2
        .int 0x085f7c02
        .int 0x4b010043
        .int 0x08047c03
        .int 0x35ffffa4
        .int 0x12001c40
        .int 0xd65f03c0
        .int 0x085ffc02
        .int 0x4b010043
        .int 0x0804fc03
        .int 0x35ffffa4
        .int 0x12001c40
        .int 0xd65f03c0
#else
        and w1, w1, #0xff
        cbnz    w2,  .L___atomic_fetch_sub_1_020
.L___atomic_fetch_sub_1_008:
        ldxrb   w2, [x0]
        sub w3, w2, w1
        stxrb   w4, w3, [x0]
        cbnz    w4,  .L___atomic_fetch_sub_1_008
        and w0, w2, #0xff
        ret
.L___atomic_fetch_sub_1_020:
        ldaxrb  w2, [x0]
        sub w3, w2, w1
        stlxrb  w4, w3, [x0]
        cbnz    w4,  .L___atomic_fetch_sub_1_020
        and w0, w2, #0xff
        ret
	.size   _(__atomic_fetch_sub_1), .-_(__atomic_fetch_sub_1)

#endif
        .global _(__atomic_fetch_sub_2)
        .type   _(__atomic_fetch_sub_2), %function
_(__atomic_fetch_sub_2):
#ifdef __TINYC__
        .int 0x12003c21
        .int 0x350000e2
        .int 0x485f7c02
        .int 0x4b010043
        .int 0x48047c03
        .int 0x35ffffa4
        .int 0x12003c40
        .int 0xd65f03c0
        .int 0x485ffc02
        .int 0x4b010043
        .int 0x4804fc03
        .int 0x35ffffa4
        .int 0x12003c40
        .int 0xd65f03c0
#else
        and w1, w1, #0xffff
        cbnz    w2,  .L___atomic_fetch_sub_2_020
.L___atomic_fetch_sub_2_008:
        ldxrh   w2, [x0]
        sub w3, w2, w1
        stxrh   w4, w3, [x0]
        cbnz    w4,  .L___atomic_fetch_sub_2_008
        and w0, w2, #0xffff
        ret
.L___atomic_fetch_sub_2_020:
        ldaxrh  w2, [x0]
        sub w3, w2, w1
        stlxrh  w4, w3, [x0]
        cbnz    w4,  .L___atomic_fetch_sub_2_020
        and w0, w2, #0xffff
        ret
	.size   _(__atomic_fetch_sub_2), .-_(__atomic_fetch_sub_2)

#endif
        .global _(__atomic_fetch_sub_4)
        .type   _(__atomic_fetch_sub_4), %function
_(__atomic_fetch_sub_4):
#ifdef __TINYC__
        .int 0xaa0003e3
        .int 0x350000c2
        .int 0x885f7c60
        .int 0x4b010002
        .int 0x88047c62
        .int 0x35ffffa4
        .int 0xd65f03c0
        .int 0x885ffc60
        .int 0x4b010002
        .int 0x8804fc62
        .int 0x35ffffa4
        .int 0xd65f03c0
#else
        mov x3, x0
        cbnz    w2,  .L___atomic_fetch_sub_4_01c
.L___atomic_fetch_sub_4_008:
        ldxr    w0, [x3]
        sub w2, w0, w1
        stxr    w4, w2, [x3]
        cbnz    w4,  .L___atomic_fetch_sub_4_008
        ret
.L___atomic_fetch_sub_4_01c:
        ldaxr   w0, [x3]
        sub w2, w0, w1
        stlxr   w4, w2, [x3]
        cbnz    w4,  .L___atomic_fetch_sub_4_01c
        ret
	.size   _(__atomic_fetch_sub_4), .-_(__atomic_fetch_sub_4)

#endif
        .global _(__atomic_fetch_sub_8)
        .type   _(__atomic_fetch_sub_8), %function
_(__atomic_fetch_sub_8):
#ifdef __TINYC__
        .int 0xaa0003e3
        .int 0x350000c2
        .int 0xc85f7c60
        .int 0xcb010002
        .int 0xc8047c62
        .int 0x35ffffa4
        .int 0xd65f03c0
        .int 0xc85ffc60
        .int 0xcb010002
        .int 0xc804fc62
        .int 0x35ffffa4
        .int 0xd65f03c0
#else
        mov x3, x0
        cbnz    w2,  .L___atomic_fetch_sub_8_01c
.L___atomic_fetch_sub_8_008:
        ldxr    x0, [x3]
        sub x2, x0, x1
        stxr    w4, x2, [x3]
        cbnz    w4,  .L___atomic_fetch_sub_8_008
        ret
.L___atomic_fetch_sub_8_01c:
        ldaxr   x0, [x3]
        sub x2, x0, x1
        stlxr   w4, x2, [x3]
        cbnz    w4,  .L___atomic_fetch_sub_8_01c
        ret
	.size   _(__atomic_fetch_sub_8), .-_(__atomic_fetch_sub_8)

#endif
        .global _(__atomic_sub_fetch_1)
        .type   _(__atomic_sub_fetch_1), %function
_(__atomic_sub_fetch_1):
#ifdef __TINYC__
        .int 0x12001c21
        .int 0x350000e2
        .int 0x085f7c02
        .int 0x4b010042
        .int 0x08037c02
        .int 0x35ffffa3
        .int 0x12001c40
        .int 0xd65f03c0
        .int 0x085ffc02
        .int 0x4b010042
        .int 0x0803fc02
        .int 0x35ffffa3
        .int 0x12001c40
        .int 0xd65f03c0
#else
        and w1, w1, #0xff
        cbnz    w2,  .L___atomic_sub_fetch_1_058
.L___atomic_sub_fetch_1_040:
        ldxrb   w2, [x0]
        sub w2, w2, w1
        stxrb   w3, w2, [x0]
        cbnz    w3,  .L___atomic_sub_fetch_1_040
        and w0, w2, #0xff
        ret
.L___atomic_sub_fetch_1_058:
        ldaxrb  w2, [x0]
        sub w2, w2, w1
        stlxrb  w3, w2, [x0]
        cbnz    w3,  .L___atomic_sub_fetch_1_058
        and w0, w2, #0xff
        ret
	.size   _(__atomic_sub_fetch_1), .-_(__atomic_sub_fetch_1)

#endif
        .global _(__atomic_sub_fetch_2)
        .type   _(__atomic_sub_fetch_2), %function
_(__atomic_sub_fetch_2):
#ifdef __TINYC__
        .int 0x12003c21
        .int 0x350000e2
        .int 0x485f7c02
        .int 0x4b010042
        .int 0x48037c02
        .int 0x35ffffa3
        .int 0x12003c40
        .int 0xd65f03c0
        .int 0x485ffc02
        .int 0x4b010042
        .int 0x4803fc02
        .int 0x35ffffa3
        .int 0x12003c40
        .int 0xd65f03c0
#else
        and w1, w1, #0xffff
        cbnz    w2,  .L___atomic_sub_fetch_2_058
.L___atomic_sub_fetch_2_040:
        ldxrh   w2, [x0]
        sub w2, w2, w1
        stxrh   w3, w2, [x0]
        cbnz    w3,  .L___atomic_sub_fetch_2_040
        and w0, w2, #0xffff
        ret
.L___atomic_sub_fetch_2_058:
        ldaxrh  w2, [x0]
        sub w2, w2, w1
        stlxrh  w3, w2, [x0]
        cbnz    w3,  .L___atomic_sub_fetch_2_058
        and w0, w2, #0xffff
        ret
	.size   _(__atomic_sub_fetch_2), .-_(__atomic_sub_fetch_2)

#endif
        .global _(__atomic_sub_fetch_4)
        .type   _(__atomic_sub_fetch_4), %function
_(__atomic_sub_fetch_4):
#ifdef __TINYC__
        .int 0xaa0003e3
        .int 0x350000c2
        .int 0x885f7c60
        .int 0x4b010000
        .int 0x88027c60
        .int 0x35ffffa2
        .int 0xd65f03c0
        .int 0x885ffc60
        .int 0x4b010000
        .int 0x8802fc60
        .int 0x35ffffa2
        .int 0xd65f03c0
#else
        mov x3, x0
        cbnz    w2,  .L___atomic_sub_fetch_4_04c
.L___atomic_sub_fetch_4_038:
        ldxr    w0, [x3]
        sub w0, w0, w1
        stxr    w2, w0, [x3]
        cbnz    w2,  .L___atomic_sub_fetch_4_038
        ret
.L___atomic_sub_fetch_4_04c:
        ldaxr   w0, [x3]
        sub w0, w0, w1
        stlxr   w2, w0, [x3]
        cbnz    w2,  .L___atomic_sub_fetch_4_04c
        ret
	.size   _(__atomic_sub_fetch_4), .-_(__atomic_sub_fetch_4)

#endif
        .global _(__atomic_sub_fetch_8)
        .type   _(__atomic_sub_fetch_8), %function
_(__atomic_sub_fetch_8):
#ifdef __TINYC__
        .int 0xaa0003e3
        .int 0x350000c2
        .int 0xc85f7c60
        .int 0xcb010000
        .int 0xc8027c60
        .int 0x35ffffa2
        .int 0xd65f03c0
        .int 0xc85ffc60
        .int 0xcb010000
        .int 0xc802fc60
        .int 0x35ffffa2
        .int 0xd65f03c0
#else
        mov x3, x0
        cbnz    w2,  .L___atomic_sub_fetch_8_04c
.L___atomic_sub_fetch_8_038:
        ldxr    x0, [x3]
        sub x0, x0, x1
        stxr    w2, x0, [x3]
        cbnz    w2,  .L___atomic_sub_fetch_8_038
        ret
.L___atomic_sub_fetch_8_04c:
        ldaxr   x0, [x3]
        sub x0, x0, x1
        stlxr   w2, x0, [x3]
        cbnz    w2,  .L___atomic_sub_fetch_8_04c
        ret
	.size   _(__atomic_sub_fetch_8), .-_(__atomic_sub_fetch_8)

#endif
        .global _(__atomic_fetch_and_1)
        .type   _(__atomic_fetch_and_1), %function
_(__atomic_fetch_and_1):
#ifdef __TINYC__
        .int 0x12001c21
        .int 0x350000e2
        .int 0x085f7c02
        .int 0x0a010043
        .int 0x08047c03
        .int 0x35ffffa4
        .int 0x12001c40
        .int 0xd65f03c0
        .int 0x085ffc02
        .int 0x0a010043
        .int 0x0804fc03
        .int 0x35ffffa4
        .int 0x12001c40
        .int 0xd65f03c0
#else
        and w1, w1, #0xff
        cbnz    w2,  .L___atomic_fetch_and_1_020
.L___atomic_fetch_and_1_008:
        ldxrb   w2, [x0]
        and w3, w2, w1
        stxrb   w4, w3, [x0]
        cbnz    w4,  .L___atomic_fetch_and_1_008
        and w0, w2, #0xff
        ret
.L___atomic_fetch_and_1_020:
        ldaxrb  w2, [x0]
        and w3, w2, w1
        stlxrb  w4, w3, [x0]
        cbnz    w4,  .L___atomic_fetch_and_1_020
        and w0, w2, #0xff
        ret
	.size   _(__atomic_fetch_and_1), .-_(__atomic_fetch_and_1)

#endif
        .global _(__atomic_fetch_and_2)
        .type   _(__atomic_fetch_and_2), %function
_(__atomic_fetch_and_2):
#ifdef __TINYC__
        .int 0x12003c21
        .int 0x350000e2
        .int 0x485f7c02
        .int 0x0a010043
        .int 0x48047c03
        .int 0x35ffffa4
        .int 0x12003c40
        .int 0xd65f03c0
        .int 0x485ffc02
        .int 0x0a010043
        .int 0x4804fc03
        .int 0x35ffffa4
        .int 0x12003c40
        .int 0xd65f03c0
#else
        and w1, w1, #0xffff
        cbnz    w2,  .L___atomic_fetch_and_2_020
.L___atomic_fetch_and_2_008:
        ldxrh   w2, [x0]
        and w3, w2, w1
        stxrh   w4, w3, [x0]
        cbnz    w4,  .L___atomic_fetch_and_2_008
        and w0, w2, #0xffff
        ret
.L___atomic_fetch_and_2_020:
        ldaxrh  w2, [x0]
        and w3, w2, w1
        stlxrh  w4, w3, [x0]
        cbnz    w4,  .L___atomic_fetch_and_2_020
        and w0, w2, #0xffff
        ret
	.size   _(__atomic_fetch_and_2), .-_(__atomic_fetch_and_2)

#endif
        .global _(__atomic_fetch_and_4)
        .type   _(__atomic_fetch_and_4), %function
_(__atomic_fetch_and_4):
#ifdef __TINYC__
        .int 0xaa0003e3
        .int 0x350000c2
        .int 0x885f7c60
        .int 0x0a010002
        .int 0x88047c62
        .int 0x35ffffa4
        .int 0xd65f03c0
        .int 0x885ffc60
        .int 0x0a010002
        .int 0x8804fc62
        .int 0x35ffffa4
        .int 0xd65f03c0
#else
        mov x3, x0
        cbnz    w2,  .L___atomic_fetch_and_4_01c
.L___atomic_fetch_and_4_008:
        ldxr    w0, [x3]
        and w2, w0, w1
        stxr    w4, w2, [x3]
        cbnz    w4,  .L___atomic_fetch_and_4_008
        ret
.L___atomic_fetch_and_4_01c:
        ldaxr   w0, [x3]
        and w2, w0, w1
        stlxr   w4, w2, [x3]
        cbnz    w4,  .L___atomic_fetch_and_4_01c
        ret
	.size   _(__atomic_fetch_and_4), .-_(__atomic_fetch_and_4)

#endif
        .global _(__atomic_fetch_and_8)
        .type   _(__atomic_fetch_and_8), %function
_(__atomic_fetch_and_8):
#ifdef __TINYC__
        .int 0xaa0003e3
        .int 0x350000c2
        .int 0xc85f7c60
        .int 0x8a010002
        .int 0xc8047c62
        .int 0x35ffffa4
        .int 0xd65f03c0
        .int 0xc85ffc60
        .int 0x8a010002
        .int 0xc804fc62
        .int 0x35ffffa4
        .int 0xd65f03c0
#else
        mov x3, x0
        cbnz    w2,  .L___atomic_fetch_and_8_01c
.L___atomic_fetch_and_8_008:
        ldxr    x0, [x3]
        and x2, x0, x1
        stxr    w4, x2, [x3]
        cbnz    w4,  .L___atomic_fetch_and_8_008
        ret
.L___atomic_fetch_and_8_01c:
        ldaxr   x0, [x3]
        and x2, x0, x1
        stlxr   w4, x2, [x3]
        cbnz    w4,  .L___atomic_fetch_and_8_01c
        ret
	.size   _(__atomic_fetch_and_8), .-_(__atomic_fetch_and_8)

#endif
        .global _(__atomic_and_fetch_1)
        .type   _(__atomic_and_fetch_1), %function
_(__atomic_and_fetch_1):
#ifdef __TINYC__
        .int 0x12001c21
        .int 0x350000e2
        .int 0x085f7c02
        .int 0x0a010042
        .int 0x08037c02
        .int 0x35ffffa3
        .int 0x12001c40
        .int 0xd65f03c0
        .int 0x085ffc02
        .int 0x0a010042
        .int 0x0803fc02
        .int 0x35ffffa3
        .int 0x12001c40
        .int 0xd65f03c0
#else
        and w1, w1, #0xff
        cbnz    w2,  .L___atomic_and_fetch_1_058
.L___atomic_and_fetch_1_040:
        ldxrb   w2, [x0]
        and w2, w2, w1
        stxrb   w3, w2, [x0]
        cbnz    w3,  .L___atomic_and_fetch_1_040
        and w0, w2, #0xff
        ret
.L___atomic_and_fetch_1_058:
        ldaxrb  w2, [x0]
        and w2, w2, w1
        stlxrb  w3, w2, [x0]
        cbnz    w3,  .L___atomic_and_fetch_1_058
        and w0, w2, #0xff
        ret
	.size   _(__atomic_and_fetch_1), .-_(__atomic_and_fetch_1)

#endif
        .global _(__atomic_and_fetch_2)
        .type   _(__atomic_and_fetch_2), %function
_(__atomic_and_fetch_2):
#ifdef __TINYC__
        .int 0x12003c21
        .int 0x350000e2
        .int 0x485f7c02
        .int 0x0a010042
        .int 0x48037c02
        .int 0x35ffffa3
        .int 0x12003c40
        .int 0xd65f03c0
        .int 0x485ffc02
        .int 0x0a010042
        .int 0x4803fc02
        .int 0x35ffffa3
        .int 0x12003c40
        .int 0xd65f03c0
#else
        and w1, w1, #0xffff
        cbnz    w2,  .L___atomic_and_fetch_2_058
.L___atomic_and_fetch_2_040:
        ldxrh   w2, [x0]
        and w2, w2, w1
        stxrh   w3, w2, [x0]
        cbnz    w3,  .L___atomic_and_fetch_2_040
        and w0, w2, #0xffff
        ret
.L___atomic_and_fetch_2_058:
        ldaxrh  w2, [x0]
        and w2, w2, w1
        stlxrh  w3, w2, [x0]
        cbnz    w3,  .L___atomic_and_fetch_2_058
        and w0, w2, #0xffff
        ret
	.size   _(__atomic_and_fetch_2), .-_(__atomic_and_fetch_2)

#endif
        .global _(__atomic_and_fetch_4)
        .type   _(__atomic_and_fetch_4), %function
_(__atomic_and_fetch_4):
#ifdef __TINYC__
        .int 0xaa0003e3
        .int 0x350000c2
        .int 0x885f7c60
        .int 0x0a010000
        .int 0x88027c60
        .int 0x35ffffa2
        .int 0xd65f03c0
        .int 0x885ffc60
        .int 0x0a010000
        .int 0x8802fc60
        .int 0x35ffffa2
        .int 0xd65f03c0
#else
        mov x3, x0
        cbnz    w2,  .L___atomic_and_fetch_4_04c
.L___atomic_and_fetch_4_038:
        ldxr    w0, [x3]
        and w0, w0, w1
        stxr    w2, w0, [x3]
        cbnz    w2,  .L___atomic_and_fetch_4_038
        ret
.L___atomic_and_fetch_4_04c:
        ldaxr   w0, [x3]
        and w0, w0, w1
        stlxr   w2, w0, [x3]
        cbnz    w2,  .L___atomic_and_fetch_4_04c
        ret
	.size   _(__atomic_and_fetch_4), .-_(__atomic_and_fetch_4)

#endif
        .global _(__atomic_and_fetch_8)
        .type   _(__atomic_and_fetch_8), %function
_(__atomic_and_fetch_8):
#ifdef __TINYC__
        .int 0xaa0003e3
        .int 0x350000c2
        .int 0xc85f7c60
        .int 0x8a010000
        .int 0xc8027c60
        .int 0x35ffffa2
        .int 0xd65f03c0
        .int 0xc85ffc60
        .int 0x8a010000
        .int 0xc802fc60
        .int 0x35ffffa2
        .int 0xd65f03c0
#else
        mov x3, x0
        cbnz    w2,  .L___atomic_and_fetch_8_04c
.L___atomic_and_fetch_8_038:
        ldxr    x0, [x3]
        and x0, x0, x1
        stxr    w2, x0, [x3]
        cbnz    w2,  .L___atomic_and_fetch_8_038
        ret
.L___atomic_and_fetch_8_04c:
        ldaxr   x0, [x3]
        and x0, x0, x1
        stlxr   w2, x0, [x3]
        cbnz    w2,  .L___atomic_and_fetch_8_04c
        ret
	.size   _(__atomic_and_fetch_8), .-_(__atomic_and_fetch_8)

#endif
        .global _(__atomic_fetch_or_1)
        .type   _(__atomic_fetch_or_1), %function
_(__atomic_fetch_or_1):
#ifdef __TINYC__
        .int 0x12001c21
        .int 0x350000e2
        .int 0x085f7c02
        .int 0x2a010043
        .int 0x08047c03
        .int 0x35ffffa4
        .int 0x12001c40
        .int 0xd65f03c0
        .int 0x085ffc02
        .int 0x2a010043
        .int 0x0804fc03
        .int 0x35ffffa4
        .int 0x12001c40
        .int 0xd65f03c0
#else
        and w1, w1, #0xff
        cbnz    w2,  .L___atomic_fetch_or_1_020
.L___atomic_fetch_or_1_008:
        ldxrb   w2, [x0]
        orr w3, w2, w1
        stxrb   w4, w3, [x0]
        cbnz    w4,  .L___atomic_fetch_or_1_008
        and w0, w2, #0xff
        ret
.L___atomic_fetch_or_1_020:
        ldaxrb  w2, [x0]
        orr w3, w2, w1
        stlxrb  w4, w3, [x0]
        cbnz    w4,  .L___atomic_fetch_or_1_020
        and w0, w2, #0xff
        ret
	.size   _(__atomic_fetch_or_1), .-_(__atomic_fetch_or_1)

#endif
        .global _(__atomic_fetch_or_2)
        .type   _(__atomic_fetch_or_2), %function
_(__atomic_fetch_or_2):
#ifdef __TINYC__
        .int 0x12003c21
        .int 0x350000e2
        .int 0x485f7c02
        .int 0x2a010043
        .int 0x48047c03
        .int 0x35ffffa4
        .int 0x12003c40
        .int 0xd65f03c0
        .int 0x485ffc02
        .int 0x2a010043
        .int 0x4804fc03
        .int 0x35ffffa4
        .int 0x12003c40
        .int 0xd65f03c0
#else
        and w1, w1, #0xffff
        cbnz    w2,  .L___atomic_fetch_or_2_020
.L___atomic_fetch_or_2_008:
        ldxrh   w2, [x0]
        orr w3, w2, w1
        stxrh   w4, w3, [x0]
        cbnz    w4,  .L___atomic_fetch_or_2_008
        and w0, w2, #0xffff
        ret
.L___atomic_fetch_or_2_020:
        ldaxrh  w2, [x0]
        orr w3, w2, w1
        stlxrh  w4, w3, [x0]
        cbnz    w4,  .L___atomic_fetch_or_2_020
        and w0, w2, #0xffff
        ret
	.size   _(__atomic_fetch_or_2), .-_(__atomic_fetch_or_2)

#endif
        .global _(__atomic_fetch_or_4)
        .type   _(__atomic_fetch_or_4), %function
_(__atomic_fetch_or_4):
#ifdef __TINYC__
        .int 0xaa0003e3
        .int 0x350000c2
        .int 0x885f7c60
        .int 0x2a010002
        .int 0x88047c62
        .int 0x35ffffa4
        .int 0xd65f03c0
        .int 0x885ffc60
        .int 0x2a010002
        .int 0x8804fc62
        .int 0x35ffffa4
        .int 0xd65f03c0
#else
        mov x3, x0
        cbnz    w2,  .L___atomic_fetch_or_4_01c
.L___atomic_fetch_or_4_008:
        ldxr    w0, [x3]
        orr w2, w0, w1
        stxr    w4, w2, [x3]
        cbnz    w4,  .L___atomic_fetch_or_4_008
        ret
.L___atomic_fetch_or_4_01c:
        ldaxr   w0, [x3]
        orr w2, w0, w1
        stlxr   w4, w2, [x3]
        cbnz    w4,  .L___atomic_fetch_or_4_01c
        ret
	.size   _(__atomic_fetch_or_4), .-_(__atomic_fetch_or_4)

#endif
        .global _(__atomic_fetch_or_8)
        .type   _(__atomic_fetch_or_8), %function
_(__atomic_fetch_or_8):
#ifdef __TINYC__
        .int 0xaa0003e3
        .int 0x350000c2
        .int 0xc85f7c60
        .int 0xaa010002
        .int 0xc8047c62
        .int 0x35ffffa4
        .int 0xd65f03c0
        .int 0xc85ffc60
        .int 0xaa010002
        .int 0xc804fc62
        .int 0x35ffffa4
        .int 0xd65f03c0
#else
        mov x3, x0
        cbnz    w2,  .L___atomic_fetch_or_8_01c
.L___atomic_fetch_or_8_008:
        ldxr    x0, [x3]
        orr x2, x0, x1
        stxr    w4, x2, [x3]
        cbnz    w4,  .L___atomic_fetch_or_8_008
        ret
.L___atomic_fetch_or_8_01c:
        ldaxr   x0, [x3]
        orr x2, x0, x1
        stlxr   w4, x2, [x3]
        cbnz    w4,  .L___atomic_fetch_or_8_01c
        ret
	.size   _(__atomic_fetch_or_8), .-_(__atomic_fetch_or_8)

#endif
        .global _(__atomic_or_fetch_1)
        .type   _(__atomic_or_fetch_1), %function
_(__atomic_or_fetch_1):
#ifdef __TINYC__
        .int 0x12001c21
        .int 0x350000e2
        .int 0x085f7c02
        .int 0x2a010042
        .int 0x08037c02
        .int 0x35ffffa3
        .int 0x12001c40
        .int 0xd65f03c0
        .int 0x085ffc02
        .int 0x2a010042
        .int 0x0803fc02
        .int 0x35ffffa3
        .int 0x12001c40
        .int 0xd65f03c0
#else
        and w1, w1, #0xff
        cbnz    w2,  .L___atomic_or_fetch_1_058
.L___atomic_or_fetch_1_040:
        ldxrb   w2, [x0]
        orr w2, w2, w1
        stxrb   w3, w2, [x0]
        cbnz    w3,  .L___atomic_or_fetch_1_040
        and w0, w2, #0xff
        ret
.L___atomic_or_fetch_1_058:
        ldaxrb  w2, [x0]
        orr w2, w2, w1
        stlxrb  w3, w2, [x0]
        cbnz    w3,  .L___atomic_or_fetch_1_058
        and w0, w2, #0xff
        ret
	.size   _(__atomic_or_fetch_1), .-_(__atomic_or_fetch_1)

#endif
        .global _(__atomic_or_fetch_2)
        .type   _(__atomic_or_fetch_2), %function
_(__atomic_or_fetch_2):
#ifdef __TINYC__
        .int 0x12003c21
        .int 0x350000e2
        .int 0x485f7c02
        .int 0x2a010042
        .int 0x48037c02
        .int 0x35ffffa3
        .int 0x12003c40
        .int 0xd65f03c0
        .int 0x485ffc02
        .int 0x2a010042
        .int 0x4803fc02
        .int 0x35ffffa3
        .int 0x12003c40
        .int 0xd65f03c0
#else
        and w1, w1, #0xffff
        cbnz    w2,  .L___atomic_or_fetch_2_058
.L___atomic_or_fetch_2_040:
        ldxrh   w2, [x0]
        orr w2, w2, w1
        stxrh   w3, w2, [x0]
        cbnz    w3,  .L___atomic_or_fetch_2_040
        and w0, w2, #0xffff
        ret
.L___atomic_or_fetch_2_058:
        ldaxrh  w2, [x0]
        orr w2, w2, w1
        stlxrh  w3, w2, [x0]
        cbnz    w3,  .L___atomic_or_fetch_2_058
        and w0, w2, #0xffff
        ret
	.size   _(__atomic_or_fetch_2), .-_(__atomic_or_fetch_2)

#endif
        .global _(__atomic_or_fetch_4)
        .type   _(__atomic_or_fetch_4), %function
_(__atomic_or_fetch_4):
#ifdef __TINYC__
        .int 0xaa0003e3
        .int 0x350000c2
        .int 0x885f7c60
        .int 0x2a010000
        .int 0x88027c60
        .int 0x35ffffa2
        .int 0xd65f03c0
        .int 0x885ffc60
        .int 0x2a010000
        .int 0x8802fc60
        .int 0x35ffffa2
        .int 0xd65f03c0
#else
        mov x3, x0
        cbnz    w2,  .L___atomic_or_fetch_4_04c
.L___atomic_or_fetch_4_038:
        ldxr    w0, [x3]
        orr w0, w0, w1
        stxr    w2, w0, [x3]
        cbnz    w2,  .L___atomic_or_fetch_4_038
        ret
.L___atomic_or_fetch_4_04c:
        ldaxr   w0, [x3]
        orr w0, w0, w1
        stlxr   w2, w0, [x3]
        cbnz    w2,  .L___atomic_or_fetch_4_04c
        ret
	.size   _(__atomic_or_fetch_4), .-_(__atomic_or_fetch_4)

#endif
        .global _(__atomic_or_fetch_8)
        .type   _(__atomic_or_fetch_8), %function
_(__atomic_or_fetch_8):
#ifdef __TINYC__
        .int 0xaa0003e3
        .int 0x350000c2
        .int 0xc85f7c60
        .int 0xaa010000
        .int 0xc8027c60
        .int 0x35ffffa2
        .int 0xd65f03c0
        .int 0xc85ffc60
        .int 0xaa010000
        .int 0xc802fc60
        .int 0x35ffffa2
        .int 0xd65f03c0
#else
        mov x3, x0
        cbnz    w2,  .L___atomic_or_fetch_8_04c
.L___atomic_or_fetch_8_038:
        ldxr    x0, [x3]
        orr x0, x0, x1
        stxr    w2, x0, [x3]
        cbnz    w2,  .L___atomic_or_fetch_8_038
        ret
.L___atomic_or_fetch_8_04c:
        ldaxr   x0, [x3]
        orr x0, x0, x1
        stlxr   w2, x0, [x3]
        cbnz    w2,  .L___atomic_or_fetch_8_04c
        ret
	.size   _(__atomic_or_fetch_8), .-_(__atomic_or_fetch_8)

#endif
        .global _(__atomic_fetch_nand_1)
        .type   _(__atomic_fetch_nand_1), %function
_(__atomic_fetch_nand_1):
#ifdef __TINYC__
        .int 0x12001c21
        .int 0x35000102
        .int 0x085f7c02
        .int 0x0a010043
        .int 0x2a2303e3
        .int 0x08047c03
        .int 0x35ffff84
        .int 0x12001c40
        .int 0xd65f03c0
        .int 0x085ffc02
        .int 0x0a010043
        .int 0x2a2303e3
        .int 0x0804fc03
        .int 0x35ffff84
        .int 0x12001c40
        .int 0xd65f03c0
#else
        and w1, w1, #0xff
        cbnz    w2,  .L___atomic_fetch_nand_1_024
.L___atomic_fetch_nand_1_008:
        ldxrb   w2, [x0]
        and w3, w2, w1
        mvn w3, w3
        stxrb   w4, w3, [x0]
        cbnz    w4,  .L___atomic_fetch_nand_1_008
        and w0, w2, #0xff
        ret
.L___atomic_fetch_nand_1_024:
        ldaxrb  w2, [x0]
        and w3, w2, w1
        mvn w3, w3
        stlxrb  w4, w3, [x0]
        cbnz    w4,  .L___atomic_fetch_nand_1_024
        and w0, w2, #0xff
        ret
	.size   _(__atomic_fetch_nand_1), .-_(__atomic_fetch_nand_1)

#endif
        .global _(__atomic_fetch_nand_2)
        .type   _(__atomic_fetch_nand_2), %function
_(__atomic_fetch_nand_2):
#ifdef __TINYC__
        .int 0x12003c21
        .int 0x35000102
        .int 0x485f7c02
        .int 0x0a010043
        .int 0x2a2303e3
        .int 0x48047c03
        .int 0x35ffff84
        .int 0x12003c40
        .int 0xd65f03c0
        .int 0x485ffc02
        .int 0x0a010043
        .int 0x2a2303e3
        .int 0x4804fc03
        .int 0x35ffff84
        .int 0x12003c40
        .int 0xd65f03c0
#else
        and w1, w1, #0xffff
        cbnz    w2,  .L___atomic_fetch_nand_2_024
.L___atomic_fetch_nand_2_008:
        ldxrh   w2, [x0]
        and w3, w2, w1
        mvn w3, w3
        stxrh   w4, w3, [x0]
        cbnz    w4,  .L___atomic_fetch_nand_2_008
        and w0, w2, #0xffff
        ret
.L___atomic_fetch_nand_2_024:
        ldaxrh  w2, [x0]
        and w3, w2, w1
        mvn w3, w3
        stlxrh  w4, w3, [x0]
        cbnz    w4,  .L___atomic_fetch_nand_2_024
        and w0, w2, #0xffff
        ret
	.size   _(__atomic_fetch_nand_2), .-_(__atomic_fetch_nand_2)

#endif
        .global _(__atomic_fetch_nand_4)
        .type   _(__atomic_fetch_nand_4), %function
_(__atomic_fetch_nand_4):
#ifdef __TINYC__
        .int 0xaa0003e3
        .int 0x350000e2
        .int 0x885f7c60
        .int 0x0a010002
        .int 0x2a2203e2
        .int 0x88047c62
        .int 0x35ffff84
        .int 0xd65f03c0
        .int 0x885ffc60
        .int 0x0a010002
        .int 0x2a2203e2
        .int 0x8804fc62
        .int 0x35ffff84
        .int 0xd65f03c0
#else
        mov x3, x0
        cbnz    w2,  .L___atomic_fetch_nand_4_020
.L___atomic_fetch_nand_4_008:
        ldxr    w0, [x3]
        and w2, w0, w1
        mvn w2, w2
        stxr    w4, w2, [x3]
        cbnz    w4,  .L___atomic_fetch_nand_4_008
        ret
.L___atomic_fetch_nand_4_020:
        ldaxr   w0, [x3]
        and w2, w0, w1
        mvn w2, w2
        stlxr   w4, w2, [x3]
        cbnz    w4,  .L___atomic_fetch_nand_4_020
        ret
	.size   _(__atomic_fetch_nand_4), .-_(__atomic_fetch_nand_4)

#endif
        .global _(__atomic_fetch_nand_8)
        .type   _(__atomic_fetch_nand_8), %function
_(__atomic_fetch_nand_8):
#ifdef __TINYC__
        .int 0xaa0003e3
        .int 0x350000e2
        .int 0xc85f7c60
        .int 0x8a010002
        .int 0xaa2203e2
        .int 0xc8047c62
        .int 0x35ffff84
        .int 0xd65f03c0
        .int 0xc85ffc60
        .int 0x8a010002
        .int 0xaa2203e2
        .int 0xc804fc62
        .int 0x35ffff84
        .int 0xd65f03c0
#else
        mov x3, x0
        cbnz    w2,  .L___atomic_fetch_nand_8_020
.L___atomic_fetch_nand_8_008:
        ldxr    x0, [x3]
        and x2, x0, x1
        mvn x2, x2
        stxr    w4, x2, [x3]
        cbnz    w4,  .L___atomic_fetch_nand_8_008
        ret
.L___atomic_fetch_nand_8_020:
        ldaxr   x0, [x3]
        and x2, x0, x1
        mvn x2, x2
        stlxr   w4, x2, [x3]
        cbnz    w4,  .L___atomic_fetch_nand_8_020
        ret
	.size   _(__atomic_fetch_nand_8), .-_(__atomic_fetch_nand_8)

#endif
        .global _(__atomic_nand_fetch_1)
        .type   _(__atomic_nand_fetch_1), %function
_(__atomic_nand_fetch_1):
#ifdef __TINYC__
        .int 0x12001c21
        .int 0x35000102
        .int 0x085f7c02
        .int 0x0a010042
        .int 0x2a2203e2
        .int 0x08037c02
        .int 0x35ffff83
        .int 0x12001c40
        .int 0xd65f03c0
        .int 0x085ffc02
        .int 0x0a010042
        .int 0x2a2203e2
        .int 0x0803fc02
        .int 0x35ffff83
        .int 0x12001c40
        .int 0xd65f03c0
#else
        and w1, w1, #0xff
        cbnz    w2,  .L___atomic_nand_fetch_1_064
.L___atomic_nand_fetch_1_048:
        ldxrb   w2, [x0]
        and w2, w2, w1
        mvn w2, w2
        stxrb   w3, w2, [x0]
        cbnz    w3,  .L___atomic_nand_fetch_1_048
        and w0, w2, #0xff
        ret
.L___atomic_nand_fetch_1_064:
        ldaxrb  w2, [x0]
        and w2, w2, w1
        mvn w2, w2
        stlxrb  w3, w2, [x0]
        cbnz    w3,  .L___atomic_nand_fetch_1_064
        and w0, w2, #0xff
        ret
	.size   _(__atomic_nand_fetch_1), .-_(__atomic_nand_fetch_1)

#endif
        .global _(__atomic_nand_fetch_2)
        .type   _(__atomic_nand_fetch_2), %function
_(__atomic_nand_fetch_2):
#ifdef __TINYC__
        .int 0x12003c21
        .int 0x35000102
        .int 0x485f7c02
        .int 0x0a010042
        .int 0x2a2203e2
        .int 0x48037c02
        .int 0x35ffff83
        .int 0x12003c40
        .int 0xd65f03c0
        .int 0x485ffc02
        .int 0x0a010042
        .int 0x2a2203e2
        .int 0x4803fc02
        .int 0x35ffff83
        .int 0x12003c40
        .int 0xd65f03c0
#else
        and w1, w1, #0xffff
        cbnz    w2,  .L___atomic_nand_fetch_2_064
.L___atomic_nand_fetch_2_048:
        ldxrh   w2, [x0]
        and w2, w2, w1
        mvn w2, w2
        stxrh   w3, w2, [x0]
        cbnz    w3,  .L___atomic_nand_fetch_2_048
        and w0, w2, #0xffff
        ret
.L___atomic_nand_fetch_2_064:
        ldaxrh  w2, [x0]
        and w2, w2, w1
        mvn w2, w2
        stlxrh  w3, w2, [x0]
        cbnz    w3,  .L___atomic_nand_fetch_2_064
        and w0, w2, #0xffff
        ret
	.size   _(__atomic_nand_fetch_2), .-_(__atomic_nand_fetch_2)

#endif
        .global _(__atomic_nand_fetch_4)
        .type   _(__atomic_nand_fetch_4), %function
_(__atomic_nand_fetch_4):
#ifdef __TINYC__
        .int 0xaa0003e3
        .int 0x350000e2
        .int 0x885f7c60
        .int 0x0a010000
        .int 0x2a2003e0
        .int 0x88027c60
        .int 0x35ffff82
        .int 0xd65f03c0
        .int 0x885ffc60
        .int 0x0a010000
        .int 0x2a2003e0
        .int 0x8802fc60
        .int 0x35ffff82
        .int 0xd65f03c0
#else
        mov x3, x0
        cbnz    w2,  .L___atomic_nand_fetch_4_058
.L___atomic_nand_fetch_4_040:
        ldxr    w0, [x3]
        and w0, w0, w1
        mvn w0, w0
        stxr    w2, w0, [x3]
        cbnz    w2,  .L___atomic_nand_fetch_4_040
        ret
.L___atomic_nand_fetch_4_058:
        ldaxr   w0, [x3]
        and w0, w0, w1
        mvn w0, w0
        stlxr   w2, w0, [x3]
        cbnz    w2,  .L___atomic_nand_fetch_4_058
        ret
	.size   _(__atomic_nand_fetch_4), .-_(__atomic_nand_fetch_4)

#endif
        .global _(__atomic_nand_fetch_8)
        .type   _(__atomic_nand_fetch_8), %function
_(__atomic_nand_fetch_8):
#ifdef __TINYC__
        .int 0xaa0003e3
        .int 0x350000e2
        .int 0xc85f7c60
        .int 0x8a010000
        .int 0xaa2003e0
        .int 0xc8027c60
        .int 0x35ffff82
        .int 0xd65f03c0
        .int 0xc85ffc60
        .int 0x8a010000
        .int 0xaa2003e0
        .int 0xc802fc60
        .int 0x35ffff82
        .int 0xd65f03c0
#else
        mov x3, x0
        cbnz    w2,  .L___atomic_nand_fetch_8_058
.L___atomic_nand_fetch_8_040:
        ldxr    x0, [x3]
        and x0, x0, x1
        mvn x0, x0
        stxr    w2, x0, [x3]
        cbnz    w2,  .L___atomic_nand_fetch_8_040
        ret
.L___atomic_nand_fetch_8_058:
        ldaxr   x0, [x3]
        and x0, x0, x1
        mvn x0, x0
        stlxr   w2, x0, [x3]
        cbnz    w2,  .L___atomic_nand_fetch_8_058
        ret
	.size   _(__atomic_nand_fetch_8), .-_(__atomic_nand_fetch_8)

#endif
        .global _(__atomic_fetch_xor_1)
        .type   _(__atomic_fetch_xor_1), %function
_(__atomic_fetch_xor_1):
#ifdef __TINYC__
        .int 0x12001c21
        .int 0x350000e2
        .int 0x085f7c02
        .int 0x4a010043
        .int 0x08047c03
        .int 0x35ffffa4
        .int 0x12001c40
        .int 0xd65f03c0
        .int 0x085ffc02
        .int 0x4a010043
        .int 0x0804fc03
        .int 0x35ffffa4
        .int 0x12001c40
        .int 0xd65f03c0
#else
        and w1, w1, #0xff
        cbnz    w2,  .L___atomic_fetch_xor_1_020
.L___atomic_fetch_xor_1_008:
        ldxrb   w2, [x0]
        eor w3, w2, w1
        stxrb   w4, w3, [x0]
        cbnz    w4,  .L___atomic_fetch_xor_1_008
        and w0, w2, #0xff
        ret
.L___atomic_fetch_xor_1_020:
        ldaxrb  w2, [x0]
        eor w3, w2, w1
        stlxrb  w4, w3, [x0]
        cbnz    w4,  .L___atomic_fetch_xor_1_020
        and w0, w2, #0xff
        ret
	.size   _(__atomic_fetch_xor_1), .-_(__atomic_fetch_xor_1)

#endif
        .global _(__atomic_fetch_xor_2)
        .type   _(__atomic_fetch_xor_2), %function
_(__atomic_fetch_xor_2):
#ifdef __TINYC__
        .int 0x12003c21
        .int 0x350000e2
        .int 0x485f7c02
        .int 0x4a010043
        .int 0x48047c03
        .int 0x35ffffa4
        .int 0x12003c40
        .int 0xd65f03c0
        .int 0x485ffc02
        .int 0x4a010043
        .int 0x4804fc03
        .int 0x35ffffa4
        .int 0x12003c40
        .int 0xd65f03c0
#else
        and w1, w1, #0xffff
        cbnz    w2,  .L___atomic_fetch_xor_2_020
.L___atomic_fetch_xor_2_008:
        ldxrh   w2, [x0]
        eor w3, w2, w1
        stxrh   w4, w3, [x0]
        cbnz    w4,  .L___atomic_fetch_xor_2_008
        and w0, w2, #0xffff
        ret
.L___atomic_fetch_xor_2_020:
        ldaxrh  w2, [x0]
        eor w3, w2, w1
        stlxrh  w4, w3, [x0]
        cbnz    w4,  .L___atomic_fetch_xor_2_020
        and w0, w2, #0xffff
        ret
	.size   _(__atomic_fetch_xor_2), .-_(__atomic_fetch_xor_2)

#endif
        .global _(__atomic_fetch_xor_4)
        .type   _(__atomic_fetch_xor_4), %function
_(__atomic_fetch_xor_4):
#ifdef __TINYC__
        .int 0xaa0003e3
        .int 0x350000c2
        .int 0x885f7c60
        .int 0x4a010002
        .int 0x88047c62
        .int 0x35ffffa4
        .int 0xd65f03c0
        .int 0x885ffc60
        .int 0x4a010002
        .int 0x8804fc62
        .int 0x35ffffa4
        .int 0xd65f03c0
#else
        mov x3, x0
        cbnz    w2,  .L___atomic_fetch_xor_4_01c
.L___atomic_fetch_xor_4_008:
        ldxr    w0, [x3]
        eor w2, w0, w1
        stxr    w4, w2, [x3]
        cbnz    w4,  .L___atomic_fetch_xor_4_008
        ret
.L___atomic_fetch_xor_4_01c:
        ldaxr   w0, [x3]
        eor w2, w0, w1
        stlxr   w4, w2, [x3]
        cbnz    w4,  .L___atomic_fetch_xor_4_01c
        ret
	.size   _(__atomic_fetch_xor_4), .-_(__atomic_fetch_xor_4)

#endif
        .global _(__atomic_fetch_xor_8)
        .type   _(__atomic_fetch_xor_8), %function
_(__atomic_fetch_xor_8):
#ifdef __TINYC__
        .int 0xaa0003e3
        .int 0x350000c2
        .int 0xc85f7c60
        .int 0xca010002
        .int 0xc8047c62
        .int 0x35ffffa4
        .int 0xd65f03c0
        .int 0xc85ffc60
        .int 0xca010002
        .int 0xc804fc62
        .int 0x35ffffa4
        .int 0xd65f03c0
#else
        mov x3, x0
        cbnz    w2,  .L___atomic_fetch_xor_8_01c
.L___atomic_fetch_xor_8_008:
        ldxr    x0, [x3]
        eor x2, x0, x1
        stxr    w4, x2, [x3]
        cbnz    w4,  .L___atomic_fetch_xor_8_008
        ret
.L___atomic_fetch_xor_8_01c:
        ldaxr   x0, [x3]
        eor x2, x0, x1
        stlxr   w4, x2, [x3]
        cbnz    w4,  .L___atomic_fetch_xor_8_01c
        ret
	.size   _(__atomic_fetch_xor_8), .-_(__atomic_fetch_xor_8)

#endif
        .global _(__atomic_xor_fetch_1)
        .type   _(__atomic_xor_fetch_1), %function
_(__atomic_xor_fetch_1):
#ifdef __TINYC__
        .int 0x12001c21
        .int 0x350000e2
        .int 0x085f7c02
        .int 0x4a010042
        .int 0x08037c02
        .int 0x35ffffa3
        .int 0x12001c40
        .int 0xd65f03c0
        .int 0x085ffc02
        .int 0x4a010042
        .int 0x0803fc02
        .int 0x35ffffa3
        .int 0x12001c40
        .int 0xd65f03c0
#else
        and w1, w1, #0xff
        cbnz    w2,  .L___atomic_xor_fetch_1_058
.L___atomic_xor_fetch_1_040:
        ldxrb   w2, [x0]
        eor w2, w2, w1
        stxrb   w3, w2, [x0]
        cbnz    w3,  .L___atomic_xor_fetch_1_040
        and w0, w2, #0xff
        ret
.L___atomic_xor_fetch_1_058:
        ldaxrb  w2, [x0]
        eor w2, w2, w1
        stlxrb  w3, w2, [x0]
        cbnz    w3,  .L___atomic_xor_fetch_1_058
        and w0, w2, #0xff
        ret
	.size   _(__atomic_xor_fetch_1), .-_(__atomic_xor_fetch_1)

#endif
        .global _(__atomic_xor_fetch_2)
        .type   _(__atomic_xor_fetch_2), %function
_(__atomic_xor_fetch_2):
#ifdef __TINYC__
        .int 0x12003c21
        .int 0x350000e2
        .int 0x485f7c02
        .int 0x4a010042
        .int 0x48037c02
        .int 0x35ffffa3
        .int 0x12003c40
        .int 0xd65f03c0
        .int 0x485ffc02
        .int 0x4a010042
        .int 0x4803fc02
        .int 0x35ffffa3
        .int 0x12003c40
        .int 0xd65f03c0
#else
        and w1, w1, #0xffff
        cbnz    w2,  .L___atomic_xor_fetch_2_058
.L___atomic_xor_fetch_2_040:
        ldxrh   w2, [x0]
        eor w2, w2, w1
        stxrh   w3, w2, [x0]
        cbnz    w3,  .L___atomic_xor_fetch_2_040
        and w0, w2, #0xffff
        ret
.L___atomic_xor_fetch_2_058:
        ldaxrh  w2, [x0]
        eor w2, w2, w1
        stlxrh  w3, w2, [x0]
        cbnz    w3,  .L___atomic_xor_fetch_2_058
        and w0, w2, #0xffff
        ret
	.size   _(__atomic_xor_fetch_2), .-_(__atomic_xor_fetch_2)

#endif
        .global _(__atomic_xor_fetch_4)
        .type   _(__atomic_xor_fetch_4), %function
_(__atomic_xor_fetch_4):
#ifdef __TINYC__
        .int 0xaa0003e3
        .int 0x350000c2
        .int 0x885f7c60
        .int 0x4a010000
        .int 0x88027c60
        .int 0x35ffffa2
        .int 0xd65f03c0
        .int 0x885ffc60
        .int 0x4a010000
        .int 0x8802fc60
        .int 0x35ffffa2
        .int 0xd65f03c0
#else
        mov x3, x0
        cbnz    w2,  .L___atomic_xor_fetch_4_04c
.L___atomic_xor_fetch_4_038:
        ldxr    w0, [x3]
        eor w0, w0, w1
        stxr    w2, w0, [x3]
        cbnz    w2,  .L___atomic_xor_fetch_4_038
        ret
.L___atomic_xor_fetch_4_04c:
        ldaxr   w0, [x3]
        eor w0, w0, w1
        stlxr   w2, w0, [x3]
        cbnz    w2,  .L___atomic_xor_fetch_4_04c
        ret
	.size   _(__atomic_xor_fetch_4), .-_(__atomic_xor_fetch_4)

#endif
        .global _(__atomic_xor_fetch_8)
        .type   _(__atomic_xor_fetch_8), %function
_(__atomic_xor_fetch_8):
#ifdef __TINYC__
        .int 0xaa0003e3
        .int 0x350000c2
        .int 0xc85f7c60
        .int 0xca010000
        .int 0xc8027c60
        .int 0x35ffffa2
        .int 0xd65f03c0
        .int 0xc85ffc60
        .int 0xca010000
        .int 0xc802fc60
        .int 0x35ffffa2
        .int 0xd65f03c0
#else
        mov x3, x0
        cbnz    w2,  .L___atomic_xor_fetch_8_04c
.L___atomic_xor_fetch_8_038:
        ldxr    x0, [x3]
        eor x0, x0, x1
        stxr    w2, x0, [x3]
        cbnz    w2,  .L___atomic_xor_fetch_8_038
        ret
.L___atomic_xor_fetch_8_04c:
        ldaxr   x0, [x3]
        eor x0, x0, x1
        stlxr   w2, x0, [x3]
        cbnz    w2,  .L___atomic_xor_fetch_8_04c
        ret
	.size   _(__atomic_xor_fetch_8), .-_(__atomic_xor_fetch_8)

#endif
        .global _(__atomic_test_and_set_1)
        .type   _(__atomic_test_and_set_1), %function
_(__atomic_test_and_set_1):
#ifdef __TINYC__
        .int 0x52800022
        .int 0x350000c1
        .int 0x085f7c01
        .int 0x08037c02
        .int 0x35ffffc3
        .int 0x12001c20
        .int 0xd65f03c0
        .int 0x085ffc01
        .int 0x0803fc02
        .int 0x35ffffc3
        .int 0x12001c20
        .int 0xd65f03c0
#else
        mov w2, #0x1                    // #1
        cbnz    w1,  .L___atomic_test_and_set_1_01c
.L___atomic_test_and_set_1_008:
        ldxrb   w1, [x0]
        stxrb   w3, w2, [x0]
        cbnz    w3,  .L___atomic_test_and_set_1_008
        and w0, w1, #0xff
        ret
.L___atomic_test_and_set_1_01c:
        ldaxrb  w1, [x0]
        stlxrb  w3, w2, [x0]
        cbnz    w3,  .L___atomic_test_and_set_1_01c
        and w0, w1, #0xff
        ret
	.size   _(__atomic_test_and_set_1), .-_(__atomic_test_and_set_1)

#endif
        .global _(__atomic_test_and_set_2)
        .type   _(__atomic_test_and_set_2), %function
_(__atomic_test_and_set_2):
#ifdef __TINYC__
        .int 0x52800022
        .int 0x350000c1
        .int 0x085f7c01
        .int 0x08037c02
        .int 0x35ffffc3
        .int 0x12001c20
        .int 0xd65f03c0
        .int 0x085ffc01
        .int 0x0803fc02
        .int 0x35ffffc3
        .int 0x12001c20
        .int 0xd65f03c0
#else
        mov w2, #0x1                    // #1
        cbnz    w1,  .L___atomic_test_and_set_2_01c
.L___atomic_test_and_set_2_008:
        ldxrb   w1, [x0]
        stxrb   w3, w2, [x0]
        cbnz    w3,  .L___atomic_test_and_set_2_008
        and w0, w1, #0xff
        ret
.L___atomic_test_and_set_2_01c:
        ldaxrb  w1, [x0]
        stlxrb  w3, w2, [x0]
        cbnz    w3,  .L___atomic_test_and_set_2_01c
        and w0, w1, #0xff
        ret
	.size   _(__atomic_test_and_set_2), .-_(__atomic_test_and_set_2)

#endif
        .global _(__atomic_test_and_set_4)
        .type   _(__atomic_test_and_set_4), %function
_(__atomic_test_and_set_4):
#ifdef __TINYC__
        .int 0x52800022
        .int 0x350000c1
        .int 0x085f7c01
        .int 0x08037c02
        .int 0x35ffffc3
        .int 0x12001c20
        .int 0xd65f03c0
        .int 0x085ffc01
        .int 0x0803fc02
        .int 0x35ffffc3
        .int 0x12001c20
        .int 0xd65f03c0
#else
        mov w2, #0x1                    // #1
        cbnz    w1,  .L___atomic_test_and_set_4_01c
.L___atomic_test_and_set_4_008:
        ldxrb   w1, [x0]
        stxrb   w3, w2, [x0]
        cbnz    w3,  .L___atomic_test_and_set_4_008
        and w0, w1, #0xff
        ret
.L___atomic_test_and_set_4_01c:
        ldaxrb  w1, [x0]
        stlxrb  w3, w2, [x0]
        cbnz    w3,  .L___atomic_test_and_set_4_01c
        and w0, w1, #0xff
        ret
	.size   _(__atomic_test_and_set_4), .-_(__atomic_test_and_set_4)

#endif
        .global _(__atomic_test_and_set_8)
        .type   _(__atomic_test_and_set_8), %function
_(__atomic_test_and_set_8):
#ifdef __TINYC__
        .int 0x52800022
        .int 0x350000c1
        .int 0x085f7c01
        .int 0x08037c02
        .int 0x35ffffc3
        .int 0x12001c20
        .int 0xd65f03c0
        .int 0x085ffc01
        .int 0x0803fc02
        .int 0x35ffffc3
        .int 0x12001c20
        .int 0xd65f03c0
#else
        mov w2, #0x1                    // #1
        cbnz    w1,  .L___atomic_test_and_set_8_01c
.L___atomic_test_and_set_8_008:
        ldxrb   w1, [x0]
        stxrb   w3, w2, [x0]
        cbnz    w3,  .L___atomic_test_and_set_8_008
        and w0, w1, #0xff
        ret
.L___atomic_test_and_set_8_01c:
        ldaxrb  w1, [x0]
        stlxrb  w3, w2, [x0]
        cbnz    w3,  .L___atomic_test_and_set_8_01c
        and w0, w1, #0xff
        ret
	.size   _(__atomic_test_and_set_8), .-_(__atomic_test_and_set_8)

#endif
        .global _(atomic_thread_fence)
        .type   _(atomic_thread_fence), %function
_(atomic_thread_fence):
#ifdef __TINYC__
        .int 0xd5033bbf
        .int 0xd65f03c0
#else
        dmb ish
        ret
	.size   _(atomic_thread_fence), .-_(atomic_thread_fence)

#endif
        .global _(atomic_signal_fence)
        .type   _(atomic_signal_fence), %function
_(atomic_signal_fence):
#ifdef __TINYC__
        .int 0xd65f03c0
#else
        ret
	.size   _(atomic_signal_fence), .-_(atomic_signal_fence)

#endif
        .global _(atomic_flag_test_and_set)
        .type   _(atomic_flag_test_and_set), %function
_(atomic_flag_test_and_set):
#ifdef __TINYC__
        .int 0xaa0003e1
        .int 0x52800022
        .int 0x085ffc20
        .int 0x0803fc22
        .int 0x35ffffc3
        .int 0xd65f03c0
#else
        mov x1, x0
        mov w2, #0x1                    // #1
.L_atomic_flag_test_and_set_008:
        ldaxrb  w0, [x1]
        stlxrb  w3, w2, [x1]
        cbnz    w3,  .L_atomic_flag_test_and_set_008
        ret
	.size   _(atomic_flag_test_and_set), .-_(atomic_flag_test_and_set)

#endif
        .global _(atomic_flag_test_and_set_explicit)
        .type   _(atomic_flag_test_and_set_explicit), %function
_(atomic_flag_test_and_set_explicit):
#ifdef __TINYC__
        .int 0xaa0003e1
        .int 0x52800022
        .int 0x085ffc20
        .int 0x0803fc22
        .int 0x35ffffc3
        .int 0xd65f03c0
#else
        mov x1, x0
        mov w2, #0x1                    // #1
.L_atomic_flag_test_and_set_explicit_020:
        ldaxrb  w0, [x1]
        stlxrb  w3, w2, [x1]
        cbnz    w3,  .L_atomic_flag_test_and_set_explicit_020
        ret
	.size   _(atomic_flag_test_and_set_explicit), .-_(atomic_flag_test_and_set_explicit)

#endif
        .global _(atomic_flag_clear)
        .type   _(atomic_flag_clear), %function
_(atomic_flag_clear):
#ifdef __TINYC__
        .int 0x089ffc1f
        .int 0xd65f03c0
#else
        stlrb   wzr, [x0]
        ret
	.size   _(atomic_flag_clear), .-_(atomic_flag_clear)

#endif
        .global _(atomic_flag_clear_explicit)
        .type   _(atomic_flag_clear_explicit), %function
_(atomic_flag_clear_explicit):
#ifdef __TINYC__
        .int 0x089ffc1f
        .int 0xd65f03c0
#else
        stlrb   wzr, [x0]
        ret
	.size   _(atomic_flag_clear_explicit), .-_(atomic_flag_clear_explicit)

#endif
#endif //__aarch64__

/* ---------------------------------------------- */
#if defined __riscv
        .text
        .align  2

        .global _(__atomic_load_1)
        .type   _(__atomic_load_1), %function
_(__atomic_load_1):
#ifdef __TINYC__
        .int 0x0330000f
        .int 0x00054503
        .int 0x0330000f
        .short 0x8082
#else
        fence   rw,rw
        lbu a0,0(a0)
        fence   rw,rw
        ret
	.size   _(__atomic_load_1), .-_(__atomic_load_1)

#endif
        .global _(__atomic_load_2)
        .type   _(__atomic_load_2), %function
_(__atomic_load_2):
#ifdef __TINYC__
        .int 0x0330000f
        .int 0x00055503
        .int 0x0330000f
        .short 0x8082
#else
        fence   rw,rw
        lhu a0,0(a0)
        fence   rw,rw
        ret
	.size   _(__atomic_load_2), .-_(__atomic_load_2)

#endif
        .global _(__atomic_load_4)
        .type   _(__atomic_load_4), %function
_(__atomic_load_4):
#ifdef __TINYC__
        .int 0x0330000f
        .short 0x4108
        .int 0x0230000f
        .short 0x2501
        .short 0x8082
#else
        fence   rw,rw
        lw  a0,0(a0)
        fence   r,rw
        sext.w  a0,a0
        ret
	.size   _(__atomic_load_4), .-_(__atomic_load_4)

#endif
        .global _(__atomic_load_8)
        .type   _(__atomic_load_8), %function
_(__atomic_load_8):
#ifdef __TINYC__
        .int 0x0330000f
        .short 0x6108
        .int 0x0230000f
        .short 0x8082
#else
        fence   rw,rw
        ld  a0,0(a0)
        fence   r,rw
        ret
	.size   _(__atomic_load_8), .-_(__atomic_load_8)

#endif
        .global _(__atomic_store_1)
        .type   _(__atomic_store_1), %function
_(__atomic_store_1):
#ifdef __TINYC__
        .int 0x0330000f
        .int 0x00b50023
        .int 0x0330000f
        .short 0x8082
#else
        fence   rw,rw
        sb  a1,0(a0)
        fence   rw,rw
        ret
	.size   _(__atomic_store_1), .-_(__atomic_store_1)

#endif
        .global _(__atomic_store_2)
        .type   _(__atomic_store_2), %function
_(__atomic_store_2):
#ifdef __TINYC__
        .int 0x0330000f
        .int 0x00b51023
        .int 0x0330000f
        .short 0x8082
#else
        fence   rw,rw
        sh  a1,0(a0)
        fence   rw,rw
        ret
	.size   _(__atomic_store_2), .-_(__atomic_store_2)

#endif
        .global _(__atomic_store_4)
        .type   _(__atomic_store_4), %function
_(__atomic_store_4):
#ifdef __TINYC__
        .int 0x0310000f
        .short 0xc10c
        .int 0x0330000f
        .short 0x8082
#else
        fence   rw,w
        sw  a1,0(a0)
        fence   rw,rw
        ret
	.size   _(__atomic_store_4), .-_(__atomic_store_4)

#endif
        .global _(__atomic_store_8)
        .type   _(__atomic_store_8), %function
_(__atomic_store_8):
#ifdef __TINYC__
        .int 0x0310000f
        .short 0xe10c
        .int 0x0330000f
        .short 0x8082
#else
        fence   rw,w
        sd  a1,0(a0)
        fence   rw,rw
        ret
	.size   _(__atomic_store_8), .-_(__atomic_store_8)

#endif
        .global _(__atomic_compare_exchange_1)
        .type   _(__atomic_compare_exchange_1), %function
_(__atomic_compare_exchange_1):
#ifdef __TINYC__
        .int 0x0005c683
        .int 0x00357793
        .int 0x0037979b
        .int 0x0ff00713
        .int 0x00f7173b
        .int 0x00f698bb
        .int 0x00f6163b
        .short 0x9971
        .int 0xfff74313
        .int 0x00e8f8b3
        .short 0x8e79
        .int 0x1605282f
        .int 0x00e87e33
        .int 0x011e1a63
        .int 0x00687e33
        .int 0x00ce6e33
        .int 0x1bc52e2f
        .int 0xfe0e14e3
        .int 0x40f8583b
        .int 0x0188179b
        .int 0x0186969b
        .int 0x4187d79b
        .int 0x4186d69b
        .short 0x9f95
        .int 0x0017b513
        .short 0xc399
        .int 0x01058023
        .short 0x8905
        .short 0x8082
#else
        lbu a3,0(a1)
        andi    a5,a0,3
        slliw   a5,a5,0x3
        li  a4,255
        sllw    a4,a4,a5
        sllw    a7,a3,a5
        sllw    a2,a2,a5
        andi    a0,a0,-4
        not t1,a4
        and a7,a7,a4
        and a2,a2,a4
.L___atomic_compare_exchange_1_028:
        lr.w.aqrl   a6,(a0)
        and t3,a6,a4
        bne t3,a7, .L___atomic_compare_exchange_1_044
        and t3,a6,t1
        or  t3,t3,a2
        sc.w.rl t3,t3,(a0)
        bnez    t3, .L___atomic_compare_exchange_1_028
.L___atomic_compare_exchange_1_044:
        sraw    a6,a6,a5
        slliw   a5,a6,0x18
        slliw   a3,a3,0x18
        sraiw   a5,a5,0x18
        sraiw   a3,a3,0x18
        subw    a5,a5,a3
        seqz    a0,a5
        beqz    a5, .L___atomic_compare_exchange_1_064
        sb  a6,0(a1)
.L___atomic_compare_exchange_1_064:
        andi    a0,a0,1
        ret
	.size   _(__atomic_compare_exchange_1), .-_(__atomic_compare_exchange_1)

#endif
        .global _(__atomic_compare_exchange_2)
        .type   _(__atomic_compare_exchange_2), %function
_(__atomic_compare_exchange_2):
#ifdef __TINYC__
        .int 0x0005d683
        .int 0x00357713
        .short 0x67c1
        .int 0x0037171b
        .short 0x37fd
        .int 0x00e797bb
        .int 0x00e698bb
        .int 0x00e6163b
        .short 0x9971
        .int 0xfff7c313
        .int 0x00f8f8b3
        .short 0x8e7d
        .int 0x1605282f
        .int 0x00f87e33
        .int 0x011e1a63
        .int 0x00687e33
        .int 0x00ce6e33
        .int 0x1bc52e2f
        .int 0xfe0e14e3
        .int 0x40e8583b
        .int 0x0108179b
        .int 0x0106969b
        .int 0x4107d79b
        .int 0x4106d69b
        .short 0x9f95
        .int 0x0017b513
        .short 0xc399
        .int 0x01059023
        .short 0x8905
        .short 0x8082
#else
        lhu a3,0(a1)
        andi    a4,a0,3
        lui a5,0x10
        slliw   a4,a4,0x3
        addiw   a5,a5,-1 # ffff <.LASF16+0xfec8>
        sllw    a5,a5,a4
        sllw    a7,a3,a4
        sllw    a2,a2,a4
        andi    a0,a0,-4
        not t1,a5
        and a7,a7,a5
        and a2,a2,a5
.L___atomic_compare_exchange_2_028:
        lr.w.aqrl   a6,(a0)
        and t3,a6,a5
        bne t3,a7, .L___atomic_compare_exchange_2_044
        and t3,a6,t1
        or  t3,t3,a2
        sc.w.rl t3,t3,(a0)
        bnez    t3, .L___atomic_compare_exchange_2_028
.L___atomic_compare_exchange_2_044:
        sraw    a6,a6,a4
        slliw   a5,a6,0x10
        slliw   a3,a3,0x10
        sraiw   a5,a5,0x10
        sraiw   a3,a3,0x10
        subw    a5,a5,a3
        seqz    a0,a5
        beqz    a5, .L___atomic_compare_exchange_2_064
        sh  a6,0(a1)
.L___atomic_compare_exchange_2_064:
        andi    a0,a0,1
        ret
	.size   _(__atomic_compare_exchange_2), .-_(__atomic_compare_exchange_2)

#endif
        .global _(__atomic_compare_exchange_4)
        .type   _(__atomic_compare_exchange_4), %function
_(__atomic_compare_exchange_4):
#ifdef __TINYC__
        .short 0x419c
        .int 0x1605272f
        .int 0x00f71563
        .int 0x1ac526af
        .short 0xfaf5
        .int 0x40f707bb
        .int 0x0017b513
        .short 0xc391
        .short 0xc198
        .short 0x8905
        .short 0x8082
#else
        lw  a5,0(a1)
.L___atomic_compare_exchange_4_002:
        lr.w.aqrl   a4,(a0)
        bne a4,a5, .L___atomic_compare_exchange_4_010
        sc.w.rl a3,a2,(a0)
        bnez    a3, .L___atomic_compare_exchange_4_002
.L___atomic_compare_exchange_4_010:
        subw    a5,a4,a5
        seqz    a0,a5
        beqz    a5, .L___atomic_compare_exchange_4_01c
        sw  a4,0(a1)
.L___atomic_compare_exchange_4_01c:
        andi    a0,a0,1
        ret
	.size   _(__atomic_compare_exchange_4), .-_(__atomic_compare_exchange_4)

#endif
        .global _(__atomic_compare_exchange_8)
        .type   _(__atomic_compare_exchange_8), %function
_(__atomic_compare_exchange_8):
#ifdef __TINYC__
        .short 0x619c
        .int 0x1605372f
        .int 0x00f71563
        .int 0x1ac536af
        .short 0xfaf5
        .int 0x40f707b3
        .int 0x0017b513
        .short 0xc391
        .short 0xe198
        .short 0x8905
        .short 0x8082
#else
        ld  a5,0(a1)
.L___atomic_compare_exchange_8_002:
        lr.d.aqrl   a4,(a0)
        bne a4,a5, .L___atomic_compare_exchange_8_010
        sc.d.rl a3,a2,(a0)
        bnez    a3, .L___atomic_compare_exchange_8_002
.L___atomic_compare_exchange_8_010:
        sub a5,a4,a5
        seqz    a0,a5
        beqz    a5, .L___atomic_compare_exchange_8_01c
        sd  a4,0(a1)
.L___atomic_compare_exchange_8_01c:
        andi    a0,a0,1
        ret
	.size   _(__atomic_compare_exchange_8), .-_(__atomic_compare_exchange_8)

#endif
        .global _(__atomic_exchange_1)
        .type   _(__atomic_exchange_1), %function
_(__atomic_exchange_1):
#ifdef __TINYC__
        .int 0x00357793
        .int 0x0037979b
        .int 0x0ff00713
        .int 0x00f7173b
        .short 0x9971
        .int 0xfff74713
        .int 0x00f595bb
        .int 0x160526af
        .int 0x00e6f633
        .short 0x8e4d
        .int 0x1ac5262f
        .short 0xfa6d
        .int 0x40f6d6bb
        .int 0x0ff6f513
        .short 0x8082
#else
        andi    a5,a0,3
        slliw   a5,a5,0x3
        li  a4,255
        sllw    a4,a4,a5
        andi    a0,a0,-4
        not a4,a4
        sllw    a1,a1,a5
.L___atomic_exchange_1_01a:
        lr.w.aqrl   a3,(a0)
        and a2,a3,a4
        or  a2,a2,a1
        sc.w.rl a2,a2,(a0)
        bnez    a2, .L___atomic_exchange_1_01a
        sraw    a3,a3,a5
        zext.b  a0,a3
        ret
	.size   _(__atomic_exchange_1), .-_(__atomic_exchange_1)

#endif
        .global _(__atomic_exchange_2)
        .type   _(__atomic_exchange_2), %function
_(__atomic_exchange_2):
#ifdef __TINYC__
        .int 0x00357713
        .short 0x67c1
        .int 0x0037171b
        .short 0x37fd
        .int 0x00e797bb
        .short 0x9971
        .int 0xfff7c793
        .int 0x00e595bb
        .int 0x160526af
        .int 0x00f6f633
        .short 0x8e4d
        .int 0x1ac5262f
        .short 0xfa6d
        .int 0x40e6d6bb
        .int 0x03069513
        .short 0x9141
        .short 0x8082
#else
        andi    a4,a0,3
        lui a5,0x10
        slliw   a4,a4,0x3
        addiw   a5,a5,-1 # ffff <.LASF15+0xfee2>
        sllw    a5,a5,a4
        andi    a0,a0,-4
        not a5,a5
        sllw    a1,a1,a4
.L___atomic_exchange_2_01a:
        lr.w.aqrl   a3,(a0)
        and a2,a3,a5
        or  a2,a2,a1
        sc.w.rl a2,a2,(a0)
        bnez    a2, .L___atomic_exchange_2_01a
        sraw    a3,a3,a4
        slli    a0,a3,0x30
        srli    a0,a0,0x30
        ret
	.size   _(__atomic_exchange_2), .-_(__atomic_exchange_2)

#endif
        .global _(__atomic_exchange_4)
        .type   _(__atomic_exchange_4), %function
_(__atomic_exchange_4):
#ifdef __TINYC__
        .int 0x0eb525af
        .int 0x0005851b
        .short 0x8082
#else
        amoswap.w.aqrl  a1,a1,(a0)
        sext.w  a0,a1
        ret
	.size   _(__atomic_exchange_4), .-_(__atomic_exchange_4)

#endif
        .global _(__atomic_exchange_8)
        .type   _(__atomic_exchange_8), %function
_(__atomic_exchange_8):
#ifdef __TINYC__
        .int 0x0eb535af
        .short 0x852e
        .short 0x8082
#else
        amoswap.d.aqrl  a1,a1,(a0)
        mv  a0,a1
        ret
	.size   _(__atomic_exchange_8), .-_(__atomic_exchange_8)

#endif
        .global _(__atomic_fetch_add_1)
        .type   _(__atomic_fetch_add_1), %function
_(__atomic_fetch_add_1):
#ifdef __TINYC__
        .int 0x00357713
        .int 0x0037171b
        .int 0x0ff00693
        .int 0x00e696bb
        .int 0xffc57793
        .int 0xfff6c613
        .int 0x00e595bb
        .int 0x1607a52f
        .int 0x00b50833
        .int 0x00d87833
        .int 0x00c578b3
        .int 0x0108e8b3
        .int 0x1b17a82f
        .int 0xfe0814e3
        .int 0x40e5553b
        .int 0x0ff57513
        .short 0x8082
#else
        andi    a4,a0,3
        slliw   a4,a4,0x3
        li  a3,255
        sllw    a3,a3,a4
        andi    a5,a0,-4
        not a2,a3
        sllw    a1,a1,a4
.L___atomic_fetch_add_1_01c:
        lr.w.aqrl   a0,(a5)
        add a6,a0,a1
        and a6,a6,a3
        and a7,a0,a2
        or  a7,a7,a6
        sc.w.rl a6,a7,(a5)
        bnez    a6, .L___atomic_fetch_add_1_01c
        sraw    a0,a0,a4
        zext.b  a0,a0
        ret
	.size   _(__atomic_fetch_add_1), .-_(__atomic_fetch_add_1)

#endif
        .global _(__atomic_fetch_add_2)
        .type   _(__atomic_fetch_add_2), %function
_(__atomic_fetch_add_2):
#ifdef __TINYC__
        .int 0x00357693
        .short 0x6741
        .int 0x0036969b
        .short 0x377d
        .int 0x00d7173b
        .int 0xffc57793
        .int 0xfff74613
        .int 0x00d595bb
        .int 0x1607a52f
        .int 0x00b50833
        .int 0x00e87833
        .int 0x00c578b3
        .int 0x0108e8b3
        .int 0x1b17a82f
        .int 0xfe0814e3
        .int 0x40d5553b
        .short 0x1542
        .short 0x9141
        .short 0x8082
#else
        andi    a3,a0,3
        lui a4,0x10
        slliw   a3,a3,0x3
        addiw   a4,a4,-1 # ffff <.LASF15+0xfed0>
        sllw    a4,a4,a3
        andi    a5,a0,-4
        not a2,a4
        sllw    a1,a1,a3
.L___atomic_fetch_add_2_01c:
        lr.w.aqrl   a0,(a5)
        add a6,a0,a1
        and a6,a6,a4
        and a7,a0,a2
        or  a7,a7,a6
        sc.w.rl a6,a7,(a5)
        bnez    a6, .L___atomic_fetch_add_2_01c
        sraw    a0,a0,a3
        slli    a0,a0,0x30
        srli    a0,a0,0x30
        ret
	.size   _(__atomic_fetch_add_2), .-_(__atomic_fetch_add_2)

#endif
        .global _(__atomic_fetch_add_4)
        .type   _(__atomic_fetch_add_4), %function
_(__atomic_fetch_add_4):
#ifdef __TINYC__
        .int 0x06b527af
        .int 0x0007851b
        .short 0x8082
#else
        amoadd.w.aqrl   a5,a1,(a0)
        sext.w  a0,a5
        ret
	.size   _(__atomic_fetch_add_4), .-_(__atomic_fetch_add_4)

#endif
        .global _(__atomic_fetch_add_8)
        .type   _(__atomic_fetch_add_8), %function
_(__atomic_fetch_add_8):
#ifdef __TINYC__
        .short 0x87aa
        .int 0x06b7b52f
        .short 0x8082
#else
        mv  a5,a0
        amoadd.d.aqrl   a0,a1,(a5)
        ret
	.size   _(__atomic_fetch_add_8), .-_(__atomic_fetch_add_8)

#endif
        .global _(__atomic_add_fetch_1)
        .type   _(__atomic_add_fetch_1), %function
_(__atomic_add_fetch_1):
#ifdef __TINYC__
        .int 0x00357713
        .int 0x0037171b
        .int 0x0ff00693
        .int 0x00e696bb
        .short 0x9971
        .int 0xfff6c813
        .int 0x00e5963b
        .int 0x160527af
        .int 0x00c788b3
        .int 0x00d8f8b3
        .int 0x0107f333
        .int 0x01136333
        .int 0x1a6528af
        .int 0xfe0894e3
        .int 0x40e7d7bb
        .int 0x00b7853b
        .int 0x0ff57513
        .short 0x8082
#else
        andi    a4,a0,3
        slliw   a4,a4,0x3
        li  a3,255
        sllw    a3,a3,a4
        andi    a0,a0,-4
        not a6,a3
        sllw    a2,a1,a4
.L___atomic_add_fetch_1_05c:
        lr.w.aqrl   a5,(a0)
        add a7,a5,a2
        and a7,a7,a3
        and t1,a5,a6
        or  t1,t1,a7
        sc.w.rl a7,t1,(a0)
        bnez    a7, .L___atomic_add_fetch_1_05c
        sraw    a5,a5,a4
        addw    a0,a5,a1
        zext.b  a0,a0
        ret
	.size   _(__atomic_add_fetch_1), .-_(__atomic_add_fetch_1)

#endif
        .global _(__atomic_add_fetch_2)
        .type   _(__atomic_add_fetch_2), %function
_(__atomic_add_fetch_2):
#ifdef __TINYC__
        .int 0x00357693
        .short 0x67c1
        .int 0x0036969b
        .short 0x37fd
        .int 0x00d797bb
        .short 0x9971
        .int 0xfff7c813
        .int 0x00d5963b
        .int 0x1605272f
        .int 0x00c708b3
        .int 0x00f8f8b3
        .int 0x01077333
        .int 0x01136333
        .int 0x1a6528af
        .int 0xfe0894e3
        .int 0x40d7573b
        .int 0x00b7053b
        .short 0x1542
        .short 0x9141
        .short 0x8082
#else
        andi    a3,a0,3
        lui a5,0x10
        slliw   a3,a3,0x3
        addiw   a5,a5,-1 # ffff <.LASF15+0xfed0>
        sllw    a5,a5,a3
        andi    a0,a0,-4
        not a6,a5
        sllw    a2,a1,a3
.L___atomic_add_fetch_2_05c:
        lr.w.aqrl   a4,(a0)
        add a7,a4,a2
        and a7,a7,a5
        and t1,a4,a6
        or  t1,t1,a7
        sc.w.rl a7,t1,(a0)
        bnez    a7, .L___atomic_add_fetch_2_05c
        sraw    a4,a4,a3
        addw    a0,a4,a1
        slli    a0,a0,0x30
        srli    a0,a0,0x30
        ret
	.size   _(__atomic_add_fetch_2), .-_(__atomic_add_fetch_2)

#endif
        .global _(__atomic_add_fetch_4)
        .type   _(__atomic_add_fetch_4), %function
_(__atomic_add_fetch_4):
#ifdef __TINYC__
        .short 0x87aa
        .int 0x06b7a52f
        .short 0x9d2d
        .short 0x8082
#else
        mv  a5,a0
        amoadd.w.aqrl   a0,a1,(a5)
        addw    a0,a0,a1
        ret
	.size   _(__atomic_add_fetch_4), .-_(__atomic_add_fetch_4)

#endif
        .global _(__atomic_add_fetch_8)
        .type   _(__atomic_add_fetch_8), %function
_(__atomic_add_fetch_8):
#ifdef __TINYC__
        .short 0x87aa
        .int 0x06b7b52f
        .short 0x952e
        .short 0x8082
#else
        mv  a5,a0
        amoadd.d.aqrl   a0,a1,(a5)
        add a0,a0,a1
        ret
	.size   _(__atomic_add_fetch_8), .-_(__atomic_add_fetch_8)

#endif
        .global _(__atomic_fetch_sub_1)
        .type   _(__atomic_fetch_sub_1), %function
_(__atomic_fetch_sub_1):
#ifdef __TINYC__
        .int 0x00357713
        .int 0x0037171b
        .int 0x0ff00693
        .int 0x00e696bb
        .int 0x40b005bb
        .int 0xffc57793
        .int 0xfff6c613
        .int 0x00e595bb
        .int 0x1607a52f
        .int 0x00b50833
        .int 0x00d87833
        .int 0x00c578b3
        .int 0x0108e8b3
        .int 0x1b17a82f
        .int 0xfe0814e3
        .int 0x40e5553b
        .int 0x0ff57513
        .short 0x8082
#else
        andi    a4,a0,3
        slliw   a4,a4,0x3
        li  a3,255
        sllw    a3,a3,a4
        negw    a1,a1
        andi    a5,a0,-4
        not a2,a3
        sllw    a1,a1,a4
.L___atomic_fetch_sub_1_020:
        lr.w.aqrl   a0,(a5)
        add a6,a0,a1
        and a6,a6,a3
        and a7,a0,a2
        or  a7,a7,a6
        sc.w.rl a6,a7,(a5)
        bnez    a6, .L___atomic_fetch_sub_1_020
        sraw    a0,a0,a4
        zext.b  a0,a0
        ret
	.size   _(__atomic_fetch_sub_1), .-_(__atomic_fetch_sub_1)

#endif
        .global _(__atomic_fetch_sub_2)
        .type   _(__atomic_fetch_sub_2), %function
_(__atomic_fetch_sub_2):
#ifdef __TINYC__
        .int 0x00357693
        .short 0x6741
        .int 0x0036969b
        .short 0x377d
        .int 0x00d7173b
        .int 0x40b005bb
        .int 0xffc57793
        .int 0xfff74613
        .int 0x00d595bb
        .int 0x1607a52f
        .int 0x00b50833
        .int 0x00e87833
        .int 0x00c578b3
        .int 0x0108e8b3
        .int 0x1b17a82f
        .int 0xfe0814e3
        .int 0x40d5553b
        .short 0x1542
        .short 0x9141
        .short 0x8082
#else
        andi    a3,a0,3
        lui a4,0x10
        slliw   a3,a3,0x3
        addiw   a4,a4,-1 # ffff <.LASF15+0xfed0>
        sllw    a4,a4,a3
        negw    a1,a1
        andi    a5,a0,-4
        not a2,a4
        sllw    a1,a1,a3
.L___atomic_fetch_sub_2_020:
        lr.w.aqrl   a0,(a5)
        add a6,a0,a1
        and a6,a6,a4
        and a7,a0,a2
        or  a7,a7,a6
        sc.w.rl a6,a7,(a5)
        bnez    a6, .L___atomic_fetch_sub_2_020
        sraw    a0,a0,a3
        slli    a0,a0,0x30
        srli    a0,a0,0x30
        ret
	.size   _(__atomic_fetch_sub_2), .-_(__atomic_fetch_sub_2)

#endif
        .global _(__atomic_fetch_sub_4)
        .type   _(__atomic_fetch_sub_4), %function
_(__atomic_fetch_sub_4):
#ifdef __TINYC__
        .int 0x40b005bb
        .int 0x06b527af
        .int 0x0007851b
        .short 0x8082
#else
        negw    a1,a1
        amoadd.w.aqrl   a5,a1,(a0)
        sext.w  a0,a5
        ret
	.size   _(__atomic_fetch_sub_4), .-_(__atomic_fetch_sub_4)

#endif
        .global _(__atomic_fetch_sub_8)
        .type   _(__atomic_fetch_sub_8), %function
_(__atomic_fetch_sub_8):
#ifdef __TINYC__
        .short 0x87aa
        .int 0x40b005b3
        .int 0x06b7b52f
        .short 0x8082
#else
        mv  a5,a0
        neg a1,a1
        amoadd.d.aqrl   a0,a1,(a5)
        ret
	.size   _(__atomic_fetch_sub_8), .-_(__atomic_fetch_sub_8)

#endif
        .global _(__atomic_sub_fetch_1)
        .type   _(__atomic_sub_fetch_1), %function
_(__atomic_sub_fetch_1):
#ifdef __TINYC__
        .int 0x00357713
        .int 0x0037171b
        .int 0x0ff00693
        .int 0x40b005bb
        .int 0x00e696bb
        .short 0x9971
        .int 0xfff6c813
        .int 0x00e5963b
        .int 0x160527af
        .int 0x00c788b3
        .int 0x00d8f8b3
        .int 0x0107f333
        .int 0x01136333
        .int 0x1a6528af
        .int 0xfe0894e3
        .int 0x40e7d7bb
        .int 0x00b7853b
        .int 0x0ff57513
        .short 0x8082
#else
        andi    a4,a0,3
        slliw   a4,a4,0x3
        li  a3,255
        negw    a1,a1
        sllw    a3,a3,a4
        andi    a0,a0,-4
        not a6,a3
        sllw    a2,a1,a4
.L___atomic_sub_fetch_1_064:
        lr.w.aqrl   a5,(a0)
        add a7,a5,a2
        and a7,a7,a3
        and t1,a5,a6
        or  t1,t1,a7
        sc.w.rl a7,t1,(a0)
        bnez    a7, .L___atomic_sub_fetch_1_064
        sraw    a5,a5,a4
        addw    a0,a5,a1
        zext.b  a0,a0
        ret
	.size   _(__atomic_sub_fetch_1), .-_(__atomic_sub_fetch_1)

#endif
        .global _(__atomic_sub_fetch_2)
        .type   _(__atomic_sub_fetch_2), %function
_(__atomic_sub_fetch_2):
#ifdef __TINYC__
        .int 0x00357693
        .short 0x67c1
        .int 0x0036969b
        .short 0x37fd
        .int 0x40b005bb
        .int 0x00d797bb
        .short 0x9971
        .int 0xfff7c813
        .int 0x00d5963b
        .int 0x1605272f
        .int 0x00c708b3
        .int 0x00f8f8b3
        .int 0x01077333
        .int 0x01136333
        .int 0x1a6528af
        .int 0xfe0894e3
        .int 0x40d7573b
        .int 0x00b7053b
        .short 0x1542
        .short 0x9141
        .short 0x8082
#else
        andi    a3,a0,3
        lui a5,0x10
        slliw   a3,a3,0x3
        addiw   a5,a5,-1 # ffff <.LASF15+0xfed0>
        negw    a1,a1
        sllw    a5,a5,a3
        andi    a0,a0,-4
        not a6,a5
        sllw    a2,a1,a3
.L___atomic_sub_fetch_2_064:
        lr.w.aqrl   a4,(a0)
        add a7,a4,a2
        and a7,a7,a5
        and t1,a4,a6
        or  t1,t1,a7
        sc.w.rl a7,t1,(a0)
        bnez    a7, .L___atomic_sub_fetch_2_064
        sraw    a4,a4,a3
        addw    a0,a4,a1
        slli    a0,a0,0x30
        srli    a0,a0,0x30
        ret
	.size   _(__atomic_sub_fetch_2), .-_(__atomic_sub_fetch_2)

#endif
        .global _(__atomic_sub_fetch_4)
        .type   _(__atomic_sub_fetch_4), %function
_(__atomic_sub_fetch_4):
#ifdef __TINYC__
        .int 0x40b005bb
        .int 0x06b527af
        .int 0x00b7853b
        .short 0x8082
#else
        negw    a1,a1
        amoadd.w.aqrl   a5,a1,(a0)
        addw    a0,a5,a1
        ret
	.size   _(__atomic_sub_fetch_4), .-_(__atomic_sub_fetch_4)

#endif
        .global _(__atomic_sub_fetch_8)
        .type   _(__atomic_sub_fetch_8), %function
_(__atomic_sub_fetch_8):
#ifdef __TINYC__
        .int 0x40b005b3
        .int 0x06b537af
        .int 0x00b78533
        .short 0x8082
#else
        neg a1,a1
        amoadd.d.aqrl   a5,a1,(a0)
        add a0,a5,a1
        ret
	.size   _(__atomic_sub_fetch_8), .-_(__atomic_sub_fetch_8)

#endif
        .global _(__atomic_fetch_and_1)
        .type   _(__atomic_fetch_and_1), %function
_(__atomic_fetch_and_1):
#ifdef __TINYC__
        .int 0x00357713
        .int 0x0037171b
        .int 0x0ff00693
        .int 0x00e696bb
        .int 0xffc57793
        .int 0xfff6c613
        .int 0x00e595bb
        .int 0x1607a52f
        .int 0x00b57833
        .int 0x00d87833
        .int 0x00c578b3
        .int 0x0108e8b3
        .int 0x1b17a82f
        .int 0xfe0814e3
        .int 0x40e5553b
        .int 0x0ff57513
        .short 0x8082
#else
        andi    a4,a0,3
        slliw   a4,a4,0x3
        li  a3,255
        sllw    a3,a3,a4
        andi    a5,a0,-4
        not a2,a3
        sllw    a1,a1,a4
.L___atomic_fetch_and_1_01c:
        lr.w.aqrl   a0,(a5)
        and a6,a0,a1
        and a6,a6,a3
        and a7,a0,a2
        or  a7,a7,a6
        sc.w.rl a6,a7,(a5)
        bnez    a6, .L___atomic_fetch_and_1_01c
        sraw    a0,a0,a4
        zext.b  a0,a0
        ret
	.size   _(__atomic_fetch_and_1), .-_(__atomic_fetch_and_1)

#endif
        .global _(__atomic_fetch_and_2)
        .type   _(__atomic_fetch_and_2), %function
_(__atomic_fetch_and_2):
#ifdef __TINYC__
        .int 0x00357693
        .short 0x6741
        .int 0x0036969b
        .short 0x377d
        .int 0x00d7173b
        .int 0xffc57793
        .int 0xfff74613
        .int 0x00d595bb
        .int 0x1607a52f
        .int 0x00b57833
        .int 0x00e87833
        .int 0x00c578b3
        .int 0x0108e8b3
        .int 0x1b17a82f
        .int 0xfe0814e3
        .int 0x40d5553b
        .short 0x1542
        .short 0x9141
        .short 0x8082
#else
        andi    a3,a0,3
        lui a4,0x10
        slliw   a3,a3,0x3
        addiw   a4,a4,-1 # ffff <.LASF15+0xfed0>
        sllw    a4,a4,a3
        andi    a5,a0,-4
        not a2,a4
        sllw    a1,a1,a3
.L___atomic_fetch_and_2_01c:
        lr.w.aqrl   a0,(a5)
        and a6,a0,a1
        and a6,a6,a4
        and a7,a0,a2
        or  a7,a7,a6
        sc.w.rl a6,a7,(a5)
        bnez    a6, .L___atomic_fetch_and_2_01c
        sraw    a0,a0,a3
        slli    a0,a0,0x30
        srli    a0,a0,0x30
        ret
	.size   _(__atomic_fetch_and_2), .-_(__atomic_fetch_and_2)

#endif
        .global _(__atomic_fetch_and_4)
        .type   _(__atomic_fetch_and_4), %function
_(__atomic_fetch_and_4):
#ifdef __TINYC__
        .int 0x66b527af
        .int 0x0007851b
        .short 0x8082
#else
        amoand.w.aqrl   a5,a1,(a0)
        sext.w  a0,a5
        ret
	.size   _(__atomic_fetch_and_4), .-_(__atomic_fetch_and_4)

#endif
        .global _(__atomic_fetch_and_8)
        .type   _(__atomic_fetch_and_8), %function
_(__atomic_fetch_and_8):
#ifdef __TINYC__
        .short 0x87aa
        .int 0x66b7b52f
        .short 0x8082
#else
        mv  a5,a0
        amoand.d.aqrl   a0,a1,(a5)
        ret
	.size   _(__atomic_fetch_and_8), .-_(__atomic_fetch_and_8)

#endif
        .global _(__atomic_and_fetch_1)
        .type   _(__atomic_and_fetch_1), %function
_(__atomic_and_fetch_1):
#ifdef __TINYC__
        .int 0x00357713
        .int 0x0037171b
        .int 0x0ff00693
        .int 0x00e696bb
        .int 0xffc57793
        .int 0xfff6c813
        .int 0x00e5963b
        .int 0x1607a52f
        .int 0x00c578b3
        .int 0x00d8f8b3
        .int 0x01057333
        .int 0x01136333
        .int 0x1a67a8af
        .int 0xfe0894e3
        .int 0x40e5553b
        .short 0x8d6d
        .short 0x8082
#else
        andi    a4,a0,3
        slliw   a4,a4,0x3
        li  a3,255
        sllw    a3,a3,a4
        andi    a5,a0,-4
        not a6,a3
        sllw    a2,a1,a4
.L___atomic_and_fetch_1_05e:
        lr.w.aqrl   a0,(a5)
        and a7,a0,a2
        and a7,a7,a3
        and t1,a0,a6
        or  t1,t1,a7
        sc.w.rl a7,t1,(a5)
        bnez    a7, .L___atomic_and_fetch_1_05e
        sraw    a0,a0,a4
        and a0,a0,a1
        ret
	.size   _(__atomic_and_fetch_1), .-_(__atomic_and_fetch_1)

#endif
        .global _(__atomic_and_fetch_2)
        .type   _(__atomic_and_fetch_2), %function
_(__atomic_and_fetch_2):
#ifdef __TINYC__
        .int 0x00357693
        .short 0x6741
        .int 0x0036969b
        .short 0x377d
        .int 0x00d7173b
        .int 0xffc57793
        .int 0xfff74813
        .int 0x00d5963b
        .int 0x1607a52f
        .int 0x00c578b3
        .int 0x00e8f8b3
        .int 0x01057333
        .int 0x01136333
        .int 0x1a67a8af
        .int 0xfe0894e3
        .int 0x40d5553b
        .short 0x8d6d
        .short 0x8082
#else
        andi    a3,a0,3
        lui a4,0x10
        slliw   a3,a3,0x3
        addiw   a4,a4,-1 # ffff <.LASF15+0xfed0>
        sllw    a4,a4,a3
        andi    a5,a0,-4
        not a6,a4
        sllw    a2,a1,a3
.L___atomic_and_fetch_2_05e:
        lr.w.aqrl   a0,(a5)
        and a7,a0,a2
        and a7,a7,a4
        and t1,a0,a6
        or  t1,t1,a7
        sc.w.rl a7,t1,(a5)
        bnez    a7, .L___atomic_and_fetch_2_05e
        sraw    a0,a0,a3
        and a0,a0,a1
        ret
	.size   _(__atomic_and_fetch_2), .-_(__atomic_and_fetch_2)

#endif
        .global _(__atomic_and_fetch_4)
        .type   _(__atomic_and_fetch_4), %function
_(__atomic_and_fetch_4):
#ifdef __TINYC__
        .int 0x66b527af
        .short 0x8dfd
        .int 0x0005851b
        .short 0x8082
#else
        amoand.w.aqrl   a5,a1,(a0)
        and a1,a1,a5
        sext.w  a0,a1
        ret
	.size   _(__atomic_and_fetch_4), .-_(__atomic_and_fetch_4)

#endif
        .global _(__atomic_and_fetch_8)
        .type   _(__atomic_and_fetch_8), %function
_(__atomic_and_fetch_8):
#ifdef __TINYC__
        .short 0x87aa
        .int 0x66b7b52f
        .short 0x8d6d
        .short 0x8082
#else
        mv  a5,a0
        amoand.d.aqrl   a0,a1,(a5)
        and a0,a0,a1
        ret
	.size   _(__atomic_and_fetch_8), .-_(__atomic_and_fetch_8)

#endif
        .global _(__atomic_fetch_or_1)
        .type   _(__atomic_fetch_or_1), %function
_(__atomic_fetch_or_1):
#ifdef __TINYC__
        .int 0x00357713
        .int 0x0037171b
        .int 0x0ff00693
        .int 0x00e696bb
        .int 0xffc57793
        .int 0xfff6c613
        .int 0x00e595bb
        .int 0x1607a52f
        .int 0x00b56833
        .int 0x00d87833
        .int 0x00c578b3
        .int 0x0108e8b3
        .int 0x1b17a82f
        .int 0xfe0814e3
        .int 0x40e5553b
        .int 0x0ff57513
        .short 0x8082
#else
        andi    a4,a0,3
        slliw   a4,a4,0x3
        li  a3,255
        sllw    a3,a3,a4
        andi    a5,a0,-4
        not a2,a3
        sllw    a1,a1,a4
.L___atomic_fetch_or_1_01c:
        lr.w.aqrl   a0,(a5)
        or  a6,a0,a1
        and a6,a6,a3
        and a7,a0,a2
        or  a7,a7,a6
        sc.w.rl a6,a7,(a5)
        bnez    a6, .L___atomic_fetch_or_1_01c
        sraw    a0,a0,a4
        zext.b  a0,a0
        ret
	.size   _(__atomic_fetch_or_1), .-_(__atomic_fetch_or_1)

#endif
        .global _(__atomic_fetch_or_2)
        .type   _(__atomic_fetch_or_2), %function
_(__atomic_fetch_or_2):
#ifdef __TINYC__
        .int 0x00357693
        .short 0x6741
        .int 0x0036969b
        .short 0x377d
        .int 0x00d7173b
        .int 0xffc57793
        .int 0xfff74613
        .int 0x00d595bb
        .int 0x1607a52f
        .int 0x00b56833
        .int 0x00e87833
        .int 0x00c578b3
        .int 0x0108e8b3
        .int 0x1b17a82f
        .int 0xfe0814e3
        .int 0x40d5553b
        .short 0x1542
        .short 0x9141
        .short 0x8082
#else
        andi    a3,a0,3
        lui a4,0x10
        slliw   a3,a3,0x3
        addiw   a4,a4,-1 # ffff <.LASF15+0xfed2>
        sllw    a4,a4,a3
        andi    a5,a0,-4
        not a2,a4
        sllw    a1,a1,a3
.L___atomic_fetch_or_2_01c:
        lr.w.aqrl   a0,(a5)
        or  a6,a0,a1
        and a6,a6,a4
        and a7,a0,a2
        or  a7,a7,a6
        sc.w.rl a6,a7,(a5)
        bnez    a6, .L___atomic_fetch_or_2_01c
        sraw    a0,a0,a3
        slli    a0,a0,0x30
        srli    a0,a0,0x30
        ret
	.size   _(__atomic_fetch_or_2), .-_(__atomic_fetch_or_2)

#endif
        .global _(__atomic_fetch_or_4)
        .type   _(__atomic_fetch_or_4), %function
_(__atomic_fetch_or_4):
#ifdef __TINYC__
        .int 0x46b527af
        .int 0x0007851b
        .short 0x8082
#else
        amoor.w.aqrl    a5,a1,(a0)
        sext.w  a0,a5
        ret
	.size   _(__atomic_fetch_or_4), .-_(__atomic_fetch_or_4)

#endif
        .global _(__atomic_fetch_or_8)
        .type   _(__atomic_fetch_or_8), %function
_(__atomic_fetch_or_8):
#ifdef __TINYC__
        .short 0x87aa
        .int 0x46b7b52f
        .short 0x8082
#else
        mv  a5,a0
        amoor.d.aqrl    a0,a1,(a5)
        ret
	.size   _(__atomic_fetch_or_8), .-_(__atomic_fetch_or_8)

#endif
        .global _(__atomic_or_fetch_1)
        .type   _(__atomic_or_fetch_1), %function
_(__atomic_or_fetch_1):
#ifdef __TINYC__
        .int 0x00357793
        .int 0x0037979b
        .int 0x0ff00713
        .int 0x00f7173b
        .short 0x9971
        .int 0xfff74813
        .int 0x00f5963b
        .int 0x160526af
        .int 0x00c6e8b3
        .int 0x00e8f8b3
        .int 0x0106f333
        .int 0x01136333
        .int 0x1a6528af
        .int 0xfe0894e3
        .int 0x40f6d6bb
        .short 0x8dd5
        .int 0x0ff5f513
        .short 0x8082
#else
        andi    a5,a0,3
        slliw   a5,a5,0x3
        li  a4,255
        sllw    a4,a4,a5
        andi    a0,a0,-4
        not a6,a4
        sllw    a2,a1,a5
.L___atomic_or_fetch_1_05c:
        lr.w.aqrl   a3,(a0)
        or  a7,a3,a2
        and a7,a7,a4
        and t1,a3,a6
        or  t1,t1,a7
        sc.w.rl a7,t1,(a0)
        bnez    a7, .L___atomic_or_fetch_1_05c
        sraw    a3,a3,a5
        or  a1,a1,a3
        zext.b  a0,a1
        ret
	.size   _(__atomic_or_fetch_1), .-_(__atomic_or_fetch_1)

#endif
        .global _(__atomic_or_fetch_2)
        .type   _(__atomic_or_fetch_2), %function
_(__atomic_or_fetch_2):
#ifdef __TINYC__
        .int 0x00357713
        .short 0x67c1
        .int 0x0037171b
        .short 0x37fd
        .int 0x00e797bb
        .short 0x9971
        .int 0xfff7c813
        .int 0x00e5963b
        .int 0x160526af
        .int 0x00c6e8b3
        .int 0x00f8f8b3
        .int 0x0106f333
        .int 0x01136333
        .int 0x1a6528af
        .int 0xfe0894e3
        .int 0x40e6d6bb
        .short 0x8dd5
        .int 0x03059513
        .short 0x9141
        .short 0x8082
#else
        andi    a4,a0,3
        lui a5,0x10
        slliw   a4,a4,0x3
        addiw   a5,a5,-1 # ffff <.LASF15+0xfed2>
        sllw    a5,a5,a4
        andi    a0,a0,-4
        not a6,a5
        sllw    a2,a1,a4
.L___atomic_or_fetch_2_05c:
        lr.w.aqrl   a3,(a0)
        or  a7,a3,a2
        and a7,a7,a5
        and t1,a3,a6
        or  t1,t1,a7
        sc.w.rl a7,t1,(a0)
        bnez    a7, .L___atomic_or_fetch_2_05c
        sraw    a3,a3,a4
        or  a1,a1,a3
        slli    a0,a1,0x30
        srli    a0,a0,0x30
        ret
	.size   _(__atomic_or_fetch_2), .-_(__atomic_or_fetch_2)

#endif
        .global _(__atomic_or_fetch_4)
        .type   _(__atomic_or_fetch_4), %function
_(__atomic_or_fetch_4):
#ifdef __TINYC__
        .int 0x46b527af
        .short 0x8ddd
        .int 0x0005851b
        .short 0x8082
#else
        amoor.w.aqrl    a5,a1,(a0)
        or  a1,a1,a5
        sext.w  a0,a1
        ret
	.size   _(__atomic_or_fetch_4), .-_(__atomic_or_fetch_4)

#endif
        .global _(__atomic_or_fetch_8)
        .type   _(__atomic_or_fetch_8), %function
_(__atomic_or_fetch_8):
#ifdef __TINYC__
        .short 0x87aa
        .int 0x46b7b52f
        .short 0x8d4d
        .short 0x8082
#else
        mv  a5,a0
        amoor.d.aqrl    a0,a1,(a5)
        or  a0,a0,a1
        ret
	.size   _(__atomic_or_fetch_8), .-_(__atomic_or_fetch_8)

#endif
        .global _(__atomic_fetch_nand_1)
        .type   _(__atomic_fetch_nand_1), %function
_(__atomic_fetch_nand_1):
#ifdef __TINYC__
        .int 0x00357713
        .int 0x0037171b
        .int 0x0ff00693
        .int 0x00e696bb
        .int 0xffc57793
        .int 0xfff6c613
        .int 0x00e595bb
        .int 0x1607a52f
        .int 0x00b57833
        .int 0xfff84813
        .int 0x00d87833
        .int 0x00c578b3
        .int 0x0108e8b3
        .int 0x1b17a82f
        .int 0xfe0812e3
        .int 0x40e5553b
        .int 0x0ff57513
        .short 0x8082
#else
        andi    a4,a0,3
        slliw   a4,a4,0x3
        li  a3,255
        sllw    a3,a3,a4
        andi    a5,a0,-4
        not a2,a3
        sllw    a1,a1,a4
.L___atomic_fetch_nand_1_01c:
        lr.w.aqrl   a0,(a5)
        and a6,a0,a1
        not a6,a6
        and a6,a6,a3
        and a7,a0,a2
        or  a7,a7,a6
        sc.w.rl a6,a7,(a5)
        bnez    a6, .L___atomic_fetch_nand_1_01c
        sraw    a0,a0,a4
        zext.b  a0,a0
        ret
	.size   _(__atomic_fetch_nand_1), .-_(__atomic_fetch_nand_1)

#endif
        .global _(__atomic_fetch_nand_2)
        .type   _(__atomic_fetch_nand_2), %function
_(__atomic_fetch_nand_2):
#ifdef __TINYC__
        .int 0x00357693
        .short 0x6741
        .int 0x0036969b
        .short 0x377d
        .int 0x00d7173b
        .int 0xffc57793
        .int 0xfff74613
        .int 0x00d595bb
        .int 0x1607a52f
        .int 0x00b57833
        .int 0xfff84813
        .int 0x00e87833
        .int 0x00c578b3
        .int 0x0108e8b3
        .int 0x1b17a82f
        .int 0xfe0812e3
        .int 0x40d5553b
        .short 0x1542
        .short 0x9141
        .short 0x8082
#else
        andi    a3,a0,3
        lui a4,0x10
        slliw   a3,a3,0x3
        addiw   a4,a4,-1 # ffff <.LASF17+0xfeda>
        sllw    a4,a4,a3
        andi    a5,a0,-4
        not a2,a4
        sllw    a1,a1,a3
.L___atomic_fetch_nand_2_01c:
        lr.w.aqrl   a0,(a5)
        and a6,a0,a1
        not a6,a6
        and a6,a6,a4
        and a7,a0,a2
        or  a7,a7,a6
        sc.w.rl a6,a7,(a5)
        bnez    a6, .L___atomic_fetch_nand_2_01c
        sraw    a0,a0,a3
        slli    a0,a0,0x30
        srli    a0,a0,0x30
        ret
	.size   _(__atomic_fetch_nand_2), .-_(__atomic_fetch_nand_2)

#endif
        .global _(__atomic_fetch_nand_4)
        .type   _(__atomic_fetch_nand_4), %function
_(__atomic_fetch_nand_4):
#ifdef __TINYC__
        .short 0x411c
        .int 0x00f5f6b3
        .short 0x863e
        .int 0xfff6c693
        .int 0x0007871b
        .int 0x160527af
        .int 0x00c79663
        .int 0x1ad5282f
        .int 0xfe081ae3
        .int 0x40e7873b
        .short 0xff79
        .int 0x0006051b
        .short 0x8082
#else
        lw  a5,0(a0)
.L___atomic_fetch_nand_4_002:
        and a3,a1,a5
        mv  a2,a5
        not a3,a3
        sext.w  a4,a5
.L___atomic_fetch_nand_4_010:
        lr.w.aqrl   a5,(a0)
        bne a5,a2, .L___atomic_fetch_nand_4_020
        sc.w.rl a6,a3,(a0)
        bnez    a6, .L___atomic_fetch_nand_4_010
.L___atomic_fetch_nand_4_020:
        subw    a4,a5,a4
        bnez    a4, .L___atomic_fetch_nand_4_002
        sext.w  a0,a2
        ret
	.size   _(__atomic_fetch_nand_4), .-_(__atomic_fetch_nand_4)

#endif
        .global _(__atomic_fetch_nand_8)
        .type   _(__atomic_fetch_nand_8), %function
_(__atomic_fetch_nand_8):
#ifdef __TINYC__
        .short 0x611c
        .short 0x872a
        .int 0x00b7f6b3
        .short 0x853e
        .int 0xfff6c693
        .int 0x160737af
        .int 0x00a79563
        .int 0x1ad7362f
        .short 0xfa75
        .int 0xfea794e3
        .short 0x8082
#else
        ld  a5,0(a0)
        mv  a4,a0
.L___atomic_fetch_nand_8_004:
        and a3,a5,a1
        mv  a0,a5
        not a3,a3
.L___atomic_fetch_nand_8_00e:
        lr.d.aqrl   a5,(a4)
        bne a5,a0, .L___atomic_fetch_nand_8_01c
        sc.d.rl a2,a3,(a4)
        bnez    a2, .L___atomic_fetch_nand_8_00e
.L___atomic_fetch_nand_8_01c:
        bne a5,a0, .L___atomic_fetch_nand_8_004
        ret
	.size   _(__atomic_fetch_nand_8), .-_(__atomic_fetch_nand_8)

#endif
        .global _(__atomic_nand_fetch_1)
        .type   _(__atomic_nand_fetch_1), %function
_(__atomic_nand_fetch_1):
#ifdef __TINYC__
        .int 0x00357793
        .int 0x0037979b
        .int 0x0ff00713
        .int 0x00f7173b
        .short 0x9971
        .int 0xfff74813
        .int 0x00f5963b
        .int 0x160526af
        .int 0x00c6f8b3
        .int 0xfff8c893
        .int 0x00e8f8b3
        .int 0x0106f333
        .int 0x01136333
        .int 0x1a6528af
        .int 0xfe0892e3
        .int 0x40f6d6bb
        .short 0x8df5
        .int 0xfff5c513
        .int 0x0ff57513
        .short 0x8082
#else
        andi    a5,a0,3
        slliw   a5,a5,0x3
        li  a4,255
        sllw    a4,a4,a5
        andi    a0,a0,-4
        not a6,a4
        sllw    a2,a1,a5
.L___atomic_nand_fetch_1_060:
        lr.w.aqrl   a3,(a0)
        and a7,a3,a2
        not a7,a7
        and a7,a7,a4
        and t1,a3,a6
        or  t1,t1,a7
        sc.w.rl a7,t1,(a0)
        bnez    a7, .L___atomic_nand_fetch_1_060
        sraw    a3,a3,a5
        and a1,a1,a3
        not a0,a1
        zext.b  a0,a0
        ret
	.size   _(__atomic_nand_fetch_1), .-_(__atomic_nand_fetch_1)

#endif
        .global _(__atomic_nand_fetch_2)
        .type   _(__atomic_nand_fetch_2), %function
_(__atomic_nand_fetch_2):
#ifdef __TINYC__
        .int 0x00357713
        .short 0x67c1
        .int 0x0037171b
        .short 0x37fd
        .int 0x00e797bb
        .short 0x9971
        .int 0xfff7c813
        .int 0x00e5963b
        .int 0x160526af
        .int 0x00c6f8b3
        .int 0xfff8c893
        .int 0x00f8f8b3
        .int 0x0106f333
        .int 0x01136333
        .int 0x1a6528af
        .int 0xfe0892e3
        .int 0x40e6d6bb
        .short 0x8df5
        .int 0xfff5c513
        .short 0x1542
        .short 0x9141
        .short 0x8082
#else
        andi    a4,a0,3
        lui a5,0x10
        slliw   a4,a4,0x3
        addiw   a5,a5,-1 # ffff <.LASF17+0xfeda>
        sllw    a5,a5,a4
        andi    a0,a0,-4
        not a6,a5
        sllw    a2,a1,a4
.L___atomic_nand_fetch_2_060:
        lr.w.aqrl   a3,(a0)
        and a7,a3,a2
        not a7,a7
        and a7,a7,a5
        and t1,a3,a6
        or  t1,t1,a7
        sc.w.rl a7,t1,(a0)
        bnez    a7, .L___atomic_nand_fetch_2_060
        sraw    a3,a3,a4
        and a1,a1,a3
        not a0,a1
        slli    a0,a0,0x30
        srli    a0,a0,0x30
        ret
	.size   _(__atomic_nand_fetch_2), .-_(__atomic_nand_fetch_2)

#endif
        .global _(__atomic_nand_fetch_4)
        .type   _(__atomic_nand_fetch_4), %function
_(__atomic_nand_fetch_4):
#ifdef __TINYC__
        .short 0x411c
        .int 0x00f5f733
        .int 0xfff74713
        .int 0x0007869b
        .short 0x883e
        .int 0x160527af
        .int 0x01079563
        .int 0x1ae5262f
        .short 0xfa75
        .int 0x40d786bb
        .short 0xf2e5
        .int 0x0007051b
        .short 0x8082
#else
        lw  a5,0(a0)
.L___atomic_nand_fetch_4_02e:
        and a4,a1,a5
        not a4,a4
        sext.w  a3,a5
        mv  a6,a5
.L___atomic_nand_fetch_4_03c:
        lr.w.aqrl   a5,(a0)
        bne a5,a6, .L___atomic_nand_fetch_4_04a
        sc.w.rl a2,a4,(a0)
        bnez    a2, .L___atomic_nand_fetch_4_03c
.L___atomic_nand_fetch_4_04a:
        subw    a3,a5,a3
        bnez    a3, .L___atomic_nand_fetch_4_02e
        sext.w  a0,a4
        ret
	.size   _(__atomic_nand_fetch_4), .-_(__atomic_nand_fetch_4)

#endif
        .global _(__atomic_nand_fetch_8)
        .type   _(__atomic_nand_fetch_8), %function
_(__atomic_nand_fetch_8):
#ifdef __TINYC__
        .short 0x611c
        .short 0x872a
        .int 0x00b7f533
        .short 0x86be
        .int 0xfff54513
        .int 0x160737af
        .int 0x00d79563
        .int 0x1aa7362f
        .short 0xfa75
        .int 0xfed794e3
        .short 0x8082
#else
        ld  a5,0(a0)
        mv  a4,a0
.L___atomic_nand_fetch_8_026:
        and a0,a5,a1
        mv  a3,a5
        not a0,a0
.L___atomic_nand_fetch_8_030:
        lr.d.aqrl   a5,(a4)
        bne a5,a3, .L___atomic_nand_fetch_8_03e
        sc.d.rl a2,a0,(a4)
        bnez    a2, .L___atomic_nand_fetch_8_030
.L___atomic_nand_fetch_8_03e:
        bne a5,a3, .L___atomic_nand_fetch_8_026
        ret
	.size   _(__atomic_nand_fetch_8), .-_(__atomic_nand_fetch_8)

#endif
        .global _(__atomic_fetch_xor_1)
        .type   _(__atomic_fetch_xor_1), %function
_(__atomic_fetch_xor_1):
#ifdef __TINYC__
        .int 0x00357713
        .int 0x0037171b
        .int 0x0ff00693
        .int 0x00e696bb
        .int 0xffc57793
        .int 0xfff6c613
        .int 0x00e595bb
        .int 0x1607a52f
        .int 0x00b54833
        .int 0x00d87833
        .int 0x00c578b3
        .int 0x0108e8b3
        .int 0x1b17a82f
        .int 0xfe0814e3
        .int 0x40e5553b
        .int 0x0ff57513
        .short 0x8082
#else
        andi    a4,a0,3
        slliw   a4,a4,0x3
        li  a3,255
        sllw    a3,a3,a4
        andi    a5,a0,-4
        not a2,a3
        sllw    a1,a1,a4
.L___atomic_fetch_xor_1_01c:
        lr.w.aqrl   a0,(a5)
        xor a6,a0,a1
        and a6,a6,a3
        and a7,a0,a2
        or  a7,a7,a6
        sc.w.rl a6,a7,(a5)
        bnez    a6, .L___atomic_fetch_xor_1_01c
        sraw    a0,a0,a4
        zext.b  a0,a0
        ret
	.size   _(__atomic_fetch_xor_1), .-_(__atomic_fetch_xor_1)

#endif
        .global _(__atomic_fetch_xor_2)
        .type   _(__atomic_fetch_xor_2), %function
_(__atomic_fetch_xor_2):
#ifdef __TINYC__
        .int 0x00357693
        .short 0x6741
        .int 0x0036969b
        .short 0x377d
        .int 0x00d7173b
        .int 0xffc57793
        .int 0xfff74613
        .int 0x00d595bb
        .int 0x1607a52f
        .int 0x00b54833
        .int 0x00e87833
        .int 0x00c578b3
        .int 0x0108e8b3
        .int 0x1b17a82f
        .int 0xfe0814e3
        .int 0x40d5553b
        .short 0x1542
        .short 0x9141
        .short 0x8082
#else
        andi    a3,a0,3
        lui a4,0x10
        slliw   a3,a3,0x3
        addiw   a4,a4,-1 # ffff <.LASF15+0xfed0>
        sllw    a4,a4,a3
        andi    a5,a0,-4
        not a2,a4
        sllw    a1,a1,a3
.L___atomic_fetch_xor_2_01c:
        lr.w.aqrl   a0,(a5)
        xor a6,a0,a1
        and a6,a6,a4
        and a7,a0,a2
        or  a7,a7,a6
        sc.w.rl a6,a7,(a5)
        bnez    a6, .L___atomic_fetch_xor_2_01c
        sraw    a0,a0,a3
        slli    a0,a0,0x30
        srli    a0,a0,0x30
        ret
	.size   _(__atomic_fetch_xor_2), .-_(__atomic_fetch_xor_2)

#endif
        .global _(__atomic_fetch_xor_4)
        .type   _(__atomic_fetch_xor_4), %function
_(__atomic_fetch_xor_4):
#ifdef __TINYC__
        .int 0x26b527af
        .int 0x0007851b
        .short 0x8082
#else
        amoxor.w.aqrl   a5,a1,(a0)
        sext.w  a0,a5
        ret
	.size   _(__atomic_fetch_xor_4), .-_(__atomic_fetch_xor_4)

#endif
        .global _(__atomic_fetch_xor_8)
        .type   _(__atomic_fetch_xor_8), %function
_(__atomic_fetch_xor_8):
#ifdef __TINYC__
        .short 0x87aa
        .int 0x26b7b52f
        .short 0x8082
#else
        mv  a5,a0
        amoxor.d.aqrl   a0,a1,(a5)
        ret
	.size   _(__atomic_fetch_xor_8), .-_(__atomic_fetch_xor_8)

#endif
        .global _(__atomic_xor_fetch_1)
        .type   _(__atomic_xor_fetch_1), %function
_(__atomic_xor_fetch_1):
#ifdef __TINYC__
        .int 0x00357793
        .int 0x0037979b
        .int 0x0ff00713
        .int 0x00f7173b
        .short 0x9971
        .int 0xfff74813
        .int 0x00f5963b
        .int 0x160526af
        .int 0x00c6c8b3
        .int 0x00e8f8b3
        .int 0x0106f333
        .int 0x01136333
        .int 0x1a6528af
        .int 0xfe0894e3
        .int 0x40f6d6bb
        .short 0x8db5
        .int 0x0ff5f513
        .short 0x8082
#else
        andi    a5,a0,3
        slliw   a5,a5,0x3
        li  a4,255
        sllw    a4,a4,a5
        andi    a0,a0,-4
        not a6,a4
        sllw    a2,a1,a5
.L___atomic_xor_fetch_1_05c:
        lr.w.aqrl   a3,(a0)
        xor a7,a3,a2
        and a7,a7,a4
        and t1,a3,a6
        or  t1,t1,a7
        sc.w.rl a7,t1,(a0)
        bnez    a7, .L___atomic_xor_fetch_1_05c
        sraw    a3,a3,a5
        xor a1,a1,a3
        zext.b  a0,a1
        ret
	.size   _(__atomic_xor_fetch_1), .-_(__atomic_xor_fetch_1)

#endif
        .global _(__atomic_xor_fetch_2)
        .type   _(__atomic_xor_fetch_2), %function
_(__atomic_xor_fetch_2):
#ifdef __TINYC__
        .int 0x00357713
        .short 0x67c1
        .int 0x0037171b
        .short 0x37fd
        .int 0x00e797bb
        .short 0x9971
        .int 0xfff7c813
        .int 0x00e5963b
        .int 0x160526af
        .int 0x00c6c8b3
        .int 0x00f8f8b3
        .int 0x0106f333
        .int 0x01136333
        .int 0x1a6528af
        .int 0xfe0894e3
        .int 0x40e6d6bb
        .short 0x8db5
        .int 0x03059513
        .short 0x9141
        .short 0x8082
#else
        andi    a4,a0,3
        lui a5,0x10
        slliw   a4,a4,0x3
        addiw   a5,a5,-1 # ffff <.LASF15+0xfed0>
        sllw    a5,a5,a4
        andi    a0,a0,-4
        not a6,a5
        sllw    a2,a1,a4
.L___atomic_xor_fetch_2_05c:
        lr.w.aqrl   a3,(a0)
        xor a7,a3,a2
        and a7,a7,a5
        and t1,a3,a6
        or  t1,t1,a7
        sc.w.rl a7,t1,(a0)
        bnez    a7, .L___atomic_xor_fetch_2_05c
        sraw    a3,a3,a4
        xor a1,a1,a3
        slli    a0,a1,0x30
        srli    a0,a0,0x30
        ret
	.size   _(__atomic_xor_fetch_2), .-_(__atomic_xor_fetch_2)

#endif
        .global _(__atomic_xor_fetch_4)
        .type   _(__atomic_xor_fetch_4), %function
_(__atomic_xor_fetch_4):
#ifdef __TINYC__
        .int 0x26b527af
        .short 0x8dbd
        .int 0x0005851b
        .short 0x8082
#else
        amoxor.w.aqrl   a5,a1,(a0)
        xor a1,a1,a5
        sext.w  a0,a1
        ret
	.size   _(__atomic_xor_fetch_4), .-_(__atomic_xor_fetch_4)

#endif
        .global _(__atomic_xor_fetch_8)
        .type   _(__atomic_xor_fetch_8), %function
_(__atomic_xor_fetch_8):
#ifdef __TINYC__
        .short 0x87aa
        .int 0x26b7b52f
        .short 0x8d2d
        .short 0x8082
#else
        mv  a5,a0
        amoxor.d.aqrl   a0,a1,(a5)
        xor a0,a0,a1
        ret
	.size   _(__atomic_xor_fetch_8), .-_(__atomic_xor_fetch_8)

#endif
        .global _(__atomic_test_and_set_1)
        .type   _(__atomic_test_and_set_1), %function
_(__atomic_test_and_set_1):
#ifdef __TINYC__
        .int 0x00357793
        .int 0x0037979b
        .short 0x4685
        .short 0x9971
        .int 0x00f696bb
        .int 0x46d5272f
        .int 0x00f7553b
        .int 0x0ff57513
        .short 0x8082
#else
        andi    a5,a0,3
        slliw   a5,a5,0x3
        li  a3,1
        andi    a0,a0,-4
        sllw    a3,a3,a5
        amoor.w.aqrl    a4,a3,(a0)
        srlw    a0,a4,a5
        zext.b  a0,a0
        ret
	.size   _(__atomic_test_and_set_1), .-_(__atomic_test_and_set_1)

#endif
        .global _(__atomic_test_and_set_2)
        .type   _(__atomic_test_and_set_2), %function
_(__atomic_test_and_set_2):
#ifdef __TINYC__
        .int 0x00357793
        .int 0x0037979b
        .short 0x4685
        .short 0x9971
        .int 0x00f696bb
        .int 0x46d5272f
        .int 0x00f7553b
        .int 0x0ff57513
        .short 0x8082
#else
        andi    a5,a0,3
        slliw   a5,a5,0x3
        li  a3,1
        andi    a0,a0,-4
        sllw    a3,a3,a5
        amoor.w.aqrl    a4,a3,(a0)
        srlw    a0,a4,a5
        zext.b  a0,a0
        ret
	.size   _(__atomic_test_and_set_2), .-_(__atomic_test_and_set_2)

#endif
        .global _(__atomic_test_and_set_4)
        .type   _(__atomic_test_and_set_4), %function
_(__atomic_test_and_set_4):
#ifdef __TINYC__
        .int 0x00357793
        .int 0x0037979b
        .short 0x4685
        .short 0x9971
        .int 0x00f696bb
        .int 0x46d5272f
        .int 0x00f7553b
        .int 0x0ff57513
        .short 0x8082
#else
        andi    a5,a0,3
        slliw   a5,a5,0x3
        li  a3,1
        andi    a0,a0,-4
        sllw    a3,a3,a5
        amoor.w.aqrl    a4,a3,(a0)
        srlw    a0,a4,a5
        zext.b  a0,a0
        ret
	.size   _(__atomic_test_and_set_4), .-_(__atomic_test_and_set_4)

#endif
        .global _(__atomic_test_and_set_8)
        .type   _(__atomic_test_and_set_8), %function
_(__atomic_test_and_set_8):
#ifdef __TINYC__
        .int 0x00357793
        .int 0x0037979b
        .short 0x4685
        .short 0x9971
        .int 0x00f696bb
        .int 0x46d5272f
        .int 0x00f7553b
        .int 0x0ff57513
        .short 0x8082
#else
        andi    a5,a0,3
        slliw   a5,a5,0x3
        li  a3,1
        andi    a0,a0,-4
        sllw    a3,a3,a5
        amoor.w.aqrl    a4,a3,(a0)
        srlw    a0,a4,a5
        zext.b  a0,a0
        ret
	.size   _(__atomic_test_and_set_8), .-_(__atomic_test_and_set_8)

#endif
        .global _(atomic_thread_fence)
        .type   _(atomic_thread_fence), %function
_(atomic_thread_fence):
#ifdef __TINYC__
        .int 0x0330000f
        .short 0x8082
#else
        fence   rw,rw
        ret
	.size   _(atomic_thread_fence), .-_(atomic_thread_fence)

#endif
        .global _(atomic_signal_fence)
        .type   _(atomic_signal_fence), %function
_(atomic_signal_fence):
#ifdef __TINYC__
        .short 0x8082
#else
        ret
	.size   _(atomic_signal_fence), .-_(atomic_signal_fence)

#endif
        .global _(atomic_flag_test_and_set)
        .type   _(atomic_flag_test_and_set), %function
_(atomic_flag_test_and_set):
#ifdef __TINYC__
        .int 0x00357793
        .int 0x0037979b
        .short 0x4685
        .short 0x9971
        .int 0x00f696bb
        .int 0x46d5272f
        .int 0x00f7553b
        .int 0x0ff57513
        .short 0x8082
#else
        andi    a5,a0,3
        slliw   a5,a5,0x3
        li  a3,1
        andi    a0,a0,-4
        sllw    a3,a3,a5
        amoor.w.aqrl    a4,a3,(a0)
        srlw    a0,a4,a5
        zext.b  a0,a0
        ret
	.size   _(atomic_flag_test_and_set), .-_(atomic_flag_test_and_set)

#endif
        .global _(atomic_flag_test_and_set_explicit)
        .type   _(atomic_flag_test_and_set_explicit), %function
_(atomic_flag_test_and_set_explicit):
#ifdef __TINYC__
        .int 0x00357793
        .int 0x0037979b
        .short 0x4685
        .short 0x9971
        .int 0x00f696bb
        .int 0x46d5272f
        .int 0x00f7553b
        .int 0x0ff57513
        .short 0x8082
#else
        andi    a5,a0,3
        slliw   a5,a5,0x3
        li  a3,1
        andi    a0,a0,-4
        sllw    a3,a3,a5
        amoor.w.aqrl    a4,a3,(a0)
        srlw    a0,a4,a5
        zext.b  a0,a0
        ret
	.size   _(atomic_flag_test_and_set_explicit), .-_(atomic_flag_test_and_set_explicit)

#endif
        .global _(atomic_flag_clear)
        .type   _(atomic_flag_clear), %function
_(atomic_flag_clear):
#ifdef __TINYC__
        .int 0x0330000f
        .int 0x00050023
        .int 0x0330000f
        .short 0x8082
#else
        fence   rw,rw
        sb  zero,0(a0)
        fence   rw,rw
        ret
	.size   _(atomic_flag_clear), .-_(atomic_flag_clear)

#endif
        .global _(atomic_flag_clear_explicit)
        .type   _(atomic_flag_clear_explicit), %function
_(atomic_flag_clear_explicit):
#ifdef __TINYC__
        .int 0x0330000f
        .int 0x00050023
        .int 0x0330000f
        .short 0x8082
#else
        fence   rw,rw
        sb  zero,0(a0)
        fence   rw,rw
        ret
	.size   _(atomic_flag_clear_explicit), .-_(atomic_flag_clear_explicit)

#endif
#endif //__riscv
